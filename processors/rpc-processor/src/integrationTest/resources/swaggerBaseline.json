{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Corda HTTP RPC API",
    "description" : "All the endpoints for publicly visible Open API calls",
    "version" : "1"
  },
  "servers" : [ {
    "url" : "/api/v1"
  } ],
  "security" : [ {
    "basicAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "CPI API",
    "description" : "The CPI API consists of a number of endpoints used to manage Corda Package Installer (CPI) files in the Corda cluster."
  }, {
    "name" : "Certificates API",
    "description" : "The Certificates API consists of endpoints used to work with certificates and related operations. The API allows you to import a certificate chain, and generate a certificate signing request (CSR) to be submitted to a certificate authority (CA)."
  }, {
    "name" : "Configuration API",
    "description" : "Cluster configuration management endpoints."
  }, {
    "name" : "Flow Info API",
    "description" : "The Flow Info API consists of a number of endpoints used to find out which flows can be invoked using the Flow Management API for a given identity."
  }, {
    "name" : "Flow Management API",
    "description" : "Flow management endpoints."
  }, {
    "name" : "HSM API",
    "description" : "The HSM API consists of endpoints used to work with Hardware Security Modules (HSM) for securely storing keys."
  }, {
    "name" : "Hello RPC API",
    "description" : "The endpoint used to test interactions via HTTP RPC API. It verifies that a call to HTTP-RPC can be made, and that the identity of the user making the call can be recognized.RBAC permissions are checked and the call is successfully processed by the HTTP-RPC worker."
  }, {
    "name" : "Keys Management API",
    "description" : "The Keys Management API consists of endpoints used to manage public and private key pairs. The API allows you to list scheme codes which are supported by the associated HSM integration, retrieve information about key pairs owned by a tenant, generate a key pair for a tenant, and retrieve a tenant's public key in PEM format."
  }, {
    "name" : "MGM API",
    "description" : "The MGM API consists of a number of endpoints used to manage membership groups. A membership group is a logical grouping of a number of Corda Identities to communicate and transact with one another with a specific set of CorDapps. The API allows you to generate the group policy for a membership group, required for new members to join the group."
  }, {
    "name" : "Member Lookup API",
    "description" : "The Member Lookup API consists of endpoints used to look up information related to membership groups."
  }, {
    "name" : "Member Registration API",
    "description" : "The Member Registration API consists of a number of endpoints which manage holding identities' participation in membership groups. To participate in a membership group, the holding identity is required to make a registration request that needs to be approved by the MGM for that group. This API allows you to start the registration process for a holding identity, and check the status of a previously created registration request."
  }, {
    "name" : "Network API",
    "description" : "The Network API consists of endpoints which manage the setup of holding identities in P2P networks."
  }, {
    "name" : "RBAC Permission API",
    "description" : "Role Based Access Control Permissions Management endpoints."
  }, {
    "name" : "RBAC Role API",
    "description" : "Role Management endpoints for RBAC sub-system."
  }, {
    "name" : "RBAC User API",
    "description" : "Role Based Access Control User Management endpoints."
  }, {
    "name" : "Virtual Node API",
    "description" : "The Virtual Nodes API consists of a number of endpoints to manage virtual nodes."
  }, {
    "name" : "Virtual Node Maintenance API",
    "description" : "The Virtual Node Maintenance API consists of a series of endpoints used for virtual node management.Warning: Using these endpoints could be highly disruptive, so great care should be taken when using them."
  } ],
  "paths" : {
    "/certificates/getprotocolversion" : {
      "get" : {
        "tags" : [ "Certificates API" ],
        "description" : "",
        "operationId" : "get_certificates_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/certificates/{tenantid}" : {
      "put" : {
        "tags" : [ "Certificates API" ],
        "description" : "Enables you to import a certificate chain for a tenant",
        "operationId" : "put_certificates__tenantid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "alias" : {
                    "type" : "string",
                    "description" : "The unique alias under which the certificate chain will be stored",
                    "nullable" : false,
                    "example" : "string"
                  },
                  "certificate" : {
                    "uniqueItems" : false,
                    "type" : "array",
                    "nullable" : false,
                    "items" : {
                      "type" : "string",
                      "description" : "A file to upload.",
                      "format" : "binary",
                      "example" : "No example available for this type"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/certificates/{tenantid}/{keyid}" : {
      "post" : {
        "tags" : [ "Certificates API" ],
        "description" : "Enables you to generate a certificate signing request (CSR) for a tenant",
        "operationId" : "post_certificates__tenantid___keyid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "Identifier of the public key that will be included in the certificate",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier of the public key that will be included in the certificate",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateCsrWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config" : {
      "put" : {
        "tags" : [ "Configuration API" ],
        "description" : "Updates a section of the cluster configuration.",
        "operationId" : "put_config",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateConfigParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated cluster configuration for the specified section.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config/getprotocolversion" : {
      "get" : {
        "tags" : [ "Configuration API" ],
        "description" : "",
        "operationId" : "get_config_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config/{section}" : {
      "get" : {
        "tags" : [ "Configuration API" ],
        "description" : "Get Configuration. Returns the 'active' configuration for the given section, in both the 'raw' format and with defaults applied.",
        "operationId" : "get_config__section_",
        "parameters" : [ {
          "name" : "section",
          "in" : "path",
          "description" : "Section name for the configuration.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Section name for the configuration.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Configuration for the given section.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi" : {
      "get" : {
        "tags" : [ "CPI API" ],
        "description" : "The GET method returns a list of all CPIs uploaded to the cluster.",
        "operationId" : "get_cpi",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Details of all of the CPIs uploaded to the cluster.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCPIsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "CPI API" ],
        "description" : "The upload endpoint uses the POST method to upload a Corda Package Installer (CPI) file to the Corda cluster.",
        "operationId" : "post_cpi",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "upload" : {
                    "type" : "string",
                    "description" : "The CPI file to be uploaded.",
                    "format" : "binary",
                    "nullable" : false,
                    "example" : "No example available for this type"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The Id for the CPI upload request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpiUploadResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi/getprotocolversion" : {
      "get" : {
        "tags" : [ "CPI API" ],
        "description" : "",
        "operationId" : "get_cpi_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi/status/{id}" : {
      "get" : {
        "tags" : [ "CPI API" ],
        "description" : "The status endpoint uses the GET method to return status information for the CPI upload with the given request ID.",
        "operationId" : "get_cpi_status__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID returned from the CPI upload request.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The ID returned from the CPI upload request.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpiUploadStatus"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/getprotocolversion" : {
      "get" : {
        "tags" : [ "Flow Management API" ],
        "description" : "",
        "operationId" : "get_flow_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Flow Management API" ],
        "description" : "Get status of all flows for a holding identity. Returns an empty list if there are no flows running.",
        "operationId" : "get_flow__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of the flow.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponses"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "Flow Management API" ],
        "description" : "Instructs Corda to start a new instance of the specified flow",
        "operationId" : "post_flow__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StartFlowParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The initial status of the flow, if the flow already exists the status of the existing flow will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/{holdingidentityshorthash}/{clientrequestid}" : {
      "get" : {
        "tags" : [ "Flow Management API" ],
        "description" : "Gets the current status for a given flow.",
        "operationId" : "get_flow__holdingidentityshorthash___clientrequestid_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "clientrequestid",
          "in" : "path",
          "description" : "Client provided flow identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Client provided flow identifier",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of the flow.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flowclass/getprotocolversion" : {
      "get" : {
        "tags" : [ "Flow Info API" ],
        "description" : "",
        "operationId" : "get_flowclass_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flowclass/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Flow Info API" ],
        "description" : "This method gets all flows that can be used by the specified holding identity.",
        "operationId" : "get_flowclass__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity. Obtained during node registration.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity. Obtained during node registration.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The class names of all flows that can be run",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StartableFlowsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hello" : {
      "post" : {
        "tags" : [ "Hello RPC API" ],
        "description" : "Produces a greeting phrase for the addressee.",
        "operationId" : "post_hello",
        "parameters" : [ {
          "name" : "addressee",
          "in" : "query",
          "description" : "An arbitrary name can be used for the greeting.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "An arbitrary name can be used for the greeting.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hello/getprotocolversion" : {
      "get" : {
        "tags" : [ "Hello RPC API" ],
        "description" : "",
        "operationId" : "get_hello_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/getprotocolversion" : {
      "get" : {
        "tags" : [ "HSM API" ],
        "description" : "",
        "operationId" : "get_hsm_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/soft/{tenantid}/{category}" : {
      "post" : {
        "tags" : [ "HSM API" ],
        "description" : "Enables you to assign a soft HSM to the tenant for the specified category",
        "operationId" : "post_hsm_soft__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "The category of the HSM; can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The category of the HSM; can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HsmAssociationInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/{tenantid}/{category}" : {
      "get" : {
        "tags" : [ "HSM API" ],
        "description" : "Enables you to retrieve information on the HSM of the specified category assigned to the tenant",
        "operationId" : "get_hsm__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "The category of the HSM; can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The category of the HSM; can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "nullable" : true,
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/HsmAssociationInfo"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "HSM API" ],
        "description" : "Enables you to assign a hardware-backed HSM to the tenant for the specified category",
        "operationId" : "post_hsm__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "The category of the HSM; can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The category of the HSM; can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HsmAssociationInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/getprotocolversion" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "",
        "operationId" : "get_keys_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "Enables you to retrieve information about a list of key pairs belonging to a tenant",
        "operationId" : "get_keys__tenantid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "skip",
          "in" : "query",
          "description" : "The response paging information, number of records to skip",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "The response paging information, number of records to skip",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }, {
          "name" : "take",
          "in" : "query",
          "description" : "The response paging information, that is, the number of records to return. The actual number returned may be less than requested.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "The response paging information, that is, the number of records to return. The actual number returned may be less than requested.",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "Specifies how to order the results. Can be one of 'NONE', 'TIMESTAMP', 'CATEGORY', 'SCHEME_CODE_NAME', 'ALIAS', 'MASTER_KEY_ALIAS', 'EXTERNAL_ID', 'ID', 'TIMESTAMP_DESC', 'CATEGORY_DESC', 'SCHEME_CODE_NAME_DESC', 'ALIAS_DESC', 'MASTER_KEY_ALIAS_DESC', 'EXTERNAL_ID_DESC', 'ID_DESC'.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Specifies how to order the results. Can be one of 'NONE', 'TIMESTAMP', 'CATEGORY', 'SCHEME_CODE_NAME', 'ALIAS', 'MASTER_KEY_ALIAS', 'EXTERNAL_ID', 'ID', 'TIMESTAMP_DESC', 'CATEGORY_DESC', 'SCHEME_CODE_NAME_DESC', 'ALIAS_DESC', 'MASTER_KEY_ALIAS_DESC', 'EXTERNAL_ID_DESC', 'ID_DESC'.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Category of the HSM which handles the key pairs. Can be one of 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', 'JWT_KEY'.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM which handles the key pairs. Can be one of 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', 'JWT_KEY'.",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "schemecodename",
          "in" : "query",
          "description" : "The key pairs' signature scheme name. For example, 'CORDA.RSA', 'CORDA.ECDSA.SECP256K1', 'CORDA.ECDSA_SECP256R1', 'CORDA.EDDSA.ED25519', 'CORDA.SPHINCS-256'.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key pairs' signature scheme name. For example, 'CORDA.RSA', 'CORDA.ECDSA.SECP256K1', 'CORDA.ECDSA_SECP256R1', 'CORDA.EDDSA.ED25519', 'CORDA.SPHINCS-256'.",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "alias",
          "in" : "query",
          "description" : "The alias under which the key pair is stored",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The alias under which the key pair is stored",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "masterkeyalias",
          "in" : "query",
          "description" : "The alias of the wrapping key",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The alias of the wrapping key",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "createdafter",
          "in" : "query",
          "description" : "Only include key pairs which were created on or after the specified time. Must be a valid instant in UTC, such as 2022-12-03T10:15:30.00Z.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Only include key pairs which were created on or after the specified time. Must be a valid instant in UTC, such as 2022-12-03T10:15:30.00Z.",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "createdbefore",
          "in" : "query",
          "description" : "Only include key pairs which were created on or before the specified time. Must be a valid instant in UTC, such as 2022-12-03T10:15:30.00Z.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Only include key pairs which were created on or before the specified time. Must be a valid instant in UTC, such as 2022-12-03T10:15:30.00Z.",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Only include key pairs associated with the specified list of key IDs. If specified, other filter parameters will be ignored.",
          "required" : false,
          "schema" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A map of key IDs to the respective key pair information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "$ref" : "#/components/schemas/KeyMetaData"
                  },
                  "nullable" : false,
                  "example" : "No example available for this type"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/alias/{alias}/category/{hsmcategory}/scheme/{scheme}" : {
      "post" : {
        "tags" : [ "Keys Management API" ],
        "description" : "Enables you to generate a new key pair for a tenant",
        "operationId" : "post_keys__tenantid__alias__alias__category__hsmcategory__scheme__scheme_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "alias",
          "in" : "path",
          "description" : "The alias under which the new key pair will be stored",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The alias under which the new key pair will be stored",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "hsmcategory",
          "in" : "path",
          "description" : "Category of the HSM which handles the key pairs. Can be one of 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', 'JWT_KEY'.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM which handles the key pairs. Can be one of 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', 'JWT_KEY'.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "scheme",
          "in" : "path",
          "description" : "The key's scheme describing which type of the key pair to generate. For example, 'CORDA.RSA', 'CORDA.ECDSA.SECP256K1', 'CORDA.ECDSA_SECP256R1', 'CORDA.EDDSA.ED25519', 'CORDA.SPHINCS-256'.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The key's scheme describing which type of the key pair to generate. For example, 'CORDA.RSA', 'CORDA.ECDSA.SECP256K1', 'CORDA.ECDSA_SECP256R1', 'CORDA.EDDSA.ED25519', 'CORDA.SPHINCS-256'.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The ID of the newly generated key pair",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KeyPairIdentifier"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/schemes/{hsmcategory}" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "Enables you to retrieve a list of supported key schemes for a specified tenant and HSM category",
        "operationId" : "get_keys__tenantid__schemes__hsmcategory_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "hsmcategory",
          "in" : "path",
          "description" : "The category of the HSM. Can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The category of the HSM. Can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of scheme codes which are supported by the associated HSM integration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : false,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "type" : "string",
                    "example" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/{keyid}" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "Enables you to retrieve a tenant's public key in PEM format",
        "operationId" : "get_keys__tenantid___keyid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Can either be a holding identity ID, the value 'p2p' for a cluster-level tenant of the P2P services, or the value 'rpc-api' for a cluster-level tenant of the HTTP RPC API",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "Identifier of the public key to be retrieved",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier of the public key to be retrieved",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The public key in PEM format",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/forcecpiupload" : {
      "post" : {
        "tags" : [ "Virtual Node Maintenance API" ],
        "description" : "Force uploads a CPI file. Even if CPI with the same metadata has already been uploaded, this endpoint will overwrite the previously stored CPI record. This operation also purges any sandboxes running an overwritten version of a CPI. This action can take some time to process, therefore it is performed asynchronously.",
        "operationId" : "post_maintenance_virtualnode_forcecpiupload",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "upload" : {
                    "type" : "string",
                    "description" : "A file to upload.",
                    "format" : "binary",
                    "nullable" : false,
                    "example" : "No example available for this type"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The response ID which can be used to track the progress of the force CPI upload operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpiUploadResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/getprotocolversion" : {
      "get" : {
        "tags" : [ "Virtual Node Maintenance API" ],
        "description" : "",
        "operationId" : "get_maintenance_virtualnode_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/{virtualnodeshortid}/state/{newstate}" : {
      "put" : {
        "tags" : [ "Virtual Node Maintenance API" ],
        "description" : "Updates the state of a new virtual node to one of the pre-defined values.",
        "operationId" : "put_maintenance_virtualnode__virtualnodeshortid__state__newstate_",
        "parameters" : [ {
          "name" : "virtualnodeshortid",
          "in" : "path",
          "description" : "Short ID of the virtual node instance to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short ID of the virtual node instance to update",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "newstate",
          "in" : "path",
          "description" : "State to transition virtual node instance into. Possible values are: IN_MAINTENANCE and ACTIVE.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "State to transition virtual node instance into. Possible values are: IN_MAINTENANCE and ACTIVE.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete information about updated virtual node which will also contain the updated state.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeVirtualNodeStateResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/members/getprotocolversion" : {
      "get" : {
        "tags" : [ "Member Lookup API" ],
        "description" : "",
        "operationId" : "get_members_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/members/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Member Lookup API" ],
        "description" : "Enables you to retrieve a list of all active and pending members in the membership group",
        "operationId" : "get_members__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Holding identity ID of the requesting member. The result only contains members that are visible to this member",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Holding identity ID of the requesting member. The result only contains members that are visible to this member",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "cn",
          "in" : "query",
          "description" : "Common Name (CN) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Common Name (CN) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "o",
          "in" : "query",
          "description" : "Organisation (O) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Organisation (O) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "ou",
          "in" : "query",
          "description" : "Organisation Unit (OU) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Organisation Unit (OU) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "l",
          "in" : "query",
          "description" : "Locality (L) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Locality (L) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "st",
          "in" : "query",
          "description" : "State (ST) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "State (ST) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "c",
          "in" : "query",
          "description" : "Country (C) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Country (C) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RpcMemberInfoList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/getprotocolversion" : {
      "get" : {
        "tags" : [ "Member Registration API" ],
        "description" : "",
        "operationId" : "get_membership_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Member Registration API" ],
        "description" : "Enables you to check the statuses of all registration requests for a holding identity",
        "operationId" : "get_membership__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "The ID of the holding identity whose registration progress is to be checked",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The ID of the holding identity whose registration progress is to be checked",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : false,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/RegistrationRequestStatus"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "Member Registration API" ],
        "description" : "Enables you to start the registration process for a holding identity",
        "operationId" : "post_membership__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "The holding identity ID of the requesting virtual node",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The holding identity ID of the requesting virtual node",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberRegistrationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRequestProgress"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/{holdingidentityshorthash}/{registrationrequestid}" : {
      "get" : {
        "tags" : [ "Member Registration API" ],
        "description" : "Enables you to check the status of the specified registration request for a holding identity",
        "operationId" : "get_membership__holdingidentityshorthash___registrationrequestid_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "The ID of the holding identity whose registration progress is to be checked",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The ID of the holding identity whose registration progress is to be checked",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "registrationrequestid",
          "in" : "path",
          "description" : "The ID of the registration request",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The ID of the registration request",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "nullable" : true,
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/RegistrationRequestStatus"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/mgm/getprotocolversion" : {
      "get" : {
        "tags" : [ "MGM API" ],
        "description" : "",
        "operationId" : "get_mgm_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/mgm/{holdingidentityshorthash}/info" : {
      "get" : {
        "tags" : [ "MGM API" ],
        "description" : "Enables you to retrieve the group policy from the MGM required to join the membership group",
        "operationId" : "get_mgm__holdingidentityshorthash__info",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "The holding identity ID of the MGM of the membership group to be joined",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The holding identity ID of the MGM of the membership group to be joined",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/network/getprotocolversion" : {
      "get" : {
        "tags" : [ "Network API" ],
        "description" : "",
        "operationId" : "get_network_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/network/setup/{holdingidentityshorthash}" : {
      "put" : {
        "tags" : [ "Network API" ],
        "description" : "Enables you to configure a holding identity as a network participant by setting properties required for P2P messaging",
        "operationId" : "put_network_setup__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to set up",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to set up",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HostedIdentitySetupRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission" : {
      "post" : {
        "tags" : [ "RBAC Permission API" ],
        "description" : "Create a Permission",
        "operationId" : "post_permission",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePermissionType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermissionResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission/getprotocolversion" : {
      "get" : {
        "tags" : [ "RBAC Permission API" ],
        "description" : "",
        "operationId" : "get_permission_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission/{id}" : {
      "get" : {
        "tags" : [ "RBAC Permission API" ],
        "description" : "Get a Permission by its ID",
        "operationId" : "get_permission__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the permission to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the permission to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermissionResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role" : {
      "get" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "Get all the roles",
        "operationId" : "get_role",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/RoleResponseType"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "Create a Role",
        "operationId" : "post_role",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateRoleType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/getprotocolversion" : {
      "get" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "",
        "operationId" : "get_role_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/{id}" : {
      "get" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "Get a Role by its ID",
        "operationId" : "get_role__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the role to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the role to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/{roleid}/permission/{permissionid}" : {
      "put" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "Add a permission to a role",
        "operationId" : "put_role__roleid__permission__permissionid_",
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Identifier for an existing role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing role",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "permissionid",
          "in" : "path",
          "description" : "Identifier for an existing permission",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing permission",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "delete" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "Removes a permission from a role",
        "operationId" : "delete_role__roleid__permission__permissionid_",
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Identifier for an existing role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing role",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "permissionid",
          "in" : "path",
          "description" : "Identifier for an existing permission",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing permission",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "RBAC User API" ],
        "description" : "Get a User by Login Name",
        "operationId" : "get_user",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "query",
          "description" : "Login Name of the user to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Login Name of the user to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "RBAC User API" ],
        "description" : "Create a User",
        "operationId" : "post_user",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateUserType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/getprotocolversion" : {
      "get" : {
        "tags" : [ "RBAC User API" ],
        "description" : "",
        "operationId" : "get_user_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/{loginname}/permissionsummary" : {
      "get" : {
        "tags" : [ "RBAC User API" ],
        "description" : "Get a summary of a User's permissions",
        "operationId" : "get_user__loginname__permissionsummary",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "path",
          "description" : "Login Name of the user.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Login Name of the user.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPermissionSummaryResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/{loginname}/role/{roleid}" : {
      "put" : {
        "tags" : [ "RBAC User API" ],
        "description" : "Assign a Role to a User",
        "operationId" : "put_user__loginname__role__roleid_",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "path",
          "description" : "User login name to be changed",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "User login name to be changed",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Id of the role to associate with this user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Id of the role to associate with this user",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "delete" : {
        "tags" : [ "RBAC User API" ],
        "description" : "Un-assign a role from a user",
        "operationId" : "delete_user__loginname__role__roleid_",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "path",
          "description" : "User login name to be changed",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "User login name to be changed",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Id of the role to un-assign from this user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Id of the role to un-assign from this user",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/virtualnode" : {
      "get" : {
        "tags" : [ "Virtual Node API" ],
        "description" : "The virtual node endpoint uses the GET method to list all virtual nodes in the cluster.",
        "operationId" : "get_virtualnode",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List of virtual node details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VirtualNodes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "Virtual Node API" ],
        "description" : "The virtual node endpoint uses the POST method to create a new virtual node.",
        "operationId" : "post_virtualnode",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VirtualNodeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The details of the created virtual node.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VirtualNodeInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/virtualnode/getprotocolversion" : {
      "get" : {
        "tags" : [ "Virtual Node API" ],
        "description" : "",
        "operationId" : "get_virtualnode_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ChangeVirtualNodeStateResponse" : {
        "required" : [ "holdingIdShortHash", "newState" ],
        "type" : "object",
        "properties" : {
          "holdingIdShortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "newState" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "ConfigSchemaVersion" : {
        "required" : [ "major", "minor" ],
        "type" : "object",
        "properties" : {
          "major" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          },
          "minor" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "CpiIdentifier" : {
        "required" : [ "cpiName", "cpiVersion" ],
        "type" : "object",
        "properties" : {
          "cpiName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpiVersion" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "signerSummaryHash" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "CpiMetadata" : {
        "required" : [ "cpiFileChecksum", "cpiFileFullChecksum", "cpks", "id", "timestamp" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpiFileFullChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpks" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpkMetadata"
            }
          },
          "groupPolicy" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/CpiIdentifier"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "CpiUploadResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CpiUploadStatus" : {
        "required" : [ "cpiFileChecksum", "status" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "status" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CpkIdentifier" : {
        "required" : [ "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "signerSummaryHash" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "version" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CpkMetadata" : {
        "required" : [ "dependencies", "hash", "id", "libraries", "mainBundle", "timestamp", "type" ],
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpkIdentifier"
            }
          },
          "hash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/CpkIdentifier"
          },
          "libraries" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          },
          "mainBundle" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CreatePermissionType" : {
        "required" : [ "permissionString", "permissionType" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "type" : "object",
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        },
        "description" : "Details of the permission to be created"
      },
      "CreateRoleType" : {
        "required" : [ "roleName" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "roleName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "Details of the role to be created"
      },
      "CreateUserType" : {
        "required" : [ "enabled", "fullName", "loginName" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "fullName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "initialPassword" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "parentGroup" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "passwordExpiry" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          }
        },
        "description" : "Details of the user to be created"
      },
      "FlowStateErrorResponse" : {
        "required" : [ "message", "type" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "FlowStatusResponse" : {
        "required" : [ "flowStatus", "holdingIdentityShortHash", "timestamp" ],
        "type" : "object",
        "properties" : {
          "clientRequestId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowError" : {
            "$ref" : "#/components/schemas/FlowStateErrorResponse"
          },
          "flowId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowResult" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowStatus" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "holdingIdentityShortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "FlowStatusResponses" : {
        "required" : [ "flowStatusResponses" ],
        "type" : "object",
        "properties" : {
          "flowStatusResponses" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/FlowStatusResponse"
            }
          }
        }
      },
      "GenerateCsrWrapperRequest" : {
        "required" : [ "certificateRole", "x500Name" ],
        "type" : "object",
        "properties" : {
          "certificateRole" : {
            "type" : "string",
            "description" : "Can be the value 'ACCOUNTS', 'CI', 'LEDGER', 'NOTARY', 'SESSION_INIT', 'TLS', or 'JWT_KEY'",
            "nullable" : false,
            "example" : "string"
          },
          "contextMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "description" : "Used to add additional attributes to the CSR; for example, signature spec",
            "nullable" : true,
            "example" : "No example available for this type"
          },
          "subjectAlternativeNames" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          },
          "x500Name" : {
            "type" : "string",
            "description" : "X.500 name that will be the subject associated with the request",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "GenerateCsrWrapperRequest",
        "nullable" : false
      },
      "GetCPIsResponse" : {
        "required" : [ "cpis" ],
        "type" : "object",
        "properties" : {
          "cpis" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpiMetadata"
            }
          }
        }
      },
      "GetConfigResponse" : {
        "required" : [ "configWithDefaults", "schemaVersion", "section", "sourceConfig", "version" ],
        "type" : "object",
        "properties" : {
          "configWithDefaults" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/ConfigSchemaVersion"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "sourceConfig" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "HoldingIdentity" : {
        "required" : [ "fullHash", "groupId", "shortHash", "x500Name" ],
        "type" : "object",
        "properties" : {
          "fullHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "groupId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "shortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "x500Name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "HostedIdentitySetupRequest" : {
        "required" : [ "p2pTlsCertificateChainAlias" ],
        "type" : "object",
        "properties" : {
          "p2pTlsCertificateChainAlias" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "p2pTlsTenantId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "sessionKeyId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "sessionKeyTenantId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        },
        "description" : "Request object which contains properties for P2P messaging including the P2P TLS certificate chain alias, the TLS tenant ID (either 'p2p' or holding identity ID), the tenant ID under which the session initiation key is stored, and the session key identifier"
      },
      "HsmAssociationInfo" : {
        "required" : [ "category", "deprecatedAt", "hsmId", "id" ],
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "deprecatedAt" : {
            "type" : "integer",
            "format" : "int64",
            "nullable" : false,
            "example" : 0
          },
          "hsmId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "masterKeyAlias" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "KeyMetaData" : {
        "required" : [ "alias", "created", "hsmCategory", "keyId", "scheme" ],
        "type" : "object",
        "properties" : {
          "alias" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "hsmCategory" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "keyId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "masterKeyAlias" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "scheme" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "KeyPairIdentifier" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "MemberInfoSubmitted" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        }
      },
      "MemberRegistrationRequest" : {
        "required" : [ "action", "context" ],
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        },
        "description" : "The request sent during registration which contains the requested registration action (e.g. 'requestJoin') along with a context map containing data required to initiate the registration process."
      },
      "PermissionAssociationResponseType" : {
        "required" : [ "createdTimestamp", "id" ],
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "PermissionResponseType" : {
        "required" : [ "id", "permissionString", "permissionType", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "type" : "object",
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "PermissionSummaryResponseType" : {
        "required" : [ "id", "permissionString", "permissionType" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "type" : "object",
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "PropertyResponseType" : {
        "required" : [ "key", "lastChangedTimestamp", "value" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "lastChangedTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "value" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RegistrationRequestProgress" : {
        "required" : [ "memberInfoSubmitted", "registrationId", "registrationStatus" ],
        "type" : "object",
        "properties" : {
          "memberInfoSubmitted" : {
            "$ref" : "#/components/schemas/MemberInfoSubmitted"
          },
          "registrationId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "registrationSent" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "registrationStatus" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RegistrationRequestStatus" : {
        "required" : [ "memberInfoSubmitted", "registrationId", "registrationStatus" ],
        "type" : "object",
        "properties" : {
          "memberInfoSubmitted" : {
            "$ref" : "#/components/schemas/MemberInfoSubmitted"
          },
          "registrationId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "registrationSent" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "registrationStatus" : {
            "type" : "object",
            "nullable" : false,
            "example" : "PENDING_MEMBER_VERIFICATION",
            "enum" : [ "NEW", "PENDING_MEMBER_VERIFICATION", "PENDING_APPROVAL_FLOW", "PENDING_MANUAL_APPROVAL", "PENDING_AUTO_APPROVAL", "DECLINED", "APPROVED" ]
          },
          "registrationUpdated" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "RoleAssociationResponseType" : {
        "required" : [ "createTimestamp", "roleId" ],
        "type" : "object",
        "properties" : {
          "createTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "roleId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RoleResponseType" : {
        "required" : [ "id", "permissions", "roleName", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissions" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PermissionAssociationResponseType"
            }
          },
          "roleName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "RpcMemberInfo" : {
        "required" : [ "memberContext", "mgmContext" ],
        "type" : "object",
        "properties" : {
          "memberContext" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          },
          "mgmContext" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        }
      },
      "RpcMemberInfoList" : {
        "required" : [ "members" ],
        "type" : "object",
        "properties" : {
          "members" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/RpcMemberInfo"
            }
          }
        }
      },
      "StartFlowParameters" : {
        "required" : [ "clientRequestId", "flowClassName", "requestData" ],
        "type" : "object",
        "properties" : {
          "clientRequestId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "flowClassName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "requestData" : {
            "description" : "Can be any value - string, number, boolean, array or object.",
            "nullable" : false,
            "example" : "{\"command\":\"echo\", \"data\":{\"value\": \"hello-world\"}}",
            "anyOf" : [ {
              "type" : "string"
            }, {
              "type" : "number"
            }, {
              "type" : "integer",
              "format" : "int32"
            }, {
              "type" : "boolean"
            }, {
              "type" : "array"
            }, {
              "type" : "object"
            } ]
          }
        },
        "description" : "Information required to start a flow for this holdingId"
      },
      "StartableFlowsResponse" : {
        "required" : [ "flowClassNames" ],
        "type" : "object",
        "properties" : {
          "flowClassNames" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          }
        }
      },
      "UpdateConfigParameters" : {
        "required" : [ "config", "schemaVersion", "section", "version" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/ConfigSchemaVersion"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        },
        "description" : "Details of the updated configuration"
      },
      "UpdateConfigResponse" : {
        "required" : [ "config", "schemaVersion", "section", "version" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/ConfigSchemaVersion"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "UserPermissionSummaryResponseType" : {
        "required" : [ "enabled", "lastUpdateTimestamp", "loginName", "permissions" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "lastUpdateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissions" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PermissionSummaryResponseType"
            }
          }
        }
      },
      "UserResponseType" : {
        "required" : [ "enabled", "fullName", "id", "loginName", "properties", "roleAssociations", "ssoAuth", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "fullName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "parentGroup" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "passwordExpiry" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "properties" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PropertyResponseType"
            }
          },
          "roleAssociations" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/RoleAssociationResponseType"
            }
          },
          "ssoAuth" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "VirtualNodeInfo" : {
        "required" : [ "cpiIdentifier", "cryptoDmlConnectionId", "holdingIdentity", "state", "uniquenessDmlConnectionId", "vaultDmlConnectionId" ],
        "type" : "object",
        "properties" : {
          "cpiIdentifier" : {
            "$ref" : "#/components/schemas/CpiIdentifier"
          },
          "cryptoDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "cryptoDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "holdingIdentity" : {
            "$ref" : "#/components/schemas/HoldingIdentity"
          },
          "hsmConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "state" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "uniquenessDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "uniquenessDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "vaultDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "VirtualNodeRequest" : {
        "required" : [ "cpiFileChecksum", "x500Name" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cryptoDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "cryptoDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "uniquenessDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "uniquenessDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "x500Name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "Details of the virtual node to be created"
      },
      "VirtualNodes" : {
        "required" : [ "virtualNodes" ],
        "type" : "object",
        "properties" : {
          "virtualNodes" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/VirtualNodeInfo"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}
