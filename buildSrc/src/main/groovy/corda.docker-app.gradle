plugins {
    id 'corda.common-app'
}

configurations {
    dockerImage {
        canBeConsumed = false
        transitive = false
    }

    dockerImageJdbc {
        canBeConsumed = false
        transitive = false
    }

    profilerAgent {
        canBeConsumed = false
        visible = false
    }
}

if (enableProfiling.toBoolean()) {
    dependencies {
        // Unzip the Java profiler into the Docker image.
        profilerAgent "com.yourkit.corda:yourkit-agent-linux-x86-64:$profilerVersion@zip"
        dockerImage provider { zipTree(configurations.profilerAgent.singleFile) }
    }
}

tasks.register('publishBuildkitImage' , BuildkitBuild) {
    def containerizationDir = it.temporaryDir.toString()
    def containerLocation = '/opt/override/'
    it.sourceFiles.setFrom(tasks.named('appJar', Jar))
    it.extraSourceFiles.setFrom(configurations.dockerImage)
    it.useShortName = true
    String containerName = project.name
    String containerTag = ''

    if (project.hasProperty('baseImage')) {
        baseImageName = baseImage
    }

    if (project.hasProperty('baseTag')) {
        it.baseImageTag = baseTag
    }

    if(project.hasProperty('Tag')){
        containerTag = Tag
    }

    List<String> javaArgs = new ArrayList<String>(it.arguments.get())
    javaArgs.add("-Dlog4j2.debug=\${ENABLE_LOG4J2_DEBUG:-false}")
    javaArgs.add("-Dlog4j.configurationFile=\${LOG4J_CONFIG_FILE}")


    def imageName = "${it.baseImageTag.get().empty ? it.baseImageName.get() : "${it.baseImageName.get()}:${it.baseImageTag.get()}"}"
    def finalName = "${containerTag.isEmpty() ? containerName : "${containerName}:${containerTag}"}"

    // Task executes the buildctl build command below

    // see

    // buildctl \
    //         --addr {address of the buildkit pod} \
    // build --frontend=dockerfile.v0 \
    //         --local context= {working directory} \
    //         --local dockerfile= {location of the dockerfile} \
    //         --opt build-arg:BASE_IMAGE= {base image of the worker, should be worker-cli for os-plugins and azul zulu jdk for everythign else} \
    //         --opt build-arg:BUILD_PATH={location of a folder with fat jars} \
    //         --opt build-arg:JAR_LOCATION={where to save said fat jars on an image}}\
    //         --opt build-arg:IMAGE_ENTRYPOINT={entrypoint: exec of the fat jar with some argument} \
    //         --output type=image,name=docker-js-temp.software.r3.com/IMAGE_NAME:IMAGE_TAG,push=true \
    //         --export-cache type=registry,ref=docker-js-temp.software.r3.com/IMAGE_NAME:IMAGE_TAG-cache \
    //         --import-cache type=registry,ref=docker-js-temp.software.r3.com/IMAGE_NAME:IMAGE_TAG-cache



    doLast {
        logger.quiet("buildctl --addr tcp://localhost:3476 build --frontend=dockerfile.v0 --local context=/ --local dockerfile=${project.rootDir.toString() + "/docker"} --opt build-arg:BASE_IMAGE=${imageName} --opt build-arg:BUILD_PATH=${containerizationDir} --opt build-arg:JAR_LOCATION=${containerLocation} --opt build-arg:IMAGE_ENTRYPOINT=\"exec java ${javaArgs.join(" ")} -jar  ${containerLocation}${containerName}.jar\" --output type=image,name=docker-js-temp.software.r3.com/corda-os-${finalName},push=true --export-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache --import-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache")
        exec{
            workingDir("${project.rootDir}")
            commandLine 'bash', '-c', "buildctl --addr tcp://localhost:3476 build --frontend=dockerfile.v0 --local context=/ --local dockerfile=${project.rootDir.toString() + "/docker"} --opt build-arg:BASE_IMAGE=${imageName} --opt build-arg:BUILD_PATH=${containerizationDir} --opt build-arg:JAR_LOCATION=${containerLocation} --opt build-arg:IMAGE_ENTRYPOINT=\"exec java ${javaArgs.join(" ")} -jar  ${containerLocation}${containerName}.jar\" --output type=image,name=docker-js-temp.software.r3.com/corda-os-${finalName},push=true --export-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache --import-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache"
        }
    }

}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    it.sourceFiles.setFrom(tasks.named('appJar', Jar))
    it.extraSourceFiles.setFrom(configurations.dockerImage)
    it.jdbcDriverFiles.setFrom(configurations.dockerImageJdbc)
    it.useShortName = true

    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }

    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    if (project.hasProperty('baseImage')) {
        baseImageName = baseImage
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
}
