import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id "biz.aQute.bnd.builder"
}

dependencies {
    compileOnly "org.osgi:org.osgi.service.component.annotations:$osgiScrAnnotationVersion"
    compileOnly "org.osgi:osgi.annotation:$osgiVersion"
    compileOnly "org.osgi:osgi.core:$osgiVersion"

    implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"

    integrationTestImplementation project(":libs:security-manager")
    integrationTestImplementation project(":libs:security-manager:osgi-integration-tests:osgi-invoker-impl")
    integrationTestImplementation project(":libs:security-manager:osgi-integration-tests:local-permissions-impl")
    integrationTestImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"

    integrationTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felixConfigAdminVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework.security:$felixSecurityVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveBaseName = "security-manager-osgi-tests"
    from sourceSets.integrationTest.output
    sourceSet = sourceSets.integrationTest
    bnd '''
Bundle-Name: security-manager-osgi-tests
Bundle-SymbolicName: security-manager-osgi-tests
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
'''
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(sourceSets.integrationTest.runtimeClasspath, configurations.archives.artifacts.files, testingBundle)
    bndrun = file('tests.bndrun')
    //  bnd attempts to use ~/ for caching. If this is unavailable, the build will fail.
    System.setProperty("bnd.home.dir", "$rootDir/bnd")
}

tasks.register('integrationTest', Test) {
    dependsOn testOSGi
    enabled = false
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve
    resultsDirectory = file("$testResultsDir/integrationTest")
    bundles = files(sourceSets.integrationTest.runtimeClasspath, configurations.archives.artifacts.files, testingBundle)
    bndrun = file('tests.bndrun')
}

tasks.named('check') {
    dependsOn testOSGi
}
