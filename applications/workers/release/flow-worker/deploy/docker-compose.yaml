services:
  zookeeper:
    container_name: zookeeper
    # https://hub.docker.com/r/bitnami/zookeeper
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    # https://hub.docker.com/r/bitnami/kafka
    image: "bitnami/kafka:latest"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server 127.0.0.1:9093 --list" ]
      interval: 5s
      timeout: 20s
      retries: 15

  init-kafka:
    container_name: init-kafka
    image: "bitnami/kafka:latest"
    depends_on:
      kafka:
        condition: service_healthy

    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic config.topic --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic config.management.request
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic config.management.request.resp
      
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic p2p.in
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic p2p.out

      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic virtual.node.creation.request
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic virtual.node.creation.request.resp
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic virtual.node.info --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic cpi.info --config "cleanup.policy=compact"

      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic cpi.upload
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic cpi.upload.status

      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic cpk.file --config "cleanup.policy=compact"

      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.management
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.management.resp
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.user --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.group --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.role --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.permission --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic permissions.user.summary --config "cleanup.policy=compact"

      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic flow.event
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic flow.event.state --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic flow.event.dlq
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic flow.mapper.event
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic flow.mapper.event.state --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 3 --replication-factor 1 --create --topic flow.mapper.event.dlq
      kafka-topics.sh --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 --create --topic flow.status --config "cleanup.policy=compact"

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9093 --list
      "

  flow-worker1:
    container_name: flow-worker1
    # Created with `gradlew applications:workers:release:flow:publishOSGiImage`.
    image: "corda-os-docker-dev.software.r3.com/corda-os-flow-worker:latest-local"
    ports:
      - "5008:5008" # debug port
      - "7003:7000" # healthcheck port
    command:
      - -mbus.kafkaProperties.common.bootstrap.servers=localhost:9093
      - -mbus.busType=KAFKA
    depends_on:
      - init-kafka
    volumes:
      - ${FLOW_WORKER_DIR}/testing/cpbs/helloworld/build/libs:/cpiDir
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:7000/isHealthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 20

  flow-worker2:
    container_name: flow-worker2
    # Created with `gradlew applications:workers:release:flow:publishOSGiImage`.
    image: "corda-os-docker-dev.software.r3.com/corda-os-flow-worker:latest-local"
    ports:
      - "5009:5009" # debug port
      - "7004:7000" # healthcheck port
    command:
      - -mbus.kafkaProperties.common.bootstrap.servers=localhost:9093
      - -mbus.busType=KAFKA
    depends_on:
      - init-kafka
    volumes:
      - ${FLOW_WORKER_DIR}/testing/cpbs/helloworld/build/libs:/cpiDir
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:7000/isHealthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 20

  flow-worker3:
    container_name: flow-worker3
    # Created with `gradlew applications:workers:release:flow:publishOSGiImage`.
    image: "corda-os-docker-dev.software.r3.com/corda-os-flow-worker:latest-local"
    ports:
      - "5010:5010" # debug port
      - "7005:7000" # healthcheck port
    command:
      - -mbus.kafkaProperties.common.bootstrap.servers=localhost:9093
      - -mbus.busType=KAFKA
    depends_on:
      - init-kafka
    volumes:
      - ${FLOW_WORKER_DIR}/testing/cpbs/helloworld/build/libs:/cpiDir
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:7000/isHealthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 20

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    restart: "no"
    environment:
      - KAFKA_CLUSTERS_0_NAME=test-kafka-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_READONLY=false
