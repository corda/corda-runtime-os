/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.apis

import net.corda.restclient.models.RestGroupParameters
import net.corda.restclient.models.RestMemberInfoList

import net.corda.restclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class MemberLookupApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMembersGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/members/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method retrieves a list of all active and pending members in the membership group.
         * @param holdingidentityshorthash Holding identity ID of the requesting member. The result only contains members that are visible to this member 
         * @param cn Common Name (CN) attribute of the X.500 name to filter members by (optional)
         * @param o Organization (O) attribute of the X.500 name to filter members by (optional)
         * @param ou Organization Unit (OU) attribute of the X.500 name to filter members by (optional)
         * @param l Locality (L) attribute of the X.500 name to filter members by (optional)
         * @param st State (ST) attribute of the X.500 name to filter members by (optional)
         * @param c Country (C) attribute of the X.500 name to filter members by (optional)
         * @param statuses List of statuses (\&quot;ACTIVE\&quot;, \&quot;SUSPENDED\&quot;) to filter members by. By default, only ACTIVE members are filtered. An MGM can view all suspended members. A regular member cannot view other suspended members, but can view itself in any status (e.g. even if it&#39;s suspended). (optional)
         * @return RestMemberInfoList
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMembersHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, cn: kotlin.String?, o: kotlin.String?, ou: kotlin.String?, l: kotlin.String?, st: kotlin.String?, c: kotlin.String?, statuses: kotlin.collections.List<kotlin.String>?): HttpResponse<RestMemberInfoList> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            cn?.apply { localVariableQuery["cn"] = listOf("$cn") }
            o?.apply { localVariableQuery["o"] = listOf("$o") }
            ou?.apply { localVariableQuery["ou"] = listOf("$ou") }
            l?.apply { localVariableQuery["l"] = listOf("$l") }
            st?.apply { localVariableQuery["st"] = listOf("$st") }
            c?.apply { localVariableQuery["c"] = listOf("$c") }
            statuses?.apply { localVariableQuery["statuses"] = toMultiValue(this, "multi") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/members/{holdingidentityshorthash}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method retrieves the group parameters of the membership group.
         * @param holdingidentityshorthash Holding identity ID of the requesting member. The result contains group parameters visible to this member. 
         * @return RestGroupParameters
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMembersHoldingidentityshorthashGroupParameters(holdingidentityshorthash: kotlin.String): HttpResponse<RestGroupParameters> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/members/{holdingidentityshorthash}/group-parameters".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
