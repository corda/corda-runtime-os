/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class HSMApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getHsmGetprotocolversion() : kotlin.Int {
        val localVarResponse = getHsmGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getHsmGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getHsmGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getHsmGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getHsmGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/hsm/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method retrieves information on the HSM of the specified category assigned to the tenant.
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39;
     * @return net.corda.membership.rest.v1.types.response.HsmAssociationInfo
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getHsmTenantidCategory(tenantid: kotlin.String, category: kotlin.String) : net.corda.membership.rest.v1.types.response.HsmAssociationInfo {
        val localVarResponse = getHsmTenantidCategoryWithHttpInfo(tenantid = tenantid, category = category)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.membership.rest.v1.types.response.HsmAssociationInfo
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method retrieves information on the HSM of the specified category assigned to the tenant.
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39;
     * @return ApiResponse<net.corda.membership.rest.v1.types.response.HsmAssociationInfo?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getHsmTenantidCategoryWithHttpInfo(tenantid: kotlin.String, category: kotlin.String) : ApiResponse<net.corda.membership.rest.v1.types.response.HsmAssociationInfo?> {
        val localVariableConfig = getHsmTenantidCategoryRequestConfig(tenantid = tenantid, category = category)

        return request<Unit, net.corda.membership.rest.v1.types.response.HsmAssociationInfo>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getHsmTenantidCategory
     *
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39;
     * @return RequestConfig
     */
    fun getHsmTenantidCategoryRequestConfig(tenantid: kotlin.String, category: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/hsm/{tenantid}/{category}".replace("{"+"tenantid"+"}", encodeURIComponent(tenantid.toString())).replace("{"+"category"+"}", encodeURIComponent(category.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method enables you to assign a soft HSM to the tenant for the specified category.
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39;
     * @return net.corda.membership.rest.v1.types.response.HsmAssociationInfo
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postHsmSoftTenantidCategory(tenantid: kotlin.String, category: kotlin.String) : net.corda.membership.rest.v1.types.response.HsmAssociationInfo {
        val localVarResponse = postHsmSoftTenantidCategoryWithHttpInfo(tenantid = tenantid, category = category)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.membership.rest.v1.types.response.HsmAssociationInfo
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method enables you to assign a soft HSM to the tenant for the specified category.
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39;
     * @return ApiResponse<net.corda.membership.rest.v1.types.response.HsmAssociationInfo?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postHsmSoftTenantidCategoryWithHttpInfo(tenantid: kotlin.String, category: kotlin.String) : ApiResponse<net.corda.membership.rest.v1.types.response.HsmAssociationInfo?> {
        val localVariableConfig = postHsmSoftTenantidCategoryRequestConfig(tenantid = tenantid, category = category)

        return request<Unit, net.corda.membership.rest.v1.types.response.HsmAssociationInfo>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postHsmSoftTenantidCategory
     *
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39;
     * @return RequestConfig
     */
    fun postHsmSoftTenantidCategoryRequestConfig(tenantid: kotlin.String, category: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/hsm/soft/{tenantid}/{category}".replace("{"+"tenantid"+"}", encodeURIComponent(tenantid.toString())).replace("{"+"category"+"}", encodeURIComponent(category.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
