plugins {
    id 'distribution'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
    id 'corda.cli-plugin-packager'
}

ext {
    releasable = false
}

group 'net.corda.cli.deployment'

dependencies {
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib'
    compileOnly libs.pf4j
    compileOnly "net.corda.cli.host:api:$pluginHostVersion"
    kapt libs.pf4j
    kapt "info.picocli:picocli:$picocliVersion"

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation 'net.corda:corda-db-schema'
    implementation 'javax.persistence:javax.persistence-api'
    implementation "org.liquibase:liquibase-core:$liquibaseVersion"
    constraints {
        implementation(libs.slf4j.v2.api)
        implementation("org.yaml:snakeyaml:$snakeyamlVersion") {
            because "required until liquibase-core updates it's internal version of snakeYaml, currently using 1.33 which has CVE-2022-1471"
        }
    }

    // DO NOT DISTRIBUTE DRIVERS HERE WE ARE NOT LICENSED TO DISTRIBUTE
    // JDBC drivers are picked up in Corda 5 from a configured location, the CLI tool does not yet have this ability so
    // the Postgres drivers are packaged within the tool itself.
    runtimeOnly libs.postgresql.jdbc

    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib'
    testImplementation libs.bundles.test
    testImplementation libs.pf4j
    testCompileOnly "net.corda.cli.host:api:$pluginHostVersion"
}

cliPlugin {
    cliPluginClass = 'net.corda.cli.plugins.dbconfig.DatabaseBootstrapAndUpgrade'
    cliPluginDescription = 'Plugin for generating the initial database migrations.'
}

tasks.named("installDist") {
    dependsOn cliPlugin
    def homePath = System.properties['user.home']
    from cliPlugin
    into "$homePath/.corda/cli/plugins"
}