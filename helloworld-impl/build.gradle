import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'biz.aQute.bnd.builder'
}

apply from: "$rootDir/gradle/publish.gradle"

def bundleName = "hello-world-impl"
description 'Hello World Implementation'

configurations {
    testArtifacts
    testCompileOnly.extendsFrom compileOnly
    integrationTestApi.extendsFrom testApi
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
    api project(":helloworld")
    api "org.junit.jupiter:junit-jupiter-api:$junit5Version"

    testImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"

    testImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
//    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit5Version"

    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.metatype:$felixMetatypeVersion"
    testRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    testRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"

    // OSGi Logging Service, implemented by Felix and consumed by Logback.
    testRuntimeOnly "org.osgi:org.osgi.util.pushstream:$osgiUtilPushstreamVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felixConfigadminVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.log:$felixLogVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.logback:$felixLogbackVersion"
    testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"

    integrationTestImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"
    integrationTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

tasks.named('jar', Jar) {
    archiveBaseName = bundleName
    bnd """
Bundle-Name: Hello world impl
Bundle-SymbolicName: ${project.group}.${bundleName}
"""
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.integrationTest.output
    sourceSet = sourceSets.integrationTest

    bnd """\
Bundle-SymbolicName: \${task.archiveBaseName}-\${task.archiveClassifier}
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
"""
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(sourceSets.integrationTest.runtimeClasspath, configurations.archives.artifacts.files)
    bndrun = 'test.bndrun'
    //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
    System.setProperty("bnd.home.dir", "${System.getProperty("java.io.tmpdir")}/bnd/")
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve
    bundles = files(sourceSets.integrationTest.runtimeClasspath, configurations.archives.artifacts.files)
    bndrun = 'test.bndrun'
}

tasks.named('check') {
    dependsOn testOSGi
}

artifacts {
    archives testingBundle
    testArtifacts testingBundle
}

