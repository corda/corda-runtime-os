import aQute.bnd.gradle.Resolve

plugins {
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'biz.aQute.bnd.builder'
}

description "Installs extensions into the node's OSGi framework."

//TODO:  uncomment when cpk tests are added back
//configurations {
//    integrationTestRuntimeClasspath
//    systemClasspath
//}

dependencies {
    implementation platform("net.corda:corda-api:$cordaApiVersion")

    implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi"
    implementation "org.slf4j:slf4j-api"
    implementation "net.corda:corda-base"
    implementation "net.corda:corda-crypto"
    implementation "net.corda:corda-packaging"
    implementation "net.corda:corda-serialization"
    implementation project(":libs:crypto:crypto-impl")
    implementation project(":libs:crypto:crypto-internal")
    implementation project(":libs:utilities")

    compileOnly "org.osgi:osgi.annotation"
    compileOnly "org.osgi:osgi.core"
    compileOnly "org.osgi:org.osgi.service.component.annotations"
    compileOnly "org.osgi:org.osgi.service.cm:$osgiCmVersion"

    testImplementation project(":libs:crypto:crypto-testkit")
    testImplementation project(":libs:crypto:crypto-impl")

    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation("org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion") {
        exclude group: 'mockito-core'
    }
    testImplementation "org.apache.felix:org.apache.felix.configadmin:$felixConfigAdminVersion"
    testImplementation "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    // TODO:  uncomment if we re-enable tests that use cpks
//    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
//    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
//    integrationTestRuntimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.bundle:$ariesDynamicBundleVersion"
//    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
//    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
//    integrationTestRuntimeOnly "org.apache.activemq:artemis-server-osgi:$artemisVersion"
//    integrationTestRuntimeOnly "com.sun.mail:javax.mail:$javaxMailVersion"
//    integrationTestRuntimeOnly "javax.xml.bind:jaxb-api:$jaxbVersion"
//    integrationTestRuntimeOnly "com.sun.activation:javax.activation:$activationVersion"

//    systemClasspath "com.esotericsoftware:reflectasm:$reflectAsmVersion"
}

tasks.named('jar', Jar) {
    archiveBaseName = 'corda-install'
    bnd """\
Bundle-Name: Corda Install
Bundle-SymbolicName: \${project.group}.install
"""
}

// TODO:  uncomment this if/when we re-enable tests
// you'll probably have to copy over https://github.com/corda/corda5/blob/release/os/5.0/install/tests.bndrun
//
//def resolve = tasks.register('resolve', Resolve) {
//    dependsOn jar
//    bundles = files(sourceSets.integrationTest.runtimeClasspath, configurations.archives.artifacts.files, configurations.systemClasspath.files)
//    bndrun = file('tests.bndrun')
//    //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
//    System.setProperty("bnd.home.dir", "$rootDir/bnd")
//}
//
//tasks.named('integrationTest', Test) {
//    enabled = false
//}

//tasks.named('check') {
//    dependsOn resolve
//}
//
// TODO:  if this is re-enabled use the 'add these as resources' gradle from sandbox instead
//
//tasks.named("test", Test) { testTask ->
//    [
//            'contract': ':libs:install:testing:fungiblestate-sample:fungiblestate-contracts',
//            'workflow': ':libs:install:testing:fungiblestate-sample:fungiblestate-workflows'
////            'flows'   : ':libs:flows'
//    ].each { String key, String projectPath ->
//        Project project = project(projectPath)
//        Provider<AbstractArchiveTask> cpkTask = project.tasks.named('cpk', AbstractArchiveTask)
//        inputs.files(cpkTask)
//        testTask.systemProperties([
//                ("test.cpk." + key): cpkTask.get().outputs.files.singleFile,
//        ])
//    }
//}
