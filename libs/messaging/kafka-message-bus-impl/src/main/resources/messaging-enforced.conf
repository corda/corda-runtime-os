# Enforced Kafka properties. Settings in this file are effectively hardcoded, and attempts by the user to change these
# properties will be ignored. The blocks mirror the blocks under bus.properties when bus.type = KAFKA.

# Properties that should be enforced for all consumers and producers.
common {
}

# Properties that should be enforced for all consumers.
consumer = ${common} {
    # Consumer group ID. This requires the topic name and group name to be set at the top level before attempting to
    # resolve this file. The consumer group identifier for this consumer.
    group.id = ${topic}-${group}
    # Consumer client ID. This requires the topic name, group name and client ID counter to be set at the top level
    # before attempting to resolve this file. Primarily used for logging.
    client.id = ${topic}-${group}-consumer-${clientIdCounter}
    # This ensures a default where connection with no offset for a consumer group does not result in an exception.
    auto.offset.reset = earliest
    # Ensures that messages from uncommitted transactions are not visible. This is required to meet transactionality
    # requirements on patterns that need it.
    isolation.level = read_committed
    # Force consumers to commit their offsets manually. Again required for transactionality.
    enable.auto.commit = false
}

# Properties that should be enforced for all producers.
producer = ${common} {
    # Producer client ID. This requires the clientId to be set at the top level before attempting to resolve this file.
    # Primarily used for logging.
    client.id = ${clientId}-producer
    # Ensures that messages are sent to the broker exactly once. Note that some configuration settings must be set to
    # compatible values as a result of this. A ConfigException will be raised if these are set to incompatible values.
    enable.idempotence = true
    # Ensures that messages are not lost due to broker failure at inopportune moments. This forces acknowledgements from
    # all in-sync replicas before continuing, which ensures the message has reached at least one broker.
    acks = all
}

# Specific enforced properties for particular pattern implementations. If these conflict with those specified above,
# these take precedence. When building consumers and producers, the Kafka bus implementation will use these sections to
# force particular configuration properties.
subscription {
    pubsub {
        consumer = ${consumer} {
            # Pubsub consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
        }
        producer = ${producer}
    }
    compacted {
        consumer = ${consumer}
        producer = ${producer}
    }
    durable {
        consumer = ${consumer}
        producer = ${producer}
    }
    stateAndEvent {
        stateConsumer = ${consumer} {
            # Need to be able to distinguish between the state and event consumers for this pattern.
            client.id = ${topic}-${group}-stateConsumer-${clientIdCounter}
        }
        eventConsumer = ${consumer} {
            # Need to be able to distinguish between the state and event consumers for this pattern.
            client.id = ${topic}-${group}-eventConsumer-${clientIdCounter}
        }
        producer = ${producer}
    }
    eventLog {
        consumer = ${consumer}
        producer = ${producer}
    }
    rpcSender {
        consumer = ${consumer} {
            # RPC pattern consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset=latest
        }
        producer = ${producer}
    }
    rpcResponder {
        consumer = ${consumer} {
            # RPC pattern consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
        }
        producer = ${producer}
    }
}

