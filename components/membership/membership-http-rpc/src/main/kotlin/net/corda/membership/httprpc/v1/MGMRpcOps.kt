package net.corda.membership.httprpc.v1

import net.corda.httprpc.RpcOps
import net.corda.httprpc.annotations.HttpRpcDELETE
import net.corda.httprpc.annotations.HttpRpcGET
import net.corda.httprpc.annotations.HttpRpcPUT
import net.corda.httprpc.annotations.HttpRpcPOST
import net.corda.httprpc.annotations.HttpRpcPathParameter
import net.corda.httprpc.annotations.HttpRpcRequestBodyParameter
import net.corda.httprpc.annotations.HttpRpcResource

/**
 * The MGM API consists of a number of endpoints used to manage membership groups. A membership group is a logical
 * grouping of a number of Corda Identities to communicate and transact with one another with a specific set of CorDapps.
 * The API allows you to generate the group policy for a membership group, required for new members to join the group.
 */
@HttpRpcResource(
    name = "MGM API",
    description = "The MGM API consists of a number of endpoints used to manage membership groups. A membership group" +
            " is a logical grouping of a number of Corda Identities to communicate and transact with one another with" +
            " a specific set of CorDapps. The API allows you to generate the group policy for a membership group," +
            " required for new members to join the group.",
    path = "mgm"
)
interface MGMRpcOps : RpcOps {
    /**
     * The [generateGroupPolicy] method enables you to retrieve the group policy from the MGM represented by
     * [holdingIdentityShortHash], required for new members to join the membership group.
     *
     * Example usage:
     * ```
     * mgmOps.generateGroupPolicy(holdingIdentityShortHash = "58B6030FABDD")
     * ```
     *
     * @param holdingIdentityShortHash The holding identity ID of the MGM of the membership group to be joined.
     *
     * @return The group policy generated by the MGM in JSON [String] format.
     */
    @HttpRpcGET(
        path = "{holdingIdentityShortHash}/info",
        description = "This method retrieves the group policy from the MGM required to join the membership group.",
        responseDescription = "The group policy from the MGM required to join the membership group as a string " +
                "in JSON format"
    )
    fun generateGroupPolicy(
        @HttpRpcPathParameter(description = "The holding identity ID of the MGM of the membership group to be joined")
        holdingIdentityShortHash: String
    ): String

    /**
     * Adds client certificate subject to the mutual TLS allowed client certificates.
     *
     * @param holdingIdentityShortHash The holding identity ID of the MGM.
     * @param subject The certificate subject.
     */
    @HttpRpcPUT(
        path = "{holdingIdentityShortHash}/mutual-tls/allowed-client-certificate-subjects/{subject}",
        description = "This method allows a client certificate with a " +
            "given subject to be used in mutual TLS connections.",
    )
    fun mutualTlsAllowClientCertificate(
        @HttpRpcPathParameter(description = "The holding identity ID of the MGM.")
        holdingIdentityShortHash: String,
        @HttpRpcPathParameter(description = "The certificate subject.")
        subject: String,
    )

    /**
     * Remove client certificate subject from the mutual TLS group allowed client certificates.
     *
     * @param holdingIdentityShortHash The holding identity ID of the MGM.
     * @param subject The certificate subject.
     */
    @HttpRpcDELETE(
        path = "{holdingIdentityShortHash}/mutual-tls/allowed-client-certificate-subjects/{subject}",
        description = "This method disallows a client certificate with a " +
                "given subject to be used in mutual TLS connections.",
    )
    fun mutualTlsDisallowClientCertificate(
        @HttpRpcPathParameter(description = "The holding identity ID of the MGM.")
        holdingIdentityShortHash: String,
        @HttpRpcPathParameter(description = "The certificate subject.")
        subject: String,
    )

    /**
     * List the allowed client certificate subjects for mutual TLS.
     *
     * @param holdingIdentityShortHash The holding identity ID of the MGM.
     * @return List of the allowed client certificate subjects.
     */
    @HttpRpcGET(
        path = "{holdingIdentityShortHash}/mutual-tls/allowed-client-certificate-subjects",
        description = "This method list the allowed  client certificates subjects " +
                "to be used in mutual TLS connections.",
        responseDescription = "List of the allowed client certificate subjects",
    )
    fun mutualTlsListClientCertificate(
        @HttpRpcPathParameter(description = "The holding identity ID of the MGM.")
        holdingIdentityShortHash: String,
    ): Collection<String>

    /**
     * The [addGroupApprovalRule] method enables you to add a regular expression rule to configure the approval
     * method for registration (or re-registration) requests. Requests are evaluated against the rules added
     * using this method to determine whether they will be automatically or manually approved. If the [MemberInfo]
     * proposed in the request contains any new or changed keys that match one or more of the approval rules, the
     * request will require manual approval.
     *
     * Example usage:
     * ```
     * mgmOps.addGroupApprovalRule("58B6030FABDD", "corda.roles.*", "roles rule")
     * ```
     *
     * @param holdingIdentityShortHash The holding identity ID of the MGM of the membership group.
     * @param rule The regular expression associated with the rule to be added.
     * @param label Optional. A label describing the rule to be added.
     *
     * @return The ID of the newly added rule.
     */
    @HttpRpcPOST(
        path = "{holdingIdentityShortHash}/approval/rules",
        description = "This method adds a rule to the set of group approval rules.",
        responseDescription = "The ID of the newly added rule"
    )
    fun addGroupApprovalRule(
        @HttpRpcPathParameter(description = "The holding identity ID of the MGM of the membership group")
        holdingIdentityShortHash: String,
        @HttpRpcRequestBodyParameter(description = "The regular expression associated with the rule to be added")
        rule: String,
        @HttpRpcRequestBodyParameter(description = "A label describing the rule to be added")
        label: String? = null
    ): String?

    /**
     * The [getGroupApprovalRules] method enables you to retrieve the set of approval rules the group is currently
     * configured with. Registration (or re-registration) requests are evaluated against these rules to determine
     * whether they will be automatically or manually approved. If the [MemberInfo] proposed in a request contains any
     * new or changed keys that match one or more of the approval rules in this collection, the request will require
     * manual approval.
     *
     * Example usage:
     * ```
     * mgmOps.getGroupApprovalRules(holdingIdentityShortHash = "58B6030FABDD")
     * ```
     *
     * @param holdingIdentityShortHash The holding identity ID of the MGM of the membership group.
     *
     * @return Group approval rules as a collection of regular expressions.
     */
    @HttpRpcGET(
        path = "{holdingIdentityShortHash}/approval/rules",
        description = "This method retrieves the set of rules the group is currently configured with",
        responseDescription = "Group approval rules as a collection of regular expressions"
    )
    fun getGroupApprovalRules(
        @HttpRpcPathParameter(description = "The holding identity ID of the MGM of the membership group")
        holdingIdentityShortHash: String
    ): Collection<String>

    /**
     * The [deleteGroupApprovalRule] method allows you to delete a group approval rule that was added through the
     * [addGroupApprovalRule] method.
     *
     * Example usage:
     * ```
     * mgmOps.deleteGroupApprovalRule(holdingIdentityShortHash = "58B6030FABDD", ruleId = "b305129b-8c92-4092-b3a2-e6d452ce2b01")
     * ```
     *
     * @param holdingIdentityShortHash The holding identity ID of the MGM of the membership group.
     * @param ruleId ID of the group approval rule to be deleted.
     */
    @HttpRpcPUT(
        path = "{holdingIdentityShortHash}/approval/rules/delete/{ruleId}",
        description = "This method deletes a previously added group approval rule."
    )
    fun deleteGroupApprovalRule(
        @HttpRpcPathParameter(description = "The holding identity ID of the MGM of the membership group")
        holdingIdentityShortHash: String,
        @HttpRpcPathParameter(description = "The ID of the group approval rule to be deleted")
        ruleId: String
    )
}