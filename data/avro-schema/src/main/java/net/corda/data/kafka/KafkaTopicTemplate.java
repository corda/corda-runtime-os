/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.data.kafka;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class KafkaTopicTemplate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6540162388514063960L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KafkaTopicTemplate\",\"namespace\":\"net.corda.data.kafka\",\"fields\":[{\"name\":\"topicName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"numPartitions\",\"type\":\"int\"},{\"name\":\"replicationFactor\",\"type\":\"int\"},{\"name\":\"config\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\",\"default\":{}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KafkaTopicTemplate> ENCODER =
      new BinaryMessageEncoder<KafkaTopicTemplate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KafkaTopicTemplate> DECODER =
      new BinaryMessageDecoder<KafkaTopicTemplate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KafkaTopicTemplate> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KafkaTopicTemplate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KafkaTopicTemplate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<KafkaTopicTemplate>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KafkaTopicTemplate to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KafkaTopicTemplate from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KafkaTopicTemplate instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KafkaTopicTemplate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String topicName;
   private int numPartitions;
   private int replicationFactor;
   private java.util.Map<java.lang.String,java.lang.String> config;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KafkaTopicTemplate() {}

  /**
   * All-args constructor.
   * @param topicName The new value for topicName
   * @param numPartitions The new value for numPartitions
   * @param replicationFactor The new value for replicationFactor
   * @param config The new value for config
   */
  public KafkaTopicTemplate(java.lang.String topicName, java.lang.Integer numPartitions, java.lang.Integer replicationFactor, java.util.Map<java.lang.String,java.lang.String> config) {
    this.topicName = topicName;
    this.numPartitions = numPartitions;
    this.replicationFactor = replicationFactor;
    this.config = config;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return topicName;
    case 1: return numPartitions;
    case 2: return replicationFactor;
    case 3: return config;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: topicName = value$ != null ? value$.toString() : null; break;
    case 1: numPartitions = (java.lang.Integer)value$; break;
    case 2: replicationFactor = (java.lang.Integer)value$; break;
    case 3: config = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'topicName' field.
   * @return The value of the 'topicName' field.
   */
  public java.lang.String getTopicName() {
    return topicName;
  }


  /**
   * Sets the value of the 'topicName' field.
   * @param value the value to set.
   */
  public void setTopicName(java.lang.String value) {
    this.topicName = value;
  }

  /**
   * Gets the value of the 'numPartitions' field.
   * @return The value of the 'numPartitions' field.
   */
  public int getNumPartitions() {
    return numPartitions;
  }


  /**
   * Sets the value of the 'numPartitions' field.
   * @param value the value to set.
   */
  public void setNumPartitions(int value) {
    this.numPartitions = value;
  }

  /**
   * Gets the value of the 'replicationFactor' field.
   * @return The value of the 'replicationFactor' field.
   */
  public int getReplicationFactor() {
    return replicationFactor;
  }


  /**
   * Sets the value of the 'replicationFactor' field.
   * @param value the value to set.
   */
  public void setReplicationFactor(int value) {
    this.replicationFactor = value;
  }

  /**
   * Gets the value of the 'config' field.
   * @return The value of the 'config' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getConfig() {
    return config;
  }


  /**
   * Sets the value of the 'config' field.
   * @param value the value to set.
   */
  public void setConfig(java.util.Map<java.lang.String,java.lang.String> value) {
    this.config = value;
  }

  /**
   * Creates a new KafkaTopicTemplate RecordBuilder.
   * @return A new KafkaTopicTemplate RecordBuilder
   */
  public static net.corda.data.kafka.KafkaTopicTemplate.Builder newBuilder() {
    return new net.corda.data.kafka.KafkaTopicTemplate.Builder();
  }

  /**
   * Creates a new KafkaTopicTemplate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KafkaTopicTemplate RecordBuilder
   */
  public static net.corda.data.kafka.KafkaTopicTemplate.Builder newBuilder(net.corda.data.kafka.KafkaTopicTemplate.Builder other) {
    if (other == null) {
      return new net.corda.data.kafka.KafkaTopicTemplate.Builder();
    } else {
      return new net.corda.data.kafka.KafkaTopicTemplate.Builder(other);
    }
  }

  /**
   * Creates a new KafkaTopicTemplate RecordBuilder by copying an existing KafkaTopicTemplate instance.
   * @param other The existing instance to copy.
   * @return A new KafkaTopicTemplate RecordBuilder
   */
  public static net.corda.data.kafka.KafkaTopicTemplate.Builder newBuilder(net.corda.data.kafka.KafkaTopicTemplate other) {
    if (other == null) {
      return new net.corda.data.kafka.KafkaTopicTemplate.Builder();
    } else {
      return new net.corda.data.kafka.KafkaTopicTemplate.Builder(other);
    }
  }

  /**
   * RecordBuilder for KafkaTopicTemplate instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KafkaTopicTemplate>
    implements org.apache.avro.data.RecordBuilder<KafkaTopicTemplate> {

    private java.lang.String topicName;
    private int numPartitions;
    private int replicationFactor;
    private java.util.Map<java.lang.String,java.lang.String> config;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.data.kafka.KafkaTopicTemplate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.topicName)) {
        this.topicName = data().deepCopy(fields()[0].schema(), other.topicName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.numPartitions)) {
        this.numPartitions = data().deepCopy(fields()[1].schema(), other.numPartitions);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.replicationFactor)) {
        this.replicationFactor = data().deepCopy(fields()[2].schema(), other.replicationFactor);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.config)) {
        this.config = data().deepCopy(fields()[3].schema(), other.config);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing KafkaTopicTemplate instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.data.kafka.KafkaTopicTemplate other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.topicName)) {
        this.topicName = data().deepCopy(fields()[0].schema(), other.topicName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numPartitions)) {
        this.numPartitions = data().deepCopy(fields()[1].schema(), other.numPartitions);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.replicationFactor)) {
        this.replicationFactor = data().deepCopy(fields()[2].schema(), other.replicationFactor);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.config)) {
        this.config = data().deepCopy(fields()[3].schema(), other.config);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'topicName' field.
      * @return The value.
      */
    public java.lang.String getTopicName() {
      return topicName;
    }


    /**
      * Sets the value of the 'topicName' field.
      * @param value The value of 'topicName'.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder setTopicName(java.lang.String value) {
      validate(fields()[0], value);
      this.topicName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'topicName' field has been set.
      * @return True if the 'topicName' field has been set, false otherwise.
      */
    public boolean hasTopicName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'topicName' field.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder clearTopicName() {
      topicName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'numPartitions' field.
      * @return The value.
      */
    public int getNumPartitions() {
      return numPartitions;
    }


    /**
      * Sets the value of the 'numPartitions' field.
      * @param value The value of 'numPartitions'.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder setNumPartitions(int value) {
      validate(fields()[1], value);
      this.numPartitions = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'numPartitions' field has been set.
      * @return True if the 'numPartitions' field has been set, false otherwise.
      */
    public boolean hasNumPartitions() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'numPartitions' field.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder clearNumPartitions() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'replicationFactor' field.
      * @return The value.
      */
    public int getReplicationFactor() {
      return replicationFactor;
    }


    /**
      * Sets the value of the 'replicationFactor' field.
      * @param value The value of 'replicationFactor'.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder setReplicationFactor(int value) {
      validate(fields()[2], value);
      this.replicationFactor = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'replicationFactor' field has been set.
      * @return True if the 'replicationFactor' field has been set, false otherwise.
      */
    public boolean hasReplicationFactor() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'replicationFactor' field.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder clearReplicationFactor() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'config' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getConfig() {
      return config;
    }


    /**
      * Sets the value of the 'config' field.
      * @param value The value of 'config'.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder setConfig(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.config = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'config' field has been set.
      * @return True if the 'config' field has been set, false otherwise.
      */
    public boolean hasConfig() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'config' field.
      * @return This builder.
      */
    public net.corda.data.kafka.KafkaTopicTemplate.Builder clearConfig() {
      config = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KafkaTopicTemplate build() {
      try {
        KafkaTopicTemplate record = new KafkaTopicTemplate();
        record.topicName = fieldSetFlags()[0] ? this.topicName : (java.lang.String) defaultValue(fields()[0]);
        record.numPartitions = fieldSetFlags()[1] ? this.numPartitions : (java.lang.Integer) defaultValue(fields()[1]);
        record.replicationFactor = fieldSetFlags()[2] ? this.replicationFactor : (java.lang.Integer) defaultValue(fields()[2]);
        record.config = fieldSetFlags()[3] ? this.config : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KafkaTopicTemplate>
    WRITER$ = (org.apache.avro.io.DatumWriter<KafkaTopicTemplate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KafkaTopicTemplate>
    READER$ = (org.apache.avro.io.DatumReader<KafkaTopicTemplate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.topicName);

    out.writeInt(this.numPartitions);

    out.writeInt(this.replicationFactor);

    long size0 = this.config.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.config.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.String v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.topicName = in.readString();

      this.numPartitions = in.readInt();

      this.replicationFactor = in.readInt();

      long size0 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m0 = this.config; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
        this.config = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String k0 = null;
          k0 = in.readString();
          java.lang.String v0 = null;
          v0 = in.readString();
          m0.put(k0, v0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.topicName = in.readString();
          break;

        case 1:
          this.numPartitions = in.readInt();
          break;

        case 2:
          this.replicationFactor = in.readInt();
          break;

        case 3:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m0 = this.config; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
            this.config = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String k0 = null;
              k0 = in.readString();
              java.lang.String v0 = null;
              v0 = in.readString();
              m0.put(k0, v0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










