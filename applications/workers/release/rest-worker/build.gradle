plugins {
    id 'corda.common-publishing'
    id 'corda.common-app'
    id 'corda.docker-app'
}

description 'REST Worker'

ext.cordaEnableFormatting = true

sourceSets {
    e2eTest {
        kotlin {
            srcDirs = [ 'src/e2eTest/kotlin' ]
        }
        java {
            srcDirs = [ 'src/e2eTest/java' ]
        }
        resources {
            srcDirs = [ 'src/e2eTest/resources' ]
        }
    }
}

configurations {
    e2eTestApi.extendsFrom integrationTestApi
    e2eTestCompileOnly.extendsFrom integrationTestCompileOnly
    e2eTestImplementation.extendsFrom integrationTestImplementation
    e2eTestRuntimeOnly.extendsFrom integrationTestRuntimeOnly
}

dependencies {
    compileOnly 'org.osgi:org.osgi.service.component.annotations'

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation project(':applications:workers:worker-common')
    implementation project(':libs:configuration:configuration-core')
    implementation project(":libs:lifecycle:registry")
    implementation project(':libs:platform-info')
    implementation project(':libs:tracing')
    implementation project(':libs:configuration:configuration-validation')
    implementation project(':libs:web:web')
    implementation project(':processors:rest-processor')
    implementation 'org.jetbrains.kotlin:kotlin-osgi-bundle'
    implementation "info.picocli:picocli:$picocliVersion"
    implementation 'net.corda:corda-base'
    implementation 'net.corda:corda-config-schema'

    runtimeOnly "com.typesafe:config:$typeSafeConfigVersion"
    runtimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.framework.extension:$ariesDynamicFrameworkExtensionVersion"
    runtimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    runtimeOnly "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"
    runtimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    runtimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"

    runtimeOnly project(':libs:messaging:kafka-message-bus-impl')
    runtimeOnly project(":libs:messaging:messaging-impl")
    runtimeOnly project(':libs:tracing-impl')

    e2eTestImplementation project(':libs:configuration:configuration-endpoints')
    e2eTestImplementation project(':libs:chunking:chunking-core')
    e2eTestImplementation project(':libs:crypto:certificate-generation')
    e2eTestImplementation project(':libs:crypto:cipher-suite')
    e2eTestImplementation project(':libs:crypto:cipher-suite-impl')
    e2eTestImplementation project(':libs:rest:rest-client')
    e2eTestImplementation project(':libs:permissions:permission-endpoint')
    e2eTestImplementation project(':libs:permissions:permission-common')
    e2eTestImplementation project(':testing:test-utilities')
    e2eTestImplementation project(':libs:messaging:kafka-message-bus-impl')
    e2eTestImplementation project(':libs:messaging:messaging-impl')
    e2eTestImplementation project(":libs:schema-registry:schema-registry-impl")
    e2eTestImplementation project(":libs:lifecycle:lifecycle-impl")
    e2eTestImplementation project(':libs:schema-registry:schema-registry')
    e2eTestImplementation project(':libs:lifecycle:registry')
    e2eTestImplementation project(':libs:messaging:message-bus')
    e2eTestImplementation project(':libs:messaging:messaging')
    e2eTestImplementation project(':libs:virtual-node:cpi-upload-endpoints')
    e2eTestImplementation project(':libs:virtual-node:virtual-node-endpoints')
    e2eTestImplementation project(':libs:lifecycle:lifecycle')
    e2eTestImplementation project(':components:membership:membership-rest')
    e2eTestImplementation project(':testing:packaging-test-utilities')
    e2eTestImplementation project(':tools:plugins:package')
    e2eTestImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    e2eTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    e2eTestImplementation "net.corda:corda-avro-schema"
    e2eTestImplementation "net.corda:corda-topic-schema"
    e2eTestRuntimeOnly 'org.osgi:osgi.core'

    // This puts the jdbc driver into the docker image in the /opt/jdbc-driver folder
    // this folder can contain many jdbc drivers (and DataSourceFactory provider bundles).
    // Postgres doesn't need a DataSourceFactory provider bundle (e.g. pax-jdbc), because
    // the postgres devs have written their own and it's in this jar (PGDataSourceFactory).
    dockerImageJdbc "org.postgresql:postgresql:$postgresDriverVersion"

}

tasks.register('e2eTest', Test) {
    description = "Runs E2E tests."
    group = "verification"

    testClassesDirs = project.sourceSets["e2eTest"].output.classesDirs
    classpath = project.sourceSets["e2eTest"].runtimeClasspath
}

tasks.named('e2eTest') {

    def pluginsProject = project.rootProject.project('tools').project('plugins')
    // Needs to build CLI tool along with plugins to be usable from within E2E tests
    dependsOn pluginsProject.tasks.named('copyCliFiles')

    // Set CLI_BUILD_DIR to be accessible from E2E tests
    if(System.getenv("CLI_BUILD_DIR") == null) {
        environment "CLI_BUILD_DIR", pluginsProject.layout.buildDirectory.get().asFile.absolutePath
    }

    if(System.getenv("JDK_HOSTS_FILE") != null) {
        jvmArgs "-Djdk.net.hosts.file=${System.getenv("JDK_HOSTS_FILE")}"
    }
    if(System.getenv("JAVA_SECURITY_AUTH_LOGIN_CONFIG") != null) {
        jvmArgs "-Djava.security.auth.login.config=${System.getenv("JAVA_SECURITY_AUTH_LOGIN_CONFIG")}"
    }

    ["A", "B", "C"].each {cluster ->
        if(System.getenv("E2E_CLUSTER_${cluster}_REST_HOST") == null) {
            environment "E2E_CLUSTER_${cluster}_REST_HOST",
                    project.getProperties().getOrDefault("e2eCluster${cluster}RestHost","localhost")
        }
        if(System.getenv("E2E_CLUSTER_${cluster}_REST_PORT") == null) {
            environment "E2E_CLUSTER_${cluster}_REST_PORT",
                    project.getProperties().getOrDefault("e2eCluster${cluster}RestPort","8888")
        }
        if(System.getenv("E2E_CLUSTER_${cluster}_P2P_HOST") == null) {
            environment "E2E_CLUSTER_${cluster}_P2P_HOST",
                    project.getProperties().getOrDefault("e2eCluster${cluster}P2pHost","localhost")
        }
        if(System.getenv("E2E_CLUSTER_${cluster}_P2P_PORT") == null) {
            environment "E2E_CLUSTER_${cluster}_P2P_PORT",
                    project.getProperties().getOrDefault("e2eCluster${cluster}P2pPort","8080")
        }
    }
}