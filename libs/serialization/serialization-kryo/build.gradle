import aQute.bnd.gradle.Bundle

plugins {
    id 'corda.common-library'
    id 'corda.osgi-test-conventions'
    id 'com.r3.internal.gradle.plugins.r3Publish'
}

description 'Corda Kryo Serialization Library'

configurations {
    cpbs {
        canBeConsumed = false
        transitive = false
    }
}

dependencies {
    compileOnly 'org.osgi:osgi.annotation'
    compileOnly 'org.osgi:osgi.core'
    compileOnly 'org.osgi:org.osgi.service.component.annotations'
    compileOnly "biz.aQute.bnd:biz.aQute.bnd.annotation:$bndVersion"

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation "net.corda:corda-application"
    implementation "net.corda:corda-base"
    implementation "net.corda:corda-packaging"
    implementation "net.corda:corda-serialization"

    implementation "co.paralleluniverse:quasar-core-osgi:$quasarVersion"
    implementation "com.esotericsoftware:kryo:$kryoVersion"
    implementation project(path: ':libs:serialization:kryo-serializers', configuration: 'bundle')
    implementation 'net.corda.kotlin:kotlin-stdlib-jdk8-osgi'
    implementation "org.slf4j:slf4j-api"
    
    implementation project(":libs:sandbox")
    implementation project(":libs:serialization:serialization-checkpoint-api")
    implementation project(path: ':libs:serialization:serialization-encoding', configuration: 'bundle')
    implementation project(":libs:utilities")
    runtimeOnly project(':libs:crypto:crypto-impl')

    cpbs project(path: 'cpks:serializable-cpk-one', configuration: 'cordaCPB')
    cpbs project(path: 'cpks:serializable-cpk-two', configuration: 'cordaCPB')

    testCompileOnly 'org.osgi:osgi.core'
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testRuntimeOnly "co.paralleluniverse:quasar-core-osgi:$quasarVersion:agent"

    integrationTestImplementation project(':testing:sandboxes')
    integrationTestImplementation project('cpks:serializable-cpk-one')
    integrationTestImplementation "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    integrationTestRuntimeOnly "co.paralleluniverse:quasar-core-osgi:$quasarVersion:agent"

    integrationTestRuntimeOnly project(':libs:crypto:crypto-core')
    integrationTestRuntimeOnly project(':libs:crypto:crypto-impl')
    integrationTestRuntimeOnly project(':libs:lifecycle:lifecycle-impl')
    integrationTestRuntimeOnly project(':libs:messaging:db-message-bus-impl')
    integrationTestRuntimeOnly project(':libs:messaging:messaging-impl')
}

def integrationTestResources = tasks.named('processIntegrationTestResources', ProcessResources) {
    from configurations.cpbs
}

tasks.named('testingBundle', Bundle) {
    dependsOn integrationTestResources
}
