{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Corda HTTP RPC API",
    "description" : "All the endpoints for publicly visible Open API calls",
    "version" : "1"
  },
  "servers" : [ {
    "url" : "/api/v1"
  } ],
  "security" : [ {
    "basicAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "CPI API",
    "description" : "The CPI API consists of a number of endpoints used to manage Corda Package Installer (CPI) files in the Corda cluster."
  }, {
    "name" : "Certificates API",
    "description" : "Certificates management endpoints."
  }, {
    "name" : "Configuration API",
    "description" : "The Configuration API consists of a number of endpoints used to manage the configuration of Corda clusters."
  }, {
    "name" : "Flow Info API",
    "description" : "The Flow Info API consists of a number of endpoints used to find out which flows can be invoked using the Flow Management API for a given identity."
  }, {
    "name" : "Flow Management API",
    "description" : "Flow management endpoints."
  }, {
    "name" : "HSM API",
    "description" : "Hardware Security Modules interaction endpoints."
  }, {
    "name" : "Hello RPC API",
    "description" : "The endpoint used to test interactions via HTTP RPC API. It verifies that a call to HTTP-RPC can be made, and that the identity of the user making the call can be recognized.RBAC permissions are checked and the call is successfully processed by the HTTP-RPC worker."
  }, {
    "name" : "Keys Management API",
    "description" : "Endpoints for public/private keys management."
  }, {
    "name" : "MGM API",
    "description" : "Membership Group Management endpoints."
  }, {
    "name" : "Member Lookup API",
    "description" : "Network Membership Lookup endpoints."
  }, {
    "name" : "Member Registration API",
    "description" : "Membership Registration endpoints."
  }, {
    "name" : "Network API",
    "description" : "Network Management endpoints."
  }, {
    "name" : "RBAC Permission API",
    "description" : "The RBAC Permission API consists of a number of endpoints enabling permissions management in the RBAC (role-based access control) permission system. You can get details of specified permissions and create new permissions."
  }, {
    "name" : "RBAC Role API",
    "description" : "The RBAC Role API consists of a number of endpoints enabling role management in the RBAC (role-based access control) permission system. You can get all roles in the system, create new roles and add and delete permissions from roles."
  }, {
    "name" : "RBAC User API",
    "description" : "The RBAC User API consists of a number of endpoints enabling user management in the RBAC (role-based access control) permission system. You can get details of specified users, create new users, assign roles to users and remove roles from users."
  }, {
    "name" : "Virtual Node API",
    "description" : "The Virtual Nodes API consists of a number of endpoints to manage virtual nodes."
  }, {
    "name" : "Virtual Node Maintenance API",
    "description" : "The Virtual Node Maintenance API consists of a series of endpoints used for virtual node management.Warning: Using these endpoints could be highly disruptive, so great care should be taken when using them."
  } ],
  "paths" : {
    "/certificates/getprotocolversion" : {
      "get" : {
        "tags" : [ "Certificates API" ],
        "description" : "",
        "operationId" : "get_certificates_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/certificates/{tenantid}" : {
      "put" : {
        "tags" : [ "Certificates API" ],
        "description" : "Import certificate.",
        "operationId" : "put_certificates__tenantid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "alias" : {
                    "type" : "string",
                    "description" : "The certificate alias.",
                    "nullable" : false,
                    "example" : "string"
                  },
                  "certificate" : {
                    "uniqueItems" : false,
                    "type" : "array",
                    "nullable" : false,
                    "items" : {
                      "type" : "string",
                      "description" : "A file to upload.",
                      "format" : "binary",
                      "example" : "No example available for this type"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/certificates/{tenantid}/{keyid}" : {
      "post" : {
        "tags" : [ "Certificates API" ],
        "description" : "Generate certificate signing request (CSR).",
        "operationId" : "post_certificates__tenantid___keyid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "The Key ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The Key ID.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateCsrWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config" : {
      "put" : {
        "tags" : [ "Configuration API" ],
        "description" : "This method updates a section of the cluster configuration.",
        "operationId" : "put_config",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateConfigParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated cluster configuration for the specified section.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config/getprotocolversion" : {
      "get" : {
        "tags" : [ "Configuration API" ],
        "description" : "",
        "operationId" : "get_config_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config/{section}" : {
      "get" : {
        "tags" : [ "Configuration API" ],
        "description" : "This method returns the 'active' configuration for the given section, in both the 'raw' format and with defaults applied.",
        "operationId" : "get_config__section_",
        "parameters" : [ {
          "name" : "section",
          "in" : "path",
          "description" : "Section name for the configuration.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Section name for the configuration.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration for the given section.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi" : {
      "get" : {
        "tags" : [ "CPI API" ],
        "description" : "The GET method returns a list of all CPIs uploaded to the cluster.",
        "operationId" : "get_cpi",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Details of all of the CPIs uploaded to the cluster.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCPIsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "CPI API" ],
        "description" : "The upload endpoint uses the POST method to upload a Corda Package Installer (CPI) file to the Corda cluster.",
        "operationId" : "post_cpi",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "upload" : {
                    "type" : "string",
                    "description" : "The CPI file to be uploaded.",
                    "format" : "binary",
                    "nullable" : false,
                    "example" : "No example available for this type"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The Id for the CPI upload request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpiUploadResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi/getprotocolversion" : {
      "get" : {
        "tags" : [ "CPI API" ],
        "description" : "",
        "operationId" : "get_cpi_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi/status/{id}" : {
      "get" : {
        "tags" : [ "CPI API" ],
        "description" : "The status endpoint uses the GET method to return status information for the CPI upload with the given request ID.",
        "operationId" : "get_cpi_status__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID returned from the CPI upload request.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The ID returned from the CPI upload request.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpiUploadStatus"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/getprotocolversion" : {
      "get" : {
        "tags" : [ "Flow Management API" ],
        "description" : "",
        "operationId" : "get_flow_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Flow Management API" ],
        "description" : "Get status of all flows for a holding identity. Returns an empty list if there are no flows running.",
        "operationId" : "get_flow__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of the flow.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponses"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "Flow Management API" ],
        "description" : "Instructs Corda to start a new instance of the specified flow",
        "operationId" : "post_flow__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StartFlowParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The initial status of the flow, if the flow already exists the status of the existing flow will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/{holdingidentityshorthash}/{clientrequestid}" : {
      "get" : {
        "tags" : [ "Flow Management API" ],
        "description" : "Gets the current status for a given flow.",
        "operationId" : "get_flow__holdingidentityshorthash___clientrequestid_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "clientrequestid",
          "in" : "path",
          "description" : "Client provided flow identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Client provided flow identifier",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of the flow.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flowclass/getprotocolversion" : {
      "get" : {
        "tags" : [ "Flow Info API" ],
        "description" : "",
        "operationId" : "get_flowclass_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flowclass/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Flow Info API" ],
        "description" : "This method gets all flows that can be used by the specified holding identity.",
        "operationId" : "get_flowclass__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity. Obtained during node registration.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity. Obtained during node registration.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The class names of all flows that can be run",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StartableFlowsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hello" : {
      "post" : {
        "tags" : [ "Hello RPC API" ],
        "description" : "Produces a greeting phrase for the addressee.",
        "operationId" : "post_hello",
        "parameters" : [ {
          "name" : "addressee",
          "in" : "query",
          "description" : "An arbitrary name can be used for the greeting.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "An arbitrary name can be used for the greeting.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hello/getprotocolversion" : {
      "get" : {
        "tags" : [ "Hello RPC API" ],
        "description" : "",
        "operationId" : "get_hello_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/getprotocolversion" : {
      "get" : {
        "tags" : [ "HSM API" ],
        "description" : "",
        "operationId" : "get_hsm_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/soft/{tenantid}/{category}" : {
      "post" : {
        "tags" : [ "HSM API" ],
        "description" : "Assign soft HSM",
        "operationId" : "post_hsm_soft__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api' or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api' or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HsmAssociationInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/{tenantid}/{category}" : {
      "get" : {
        "tags" : [ "HSM API" ],
        "description" : "Get list of assigned HSMs.",
        "operationId" : "get_hsm__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api' or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api' or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "nullable" : true,
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/HsmAssociationInfo"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "HSM API" ],
        "description" : "Assign HSM.",
        "operationId" : "post_hsm__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api' or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api' or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HsmAssociationInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/getprotocolversion" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "",
        "operationId" : "get_keys_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "Get list of keys for members.",
        "operationId" : "get_keys__tenantid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "skip",
          "in" : "query",
          "description" : "Index of the first key",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Index of the first key",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }, {
          "name" : "take",
          "in" : "query",
          "description" : "Page size",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Page size",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "How to order the results (one of: none, timestamp, category, scheme_code_name, alias, master_key_alias, external_id, id, timestamp_desc, category_desc, scheme_code_name_desc, alias_desc, master_key_alias_desc, external_id_desc or id_desc)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "How to order the results (one of: none, timestamp, category, scheme_code_name, alias, master_key_alias, external_id, id, timestamp_desc, category_desc, scheme_code_name_desc, alias_desc, master_key_alias_desc, external_id_desc or id_desc)",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "The key category",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key category",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "schemecodename",
          "in" : "query",
          "description" : "The key schema code name",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key schema code name",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "alias",
          "in" : "query",
          "description" : "The key alias",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key alias",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "masterkeyalias",
          "in" : "query",
          "description" : "The key master key alias",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key master key alias",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "createdafter",
          "in" : "query",
          "description" : "Only keys that had been created after (for example: 2007-12-03T10:15:30.00Z)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Only keys that had been created after (for example: 2007-12-03T10:15:30.00Z)",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "createdbefore",
          "in" : "query",
          "description" : "Only keys that had been created before (for example: 2007-12-03T10:15:30.00Z)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Only keys that had been created before (for example: 2007-12-03T10:15:30.00Z)",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "ID's of the keys (Will ignore any other parameter)",
          "required" : false,
          "schema" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A map from a tenant key ID to its metadata.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "$ref" : "#/components/schemas/KeyMetaData"
                  },
                  "nullable" : false,
                  "example" : "No example available for this type"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/alias/{alias}/category/{hsmcategory}/scheme/{scheme}" : {
      "post" : {
        "tags" : [ "Keys Management API" ],
        "description" : "Generate key pair.",
        "operationId" : "post_keys__tenantid__alias__alias__category__hsmcategory__scheme__scheme_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "alias",
          "in" : "path",
          "description" : "The key alias",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The key alias",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "hsmcategory",
          "in" : "path",
          "description" : "The HSM Category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The HSM Category",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "scheme",
          "in" : "path",
          "description" : "The scheme",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The scheme",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The ID of the newly generated key pair.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KeyPairIdentifier"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/schemes/{hsmcategory}" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "Get list of schemes for the cluster.",
        "operationId" : "get_keys__tenantid__schemes__hsmcategory_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "hsmcategory",
          "in" : "path",
          "description" : "The HSM Category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The HSM Category",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of schemes codes which are supported by the associated HSM integration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : false,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "type" : "string",
                    "example" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/{keyid}" : {
      "get" : {
        "tags" : [ "Keys Management API" ],
        "description" : "GET key in PEM format.",
        "operationId" : "get_keys__tenantid___keyid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "The Key ID. Or an error code if not found.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The Key ID. Or an error code if not found.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The public key in PEM format.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/forcecpiupload" : {
      "post" : {
        "tags" : [ "Virtual Node Maintenance API" ],
        "description" : "Force uploads a CPI file. Even if CPI with the same metadata has already been uploaded, this endpoint will overwrite the previously stored CPI record. This operation also purges any sandboxes running an overwritten version of a CPI. This action can take some time to process, therefore it is performed asynchronously.",
        "operationId" : "post_maintenance_virtualnode_forcecpiupload",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "upload" : {
                    "type" : "string",
                    "description" : "A file to upload.",
                    "format" : "binary",
                    "nullable" : false,
                    "example" : "No example available for this type"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The response ID which can be used to track the progress of the force CPI upload operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CpiUploadResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/getprotocolversion" : {
      "get" : {
        "tags" : [ "Virtual Node Maintenance API" ],
        "description" : "",
        "operationId" : "get_maintenance_virtualnode_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/{virtualnodeshortid}/state/{newstate}" : {
      "put" : {
        "tags" : [ "Virtual Node Maintenance API" ],
        "description" : "Updates the state of a new virtual node to one of the pre-defined values.",
        "operationId" : "put_maintenance_virtualnode__virtualnodeshortid__state__newstate_",
        "parameters" : [ {
          "name" : "virtualnodeshortid",
          "in" : "path",
          "description" : "Short ID of the virtual node instance to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short ID of the virtual node instance to update",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "newstate",
          "in" : "path",
          "description" : "State to transition virtual node instance into. Possible values are: IN_MAINTENANCE and ACTIVE.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "State to transition virtual node instance into. Possible values are: IN_MAINTENANCE and ACTIVE.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete information about updated virtual node which will also contain the updated state.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeVirtualNodeStateResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/members/getprotocolversion" : {
      "get" : {
        "tags" : [ "Member Lookup API" ],
        "description" : "",
        "operationId" : "get_members_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/members/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Member Lookup API" ],
        "description" : "Lists the active members in the membership group.",
        "operationId" : "get_members__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "cn",
          "in" : "query",
          "description" : "Common Name (CN) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Common Name (CN) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "o",
          "in" : "query",
          "description" : "Organisation (O) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Organisation (O) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "ou",
          "in" : "query",
          "description" : "Organisation Unit (OU) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Organisation Unit (OU) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "l",
          "in" : "query",
          "description" : "Locality (L) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Locality (L) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "st",
          "in" : "query",
          "description" : "State (ST) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "State (ST) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "c",
          "in" : "query",
          "description" : "Country (C) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Country (C) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RpcMemberInfoList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/getprotocolversion" : {
      "get" : {
        "tags" : [ "Member Registration API" ],
        "description" : "",
        "operationId" : "get_membership_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "Member Registration API" ],
        "description" : "Checks the status of the registration request.",
        "operationId" : "get_membership__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : false,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/RegistrationRequestStatus"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "Member Registration API" ],
        "description" : "Start registration process for a virtual node.",
        "operationId" : "post_membership__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberRegistrationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRequestProgress"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/{holdingidentityshorthash}/{registrationrequestid}" : {
      "get" : {
        "tags" : [ "Member Registration API" ],
        "description" : "Checks the status of the registration request.",
        "operationId" : "get_membership__holdingidentityshorthash___registrationrequestid_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "registrationrequestid",
          "in" : "path",
          "description" : "ID of the request to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the request to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "nullable" : true,
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/RegistrationRequestStatus"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/mgm/getprotocolversion" : {
      "get" : {
        "tags" : [ "MGM API" ],
        "description" : "",
        "operationId" : "get_mgm_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/mgm/{holdingidentityshorthash}/info" : {
      "get" : {
        "tags" : [ "MGM API" ],
        "description" : "Fetches the requested group policy string",
        "operationId" : "get_mgm__holdingidentityshorthash__info",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/network/getprotocolversion" : {
      "get" : {
        "tags" : [ "Network API" ],
        "description" : "",
        "operationId" : "get_network_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/network/setup/{holdingidentityshorthash}" : {
      "put" : {
        "tags" : [ "Network API" ],
        "description" : "Set up the holding identity on the network.",
        "operationId" : "put_network_setup__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to set up.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to set up.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HostedIdentitySetupRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission" : {
      "post" : {
        "tags" : [ "RBAC Permission API" ],
        "description" : "This method creates a new permission.",
        "operationId" : "post_permission",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePermissionType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "\n        id: The server-side generated ID of the new permission\n        permissionType: Defines whether this is an ALLOW or DENY type of permission\n        permissionString: A machine-parseable string representing an individual permission; \n            it can be any arbitrary string as long as the authorization code can make use of it in the context of user \n            permission matching\n        groupVisibility: An optional group visibility identifier of the permission\n        virtualNode: An optional identifier of the virtual node to which the physical node permission applies\n        version: The version number of the permission; a value of 0 is assigned to a newly-created permission\n        updateTimestamp: The server-side timestamp showing when the permission was created\n    ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermissionResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission/getprotocolversion" : {
      "get" : {
        "tags" : [ "RBAC Permission API" ],
        "description" : "",
        "operationId" : "get_permission_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission/{id}" : {
      "get" : {
        "tags" : [ "RBAC Permission API" ],
        "description" : "This method returns the permission associated with the specified ID.",
        "operationId" : "get_permission__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the permission to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the permission to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "\n        id: The server-side generated ID of the new permission\n        permissionType: Defines whether this is an ALLOW or DENY type of permission\n        permissionString: A machine-parseable string representing an individual permission; \n            it can be any arbitrary string as long as the authorization code can make use of it in the context of user \n            permission matching\n        groupVisibility: An optional group visibility identifier of the permission\n        virtualNode: An optional identifier of the virtual node to which the physical node permission applies\n        version: The version number of the permission; a value of 0 is assigned to a newly-created permission\n        updateTimestamp: The server-side timestamp showing when the permission was created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermissionResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role" : {
      "get" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "This method returns an array with information about all roles in the permission system.",
        "operationId" : "get_role",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Set of roles with each role having the following attributes: \n        id: The unique identifier of the role\n        version: The version number of the role\n        updateTimestamp: The date and time when the role was last updated\n        roleName: The name of the role\n        groupVisibility: An optional group visibility of the role\n        permissions: The list of permissions associated with the role\n    ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/RoleResponseType"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "The method creates a new role in the RBAC permission system.",
        "operationId" : "post_role",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateRoleType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Newly created role with attributes:\n        id: The unique identifier of the role\n        version: The version number of the role\n        updateTimestamp: The date and time when the role was last updated\n        roleName: The name of the role\n        groupVisibility: An optional group visibility of the role\n        permissions: The list of permissions associated with the role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/getprotocolversion" : {
      "get" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "",
        "operationId" : "get_role_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/{id}" : {
      "get" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "This method gets the details of a role specified by its ID.",
        "operationId" : "get_role__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the role to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the role to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Role with attributes:\n        id: The unique identifier of the role\n        version: The version number of the role\n        updateTimestamp: The date and time when the role was last updated\n        roleName: The name of the role\n        groupVisibility: An optional group visibility of the role\n        permissions: The list of permissions associated with the role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/{roleid}/permission/{permissionid}" : {
      "put" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "This method adds the specified permission to the specified role.",
        "operationId" : "put_role__roleid__permission__permissionid_",
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Identifier for an existing role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing role",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "permissionid",
          "in" : "path",
          "description" : "Identifier for an existing permission",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing permission",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Role with attributes:\n            id: The unique identifier of the role\n            version: The version number of the role\n            updateTimestamp: The date and time when the role was last updated\n            roleName: The name of the role\n            groupVisibility: An optional group visibility of the role\n            permissions: The list of permissions associated with the role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "delete" : {
        "tags" : [ "RBAC Role API" ],
        "description" : "This method removes the specified permission from the specified role.",
        "operationId" : "delete_role__roleid__permission__permissionid_",
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Identifier for an existing role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing role",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "permissionid",
          "in" : "path",
          "description" : "Identifier for an existing permission",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Identifier for an existing permission",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Role with attributes:\n            id: The unique identifier of the role\n            version: The version number of the role\n            updateTimestamp: The date and time when the role was last updated\n            roleName: The name of the role\n            groupVisibility: An optional group visibility of the role\n            permissions: The list of permissions associated with the role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "RBAC User API" ],
        "description" : "This method returns a user based on the specified login name.",
        "operationId" : "get_user",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "query",
          "description" : "The login name of the user to be returned",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The login name of the user to be returned",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Newly created user with the following attributes:\n            id: Unique server generated identifier for the user\n            version: The version of the user; version 0 is assigned to a newly created user\n            updateTimestamp: The date and time when the user was last updated\n            fullName: The full name for the new user\n            loginName: The login name for the new user\n            enabled: If true, the user account is enabled; false, the account is disabled\n            ssoAuth: If true, the user account is enabled for SSO authentication; \n                false, the account is enabled for password authentication\n            passwordExpiry: The date and time when the password should expire, specified as an ISO-8601 string;\n                    value of null means that the password does not expire\n            parentGroup: An optional identifier of the user group for the new user to be included;\n                    value of null means that the user will belong to the root group\n            properties: An optional set of key/value properties associated with a user account\n            roleAssociations: A set of roles associated with user account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "RBAC User API" ],
        "description" : "This method creates a new user.",
        "operationId" : "post_user",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateUserType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Newly created user with the following attributes:\n            id: Unique server generated identifier for the user\n            version: The version of the user; version 0 is assigned to a newly created user\n            updateTimestamp: The date and time when the user was last updated\n            fullName: The full name for the new user\n            loginName: The login name for the new user\n            enabled: If true, the user account is enabled; false, the account is disabled\n            ssoAuth: If true, the user account is enabled for SSO authentication; \n                false, the account is enabled for password authentication\n            passwordExpiry: The date and time when the password should expire, specified as an ISO-8601 string;\n                    value of null means that the password does not expire\n            parentGroup: An optional identifier of the user group for the new user to be included;\n                    value of null means that the user will belong to the root group\n            properties: An optional set of key/value properties associated with a user account\n            roleAssociations: A set of roles associated with user account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/getprotocolversion" : {
      "get" : {
        "tags" : [ "RBAC User API" ],
        "description" : "",
        "operationId" : "get_user_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/{loginname}/permissionsummary" : {
      "get" : {
        "tags" : [ "RBAC User API" ],
        "description" : "This method returns a summary of the user's permissions.",
        "operationId" : "get_user__loginname__permissionsummary",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "path",
          "description" : "The login name of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The login name of the user",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "\n            enabled: True if the user account is enabled; false otherwise\n            lastUpdateTimestamp: The date and time when the user was last updated\n            loginName: The login name of the user\n            permissions: An array of one or more permissions associated with the user\n        ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPermissionSummaryResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/{loginname}/role/{roleid}" : {
      "put" : {
        "tags" : [ "RBAC User API" ],
        "description" : "This method assigns a specified role to a specified user.",
        "operationId" : "put_user__loginname__role__roleid_",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "path",
          "description" : "The login name of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The login name of the user",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "The ID of the role to assign to the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The ID of the role to assign to the user",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Newly created user with the following attributes:\n            id: Unique server generated identifier for the user\n            version: The version of the user; version 0 is assigned to a newly created user\n            updateTimestamp: The date and time when the user was last updated\n            fullName: The full name for the new user\n            loginName: The login name for the new user\n            enabled: If true, the user account is enabled; false, the account is disabled\n            ssoAuth: If true, the user account is enabled for SSO authentication; \n                false, the account is enabled for password authentication\n            passwordExpiry: The date and time when the password should expire, specified as an ISO-8601 string;\n                    value of null means that the password does not expire\n            parentGroup: An optional identifier of the user group for the new user to be included;\n                    value of null means that the user will belong to the root group\n            properties: An optional set of key/value properties associated with a user account\n            roleAssociations: A set of roles associated with user account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "delete" : {
        "tags" : [ "RBAC User API" ],
        "description" : "This method removes the specified role from the specified user.",
        "operationId" : "delete_user__loginname__role__roleid_",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "path",
          "description" : "The login name of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The login name of the user",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "The ID of the role to remove from the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The ID of the role to remove from the user",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Newly created user with the following attributes:\n            id: Unique server generated identifier for the user\n            version: The version of the user; version 0 is assigned to a newly created user\n            updateTimestamp: The date and time when the user was last updated\n            fullName: The full name for the new user\n            loginName: The login name for the new user\n            enabled: If true, the user account is enabled; false, the account is disabled\n            ssoAuth: If true, the user account is enabled for SSO authentication; \n                false, the account is enabled for password authentication\n            passwordExpiry: The date and time when the password should expire, specified as an ISO-8601 string;\n                    value of null means that the password does not expire\n            parentGroup: An optional identifier of the user group for the new user to be included;\n                    value of null means that the user will belong to the root group\n            properties: An optional set of key/value properties associated with a user account\n            roleAssociations: A set of roles associated with user account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/virtualnode" : {
      "get" : {
        "tags" : [ "Virtual Node API" ],
        "description" : "The virtual node endpoint uses the GET method to list all virtual nodes in the cluster.",
        "operationId" : "get_virtualnode",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List of virtual node details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VirtualNodes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "Virtual Node API" ],
        "description" : "The virtual node endpoint uses the POST method to create a new virtual node.",
        "operationId" : "post_virtualnode",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VirtualNodeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The details of the created virtual node.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VirtualNodeInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/virtualnode/getprotocolversion" : {
      "get" : {
        "tags" : [ "Virtual Node API" ],
        "description" : "",
        "operationId" : "get_virtualnode_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ChangeVirtualNodeStateResponse" : {
        "required" : [ "holdingIdShortHash", "newState" ],
        "type" : "object",
        "properties" : {
          "holdingIdShortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "newState" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "ConfigSchemaVersion" : {
        "required" : [ "major", "minor" ],
        "type" : "object",
        "properties" : {
          "major" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          },
          "minor" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "CpiIdentifier" : {
        "required" : [ "cpiName", "cpiVersion" ],
        "type" : "object",
        "properties" : {
          "cpiName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpiVersion" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "signerSummaryHash" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "CpiMetadata" : {
        "required" : [ "cpiFileChecksum", "cpiFileFullChecksum", "cpks", "id", "timestamp" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpiFileFullChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpks" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpkMetadata"
            }
          },
          "groupPolicy" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/CpiIdentifier"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "CpiUploadResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CpiUploadStatus" : {
        "required" : [ "cpiFileChecksum", "status" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "status" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CpkIdentifier" : {
        "required" : [ "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "signerSummaryHash" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "version" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CpkMetadata" : {
        "required" : [ "dependencies", "hash", "id", "libraries", "mainBundle", "timestamp", "type" ],
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpkIdentifier"
            }
          },
          "hash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/CpkIdentifier"
          },
          "libraries" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          },
          "mainBundle" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CreatePermissionType" : {
        "required" : [ "permissionString", "permissionType" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "type" : "object",
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        },
        "description" : "Details of the permission to be created. \n            permissionType: Defines whether this is an ALLOW or DENY type of permission\n            permissionString: A machine-parseable string representing an individual permission; \n                it can be any arbitrary string as long as the authorization code can make use of it in the context of user \n                permission matching\n            groupVisibility: An optional group visibility identifier of the permission\n            virtualNode: An optional identifier of the virtual node to which the physical node permission applies"
      },
      "CreateRoleType" : {
        "required" : [ "roleName" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "roleName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "Details of the role to be created: \n                roleName - name of the role.\n                groupVisibility - optional group visibility of the role.\n            "
      },
      "CreateUserType" : {
        "required" : [ "enabled", "fullName", "loginName" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "fullName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "initialPassword" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "parentGroup" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "passwordExpiry" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          }
        },
        "description" : "Details of the user to be created with the following parameters:\n                enabled: If true, the user account is enabled; false, the account is disabled\n                fullName: The full name for the new user\n                initialPassword: The initial password for the new user; \n                    the value can be null for Single Sign On (SSO) users\n                loginName: The login name for the new user\n                parentGroup: An optional identifier of the user group for the new user to be included;\n                    value of null means that the user will belong to the root group\n                passwordExpiry: The date and time when the password should expire, specified as an ISO-8601 string;\n                    value of null means that the password does not expire"
      },
      "FlowStateErrorResponse" : {
        "required" : [ "message", "type" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "FlowStatusResponse" : {
        "required" : [ "flowStatus", "holdingIdentityShortHash", "timestamp" ],
        "type" : "object",
        "properties" : {
          "clientRequestId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowError" : {
            "$ref" : "#/components/schemas/FlowStateErrorResponse"
          },
          "flowId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowResult" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowStatus" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "holdingIdentityShortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "FlowStatusResponses" : {
        "required" : [ "flowStatusResponses" ],
        "type" : "object",
        "properties" : {
          "flowStatusResponses" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/FlowStatusResponse"
            }
          }
        }
      },
      "GenerateCsrWrapperRequest" : {
        "required" : [ "certificateRole", "x500Name" ],
        "type" : "object",
        "properties" : {
          "certificateRole" : {
            "type" : "string",
            "description" : "Certificate role. For example: TLS, SESSION_INIT, ...",
            "nullable" : false,
            "example" : "string"
          },
          "contextMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "description" : "Context Map. For example: `signatureSpec` to signature spec (SHA512withECDSA, SHA384withRSA...)",
            "nullable" : true,
            "example" : "No example available for this type"
          },
          "subjectAlternativeNames" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          },
          "x500Name" : {
            "type" : "string",
            "description" : "The X500 name",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "GenerateCsrWrapperRequest",
        "nullable" : false
      },
      "GetCPIsResponse" : {
        "required" : [ "cpis" ],
        "type" : "object",
        "properties" : {
          "cpis" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpiMetadata"
            }
          }
        }
      },
      "GetConfigResponse" : {
        "required" : [ "configWithDefaults", "schemaVersion", "section", "sourceConfig", "version" ],
        "type" : "object",
        "properties" : {
          "configWithDefaults" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/ConfigSchemaVersion"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "sourceConfig" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "HoldingIdentity" : {
        "required" : [ "fullHash", "groupId", "shortHash", "x500Name" ],
        "type" : "object",
        "properties" : {
          "fullHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "groupId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "shortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "x500Name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "HostedIdentitySetupRequest" : {
        "required" : [ "p2pTlsCertificateChainAlias" ],
        "type" : "object",
        "properties" : {
          "p2pTlsCertificateChainAlias" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "p2pTlsTenantId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "sessionKeyId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "sessionKeyTenantId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        },
        "description" : "Additional parameters for setting up the hosted identity."
      },
      "HsmAssociationInfo" : {
        "required" : [ "category", "deprecatedAt", "hsmId", "id" ],
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "deprecatedAt" : {
            "type" : "integer",
            "format" : "int64",
            "nullable" : false,
            "example" : 0
          },
          "hsmId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "masterKeyAlias" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "KeyMetaData" : {
        "required" : [ "alias", "created", "hsmCategory", "keyId", "scheme" ],
        "type" : "object",
        "properties" : {
          "alias" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "hsmCategory" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "keyId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "masterKeyAlias" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "scheme" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "KeyPairIdentifier" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "MemberInfoSubmitted" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        }
      },
      "MemberRegistrationRequest" : {
        "required" : [ "action", "context" ],
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        },
        "description" : "Data required to initialise the registration process."
      },
      "PermissionAssociationResponseType" : {
        "required" : [ "createdTimestamp", "id" ],
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "PermissionResponseType" : {
        "required" : [ "id", "permissionString", "permissionType", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "type" : "object",
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "PermissionSummaryResponseType" : {
        "required" : [ "id", "permissionString", "permissionType" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "type" : "object",
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "PropertyResponseType" : {
        "required" : [ "key", "lastChangedTimestamp", "value" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "lastChangedTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "value" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RegistrationRequestProgress" : {
        "required" : [ "memberInfoSubmitted", "registrationId", "registrationStatus" ],
        "type" : "object",
        "properties" : {
          "memberInfoSubmitted" : {
            "$ref" : "#/components/schemas/MemberInfoSubmitted"
          },
          "registrationId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "registrationSent" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "registrationStatus" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RegistrationRequestStatus" : {
        "required" : [ "memberInfoSubmitted", "registrationId", "registrationStatus" ],
        "type" : "object",
        "properties" : {
          "memberInfoSubmitted" : {
            "$ref" : "#/components/schemas/MemberInfoSubmitted"
          },
          "registrationId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "registrationSent" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "registrationStatus" : {
            "type" : "object",
            "nullable" : false,
            "example" : "PENDING_MEMBER_VERIFICATION",
            "enum" : [ "NEW", "PENDING_MEMBER_VERIFICATION", "PENDING_APPROVAL_FLOW", "PENDING_MANUAL_APPROVAL", "PENDING_AUTO_APPROVAL", "DECLINED", "APPROVED" ]
          },
          "registrationUpdated" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "RoleAssociationResponseType" : {
        "required" : [ "createTimestamp", "roleId" ],
        "type" : "object",
        "properties" : {
          "createTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "roleId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RoleResponseType" : {
        "required" : [ "id", "permissions", "roleName", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissions" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PermissionAssociationResponseType"
            }
          },
          "roleName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "RpcMemberInfo" : {
        "required" : [ "memberContext", "mgmContext" ],
        "type" : "object",
        "properties" : {
          "memberContext" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          },
          "mgmContext" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        }
      },
      "RpcMemberInfoList" : {
        "required" : [ "members" ],
        "type" : "object",
        "properties" : {
          "members" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/RpcMemberInfo"
            }
          }
        }
      },
      "StartFlowParameters" : {
        "required" : [ "clientRequestId", "flowClassName", "requestData" ],
        "type" : "object",
        "properties" : {
          "clientRequestId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "flowClassName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "requestData" : {
            "description" : "Can be any value - string, number, boolean, array or object.",
            "nullable" : false,
            "example" : "{\"command\":\"echo\", \"data\":{\"value\": \"hello-world\"}}",
            "anyOf" : [ {
              "type" : "string"
            }, {
              "type" : "number"
            }, {
              "type" : "integer",
              "format" : "int32"
            }, {
              "type" : "boolean"
            }, {
              "type" : "array"
            }, {
              "type" : "object"
            } ]
          }
        },
        "description" : "Information required to start a flow for this holdingId"
      },
      "StartableFlowsResponse" : {
        "required" : [ "flowClassNames" ],
        "type" : "object",
        "properties" : {
          "flowClassNames" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          }
        }
      },
      "UpdateConfigParameters" : {
        "required" : [ "config", "schemaVersion", "section", "version" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/ConfigSchemaVersion"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        },
        "description" : "Details of the updated configuration. Includes: \n- config: The updated configuration in JSON or HOCON format.\n- schemaVersion: The schema version of the configuration.\n- section: The section of the configuration to be updated.\n- version: The version number used for optimistic locking.\n"
      },
      "UpdateConfigResponse" : {
        "required" : [ "config", "schemaVersion", "section", "version" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/ConfigSchemaVersion"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "UserPermissionSummaryResponseType" : {
        "required" : [ "enabled", "lastUpdateTimestamp", "loginName", "permissions" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "lastUpdateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissions" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PermissionSummaryResponseType"
            }
          }
        }
      },
      "UserResponseType" : {
        "required" : [ "enabled", "fullName", "id", "loginName", "properties", "roleAssociations", "ssoAuth", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "fullName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "parentGroup" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "passwordExpiry" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "properties" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PropertyResponseType"
            }
          },
          "roleAssociations" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/RoleAssociationResponseType"
            }
          },
          "ssoAuth" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "VirtualNodeInfo" : {
        "required" : [ "cpiIdentifier", "cryptoDmlConnectionId", "holdingIdentity", "state", "uniquenessDmlConnectionId", "vaultDmlConnectionId" ],
        "type" : "object",
        "properties" : {
          "cpiIdentifier" : {
            "$ref" : "#/components/schemas/CpiIdentifier"
          },
          "cryptoDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "cryptoDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "holdingIdentity" : {
            "$ref" : "#/components/schemas/HoldingIdentity"
          },
          "hsmConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "state" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "uniquenessDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "uniquenessDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "vaultDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "VirtualNodeRequest" : {
        "required" : [ "cpiFileChecksum", "x500Name" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cryptoDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "cryptoDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "uniquenessDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "uniquenessDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "x500Name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "Details of the virtual node to be created"
      },
      "VirtualNodes" : {
        "required" : [ "virtualNodes" ],
        "type" : "object",
        "properties" : {
          "virtualNodes" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/VirtualNodeInfo"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}
