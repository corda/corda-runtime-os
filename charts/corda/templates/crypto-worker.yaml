{{- $_ := set . "worker" "crypto" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "corda.workerName" . }}
  labels:
    {{- include "corda.workerLabels" . | nindent 4 }}
spec:
  replicas: {{ .Values.workers.crypto.replicaCount }}
  selector:
    matchLabels:
      {{- include "corda.workerSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "corda.workerSelectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      {{- include "corda.imagePullSecrets" . | nindent 6 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/component"
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: {{ include "corda.workerName" . }}
        image: {{ include "corda.workerImage" . }}
        imagePullPolicy:  {{ .Values.imagePullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
        {{- include "corda.workerResources" . | nindent 8 }}
        env:
        {{- include "corda.workerJavaToolOptions" . | nindent 10 }}
          - name: DATABASE_PASS
            valueFrom:
              secretKeyRef:
                name: {{ include "corda.clusterDbSecretName" . }}
                key: password
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                key: salt
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                key: passphrase
        args:
        {{- include "corda.workerKafkaArgs" . | nindent 10 }}
          - -spassphrase=$(PASSPHRASE)
          - -ssalt=$(SALT)
          - -ddatabase.user={{ .Values.db.cluster.user }}
          - -ddatabase.pass=$(DATABASE_PASS)
          - -ddatabase.jdbc.url=jdbc:postgresql://{{ required "Must specify db.cluster.host" .Values.db.cluster.host }}:{{ .Values.db.cluster.port }}/{{ .Values.db.cluster.database }}
        volumeMounts:
        {{- include "corda.workerVolumeMounts" . | nindent 10 }}
        ports:
        {{- if .Values.workers.crypto.debug.enabled }}
          - name: debug
            containerPort: 5005
        {{- end }}
          - name: health
            containerPort: 7000
        {{- if not .Values.workers.crypto.debug.enabled }}
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: health
          periodSeconds: 10
          failureThreshold: 1
        startupProbe:
          httpGet:
            path: /isHealthy
            port: health
          periodSeconds: 10
          failureThreshold: 5
        {{- end }}
      volumes:
      {{- include "corda.workerVolumes" . | nindent 8 }}
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
