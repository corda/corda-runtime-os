/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.data.flow;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class RPCFlowResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7234427434928271975L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RPCFlowResult\",\"namespace\":\"net.corda.data.flow\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"flowName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"result\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"CPIIdentifier\",\"type\":{\"type\":\"record\",\"name\":\"SecureHash\",\"namespace\":\"net.corda.data.crypto\",\"fields\":[{\"name\":\"algorithm\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serverHash\",\"type\":\"bytes\"}]}},{\"name\":\"error\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FlowError\",\"fields\":[{\"name\":\"errorType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"errorMessage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"doc\":\"The flow exception (if any) that caused an error\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RPCFlowResult> ENCODER =
      new BinaryMessageEncoder<RPCFlowResult>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RPCFlowResult> DECODER =
      new BinaryMessageDecoder<RPCFlowResult>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RPCFlowResult> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RPCFlowResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RPCFlowResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RPCFlowResult>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RPCFlowResult to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RPCFlowResult from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RPCFlowResult instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RPCFlowResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String clientId;
   private java.lang.String flowName;
   private java.nio.ByteBuffer result;
   private net.corda.data.crypto.SecureHash CPIIdentifier;
  /** The flow exception (if any) that caused an error */
   private net.corda.data.flow.FlowError error;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RPCFlowResult() {}

  /**
   * All-args constructor.
   * @param clientId The new value for clientId
   * @param flowName The new value for flowName
   * @param result The new value for result
   * @param CPIIdentifier The new value for CPIIdentifier
   * @param error The flow exception (if any) that caused an error
   */
  public RPCFlowResult(java.lang.String clientId, java.lang.String flowName, java.nio.ByteBuffer result, net.corda.data.crypto.SecureHash CPIIdentifier, net.corda.data.flow.FlowError error) {
    this.clientId = clientId;
    this.flowName = flowName;
    this.result = result;
    this.CPIIdentifier = CPIIdentifier;
    this.error = error;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientId;
    case 1: return flowName;
    case 2: return result;
    case 3: return CPIIdentifier;
    case 4: return error;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientId = value$ != null ? value$.toString() : null; break;
    case 1: flowName = value$ != null ? value$.toString() : null; break;
    case 2: result = (java.nio.ByteBuffer)value$; break;
    case 3: CPIIdentifier = (net.corda.data.crypto.SecureHash)value$; break;
    case 4: error = (net.corda.data.flow.FlowError)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return The value of the 'clientId' field.
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Sets the value of the 'clientId' field.
   * @param value the value to set.
   */
  public void setClientId(java.lang.String value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'flowName' field.
   * @return The value of the 'flowName' field.
   */
  public java.lang.String getFlowName() {
    return flowName;
  }


  /**
   * Sets the value of the 'flowName' field.
   * @param value the value to set.
   */
  public void setFlowName(java.lang.String value) {
    this.flowName = value;
  }

  /**
   * Gets the value of the 'result' field.
   * @return The value of the 'result' field.
   */
  public java.nio.ByteBuffer getResult() {
    return result;
  }


  /**
   * Sets the value of the 'result' field.
   * @param value the value to set.
   */
  public void setResult(java.nio.ByteBuffer value) {
    this.result = value;
  }

  /**
   * Gets the value of the 'CPIIdentifier' field.
   * @return The value of the 'CPIIdentifier' field.
   */
  public net.corda.data.crypto.SecureHash getCPIIdentifier() {
    return CPIIdentifier;
  }


  /**
   * Sets the value of the 'CPIIdentifier' field.
   * @param value the value to set.
   */
  public void setCPIIdentifier(net.corda.data.crypto.SecureHash value) {
    this.CPIIdentifier = value;
  }

  /**
   * Gets the value of the 'error' field.
   * @return The flow exception (if any) that caused an error
   */
  public net.corda.data.flow.FlowError getError() {
    return error;
  }


  /**
   * Sets the value of the 'error' field.
   * The flow exception (if any) that caused an error
   * @param value the value to set.
   */
  public void setError(net.corda.data.flow.FlowError value) {
    this.error = value;
  }

  /**
   * Creates a new RPCFlowResult RecordBuilder.
   * @return A new RPCFlowResult RecordBuilder
   */
  public static net.corda.data.flow.RPCFlowResult.Builder newBuilder() {
    return new net.corda.data.flow.RPCFlowResult.Builder();
  }

  /**
   * Creates a new RPCFlowResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RPCFlowResult RecordBuilder
   */
  public static net.corda.data.flow.RPCFlowResult.Builder newBuilder(net.corda.data.flow.RPCFlowResult.Builder other) {
    if (other == null) {
      return new net.corda.data.flow.RPCFlowResult.Builder();
    } else {
      return new net.corda.data.flow.RPCFlowResult.Builder(other);
    }
  }

  /**
   * Creates a new RPCFlowResult RecordBuilder by copying an existing RPCFlowResult instance.
   * @param other The existing instance to copy.
   * @return A new RPCFlowResult RecordBuilder
   */
  public static net.corda.data.flow.RPCFlowResult.Builder newBuilder(net.corda.data.flow.RPCFlowResult other) {
    if (other == null) {
      return new net.corda.data.flow.RPCFlowResult.Builder();
    } else {
      return new net.corda.data.flow.RPCFlowResult.Builder(other);
    }
  }

  /**
   * RecordBuilder for RPCFlowResult instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RPCFlowResult>
    implements org.apache.avro.data.RecordBuilder<RPCFlowResult> {

    private java.lang.String clientId;
    private java.lang.String flowName;
    private java.nio.ByteBuffer result;
    private net.corda.data.crypto.SecureHash CPIIdentifier;
    private net.corda.data.crypto.SecureHash.Builder CPIIdentifierBuilder;
    /** The flow exception (if any) that caused an error */
    private net.corda.data.flow.FlowError error;
    private net.corda.data.flow.FlowError.Builder errorBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.data.flow.RPCFlowResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.flowName)) {
        this.flowName = data().deepCopy(fields()[1].schema(), other.flowName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.result)) {
        this.result = data().deepCopy(fields()[2].schema(), other.result);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.CPIIdentifier)) {
        this.CPIIdentifier = data().deepCopy(fields()[3].schema(), other.CPIIdentifier);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasCPIIdentifierBuilder()) {
        this.CPIIdentifierBuilder = net.corda.data.crypto.SecureHash.newBuilder(other.getCPIIdentifierBuilder());
      }
      if (isValidValue(fields()[4], other.error)) {
        this.error = data().deepCopy(fields()[4].schema(), other.error);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasErrorBuilder()) {
        this.errorBuilder = net.corda.data.flow.FlowError.newBuilder(other.getErrorBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing RPCFlowResult instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.data.flow.RPCFlowResult other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.flowName)) {
        this.flowName = data().deepCopy(fields()[1].schema(), other.flowName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.result)) {
        this.result = data().deepCopy(fields()[2].schema(), other.result);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CPIIdentifier)) {
        this.CPIIdentifier = data().deepCopy(fields()[3].schema(), other.CPIIdentifier);
        fieldSetFlags()[3] = true;
      }
      this.CPIIdentifierBuilder = null;
      if (isValidValue(fields()[4], other.error)) {
        this.error = data().deepCopy(fields()[4].schema(), other.error);
        fieldSetFlags()[4] = true;
      }
      this.errorBuilder = null;
    }

    /**
      * Gets the value of the 'clientId' field.
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder setClientId(java.lang.String value) {
      validate(fields()[0], value);
      this.clientId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'clientId' field.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'flowName' field.
      * @return The value.
      */
    public java.lang.String getFlowName() {
      return flowName;
    }


    /**
      * Sets the value of the 'flowName' field.
      * @param value The value of 'flowName'.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder setFlowName(java.lang.String value) {
      validate(fields()[1], value);
      this.flowName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'flowName' field has been set.
      * @return True if the 'flowName' field has been set, false otherwise.
      */
    public boolean hasFlowName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'flowName' field.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder clearFlowName() {
      flowName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'result' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getResult() {
      return result;
    }


    /**
      * Sets the value of the 'result' field.
      * @param value The value of 'result'.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder setResult(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.result = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'result' field.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder clearResult() {
      result = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'CPIIdentifier' field.
      * @return The value.
      */
    public net.corda.data.crypto.SecureHash getCPIIdentifier() {
      return CPIIdentifier;
    }


    /**
      * Sets the value of the 'CPIIdentifier' field.
      * @param value The value of 'CPIIdentifier'.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder setCPIIdentifier(net.corda.data.crypto.SecureHash value) {
      validate(fields()[3], value);
      this.CPIIdentifierBuilder = null;
      this.CPIIdentifier = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'CPIIdentifier' field has been set.
      * @return True if the 'CPIIdentifier' field has been set, false otherwise.
      */
    public boolean hasCPIIdentifier() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'CPIIdentifier' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.data.crypto.SecureHash.Builder getCPIIdentifierBuilder() {
      if (CPIIdentifierBuilder == null) {
        if (hasCPIIdentifier()) {
          setCPIIdentifierBuilder(net.corda.data.crypto.SecureHash.newBuilder(CPIIdentifier));
        } else {
          setCPIIdentifierBuilder(net.corda.data.crypto.SecureHash.newBuilder());
        }
      }
      return CPIIdentifierBuilder;
    }

    /**
     * Sets the Builder instance for the 'CPIIdentifier' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.data.flow.RPCFlowResult.Builder setCPIIdentifierBuilder(net.corda.data.crypto.SecureHash.Builder value) {
      clearCPIIdentifier();
      CPIIdentifierBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'CPIIdentifier' field has an active Builder instance
     * @return True if the 'CPIIdentifier' field has an active Builder instance
     */
    public boolean hasCPIIdentifierBuilder() {
      return CPIIdentifierBuilder != null;
    }

    /**
      * Clears the value of the 'CPIIdentifier' field.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder clearCPIIdentifier() {
      CPIIdentifier = null;
      CPIIdentifierBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'error' field.
      * The flow exception (if any) that caused an error
      * @return The value.
      */
    public net.corda.data.flow.FlowError getError() {
      return error;
    }


    /**
      * Sets the value of the 'error' field.
      * The flow exception (if any) that caused an error
      * @param value The value of 'error'.
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder setError(net.corda.data.flow.FlowError value) {
      validate(fields()[4], value);
      this.errorBuilder = null;
      this.error = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'error' field has been set.
      * The flow exception (if any) that caused an error
      * @return True if the 'error' field has been set, false otherwise.
      */
    public boolean hasError() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'error' field and creates one if it doesn't exist yet.
     * The flow exception (if any) that caused an error
     * @return This builder.
     */
    public net.corda.data.flow.FlowError.Builder getErrorBuilder() {
      if (errorBuilder == null) {
        if (hasError()) {
          setErrorBuilder(net.corda.data.flow.FlowError.newBuilder(error));
        } else {
          setErrorBuilder(net.corda.data.flow.FlowError.newBuilder());
        }
      }
      return errorBuilder;
    }

    /**
     * Sets the Builder instance for the 'error' field
     * The flow exception (if any) that caused an error
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.data.flow.RPCFlowResult.Builder setErrorBuilder(net.corda.data.flow.FlowError.Builder value) {
      clearError();
      errorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'error' field has an active Builder instance
     * The flow exception (if any) that caused an error
     * @return True if the 'error' field has an active Builder instance
     */
    public boolean hasErrorBuilder() {
      return errorBuilder != null;
    }

    /**
      * Clears the value of the 'error' field.
      * The flow exception (if any) that caused an error
      * @return This builder.
      */
    public net.corda.data.flow.RPCFlowResult.Builder clearError() {
      error = null;
      errorBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RPCFlowResult build() {
      try {
        RPCFlowResult record = new RPCFlowResult();
        record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.String) defaultValue(fields()[0]);
        record.flowName = fieldSetFlags()[1] ? this.flowName : (java.lang.String) defaultValue(fields()[1]);
        record.result = fieldSetFlags()[2] ? this.result : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        if (CPIIdentifierBuilder != null) {
          try {
            record.CPIIdentifier = this.CPIIdentifierBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("CPIIdentifier"));
            throw e;
          }
        } else {
          record.CPIIdentifier = fieldSetFlags()[3] ? this.CPIIdentifier : (net.corda.data.crypto.SecureHash) defaultValue(fields()[3]);
        }
        if (errorBuilder != null) {
          try {
            record.error = this.errorBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("error"));
            throw e;
          }
        } else {
          record.error = fieldSetFlags()[4] ? this.error : (net.corda.data.flow.FlowError) defaultValue(fields()[4]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RPCFlowResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<RPCFlowResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RPCFlowResult>
    READER$ = (org.apache.avro.io.DatumReader<RPCFlowResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.clientId);

    out.writeString(this.flowName);

    if (this.result == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.result);
    }

    this.CPIIdentifier.customEncode(out);

    if (this.error == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.error.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.clientId = in.readString();

      this.flowName = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.result = null;
      } else {
        this.result = in.readBytes(this.result);
      }

      if (this.CPIIdentifier == null) {
        this.CPIIdentifier = new net.corda.data.crypto.SecureHash();
      }
      this.CPIIdentifier.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.error = null;
      } else {
        if (this.error == null) {
          this.error = new net.corda.data.flow.FlowError();
        }
        this.error.customDecode(in);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.clientId = in.readString();
          break;

        case 1:
          this.flowName = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.result = null;
          } else {
            this.result = in.readBytes(this.result);
          }
          break;

        case 3:
          if (this.CPIIdentifier == null) {
            this.CPIIdentifier = new net.corda.data.crypto.SecureHash();
          }
          this.CPIIdentifier.customDecode(in);
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.error = null;
          } else {
            if (this.error == null) {
              this.error = new net.corda.data.flow.FlowError();
            }
            this.error.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










