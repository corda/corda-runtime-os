plugins {
    id 'corda.common-publishing'
    id 'corda.common-app'
    id 'corda.docker-app'
}

description 'Uniqueness Worker'

osgiRun {
    frameworkProperties.putAll(
        'org.osgi.framework.security': 'osgi'
    )
}

dependencies {
    compileOnly 'org.osgi:org.osgi.service.component.annotations'

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation project(':applications:workers:worker-common')
    implementation project(":components:security-manager")
    implementation project(':libs:configuration:configuration-core')
    implementation project(':libs:configuration:configuration-validation')
    implementation project(":libs:lifecycle:registry")
    implementation project(':libs:platform-info')
    implementation project(':libs:tracing')
    implementation project(':libs:web:web')
    // Processor list must be kept in sync with workersForProcessor in net.corda.cli.plugins.topicconfig.Create
    implementation project(':processors:uniqueness-processor')
    implementation 'org.jetbrains.kotlin:kotlin-osgi-bundle'
    implementation "info.picocli:picocli:$picocliVersion"
    implementation 'net.corda:corda-base'
    implementation 'net.corda:corda-config-schema'

    runtimeOnly "com.typesafe:config:$typeSafeConfigVersion"
    runtimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.framework.extension:$ariesDynamicFrameworkExtensionVersion"
    runtimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    runtimeOnly "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"
    runtimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    runtimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"

    runtimeOnly project(':libs:messaging:kafka-message-bus-impl')
    runtimeOnly project(':libs:tracing-impl')

    testImplementation 'org.osgi:osgi.core'
    testImplementation project(':libs:application:addon')
    testImplementation project(':libs:application:banner')

    runtimeOnly("org.apache.felix:org.apache.felix.framework.security:$felixSecurityVersion") {
        exclude group: 'org.apache.felix'
        exclude group: 'org.osgi'
    }

    // This puts the jdbc driver into the docker image in the /opt/jdbc-driver folder
    // this folder can contain many jdbc drivers (and DataSourceFactory provider bundles).
    // Postgres doesn't need a DataSourceFactory provider bundle (e.g. pax-jdbc), because
    // the postgres devs have written their own and it's in this jar (PGDataSourceFactory).
    dockerImageJdbc "org.postgresql:postgresql:$postgresDriverVersion"

    // If we were to do this for a different database that is *not natively an OSGi bundle*
    // we would need the wrapped OSGi bundle version and the pax-jdbc loader, i.e.
    //
    // dockerImageJdbc "org.ops4j.pax.jdbc:pax-jdbc-VENDOR:1.5.3"
    // dockerImageJdbc "com.VENDOR.database.jdbc:vendor-jdbc-WRAPPED-AS-A-BUNDLE:$vendorVersion"
    //
    // NOTE: PLEASE MAKE SURE NOT TO PUBLISH A DOCKER IMAGE PUBLICLY WITH THESE WRAPPED DRIVERS,
    //             UNLESS ABSOLUTELY SURE WE CAN DISTRIBUTE IT!!
}
