/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.apis

import net.corda.restclient.models.HsmAssociationInfo

import net.corda.restclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class HSMApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getHsmGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/hsm/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method retrieves information on the HSM of the specified category assigned to the tenant.
         * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST 
         * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39; 
         * @return HsmAssociationInfo
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getHsmTenantidCategory(tenantid: kotlin.String, category: kotlin.String): HttpResponse<HsmAssociationInfo> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/hsm/{tenantid}/{category}".replace("{" + "tenantid" + "}", "$tenantid").replace("{" + "category" + "}", "$category"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method enables you to assign a soft HSM to the tenant for the specified category.
         * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST 
         * @param category The category of the HSM; can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39; 
         * @return HsmAssociationInfo
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postHsmSoftTenantidCategory(tenantid: kotlin.String, category: kotlin.String): HttpResponse<HsmAssociationInfo> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/hsm/soft/{tenantid}/{category}".replace("{" + "tenantid" + "}", "$tenantid").replace("{" + "category" + "}", "$category"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
