import java.nio.file.Files
import java.util.jar.JarFile

description("OSGi Framework Bootstrap")

dependencies {
    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation 'net.corda.kotlin:kotlin-stdlib-jdk8-osgi'
    implementation "org.apache.felix:org.apache.felix.framework:$felixVersion"
    implementation project(":osgi-framework-api")
    implementation 'net.corda:corda-base'
    implementation 'org.slf4j:slf4j-api'
    implementation "org.slf4j:jul-to-slf4j:$slf4jVersion"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    testImplementation "com.google.jimfs:jimfs:$jimfsVersion"
    testImplementation "org.apache.sling:org.apache.sling.testing.osgi-mock.junit5:$slingVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
}

private boolean isBundle(JarFile jarFile) {
    return jarFile.manifest.mainAttributes.getValue(org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME) != null
}

private static boolean isJar(final File file) {
    return file.name.endsWith(".jar")
}

private addBundle(
        final File source,
        final File target,
        final Set<String> systemBundleSet) {
    Files.deleteIfExists(target.toPath())
    Files.copy(source.toPath(), target.toPath())
    systemBundleSet.add("bundles/${source.name}")
    logger.info "OSGI Bundle $source.name included as resource."
}

private addBundles(
        final File[] files,
        final File bundlesDir,
        final Set<String> systemBundleSet) {
    if (!bundlesDir.exists()) {
        bundlesDir.mkdirs()
    }
    files.each { file ->
        if (isJar(file)) {
            final def jarFile = new JarFile(file)
            if (isBundle(jarFile)) {
                addBundle(file, new File(bundlesDir, file.name), systemBundleSet)
            }
        }
    }
}

test {
    dependsOn(':testing:apps:test-app:appJar')
    final def appTesterProject = project(":testing:apps:test-app")
    doFirst {
        final File source = new File(appTesterProject.buildDir, "libs")
        final File target = new File(buildDir, "resources/test/bundles")
        if (!target.exists()) {
            target.mkdirs()
        }
        final Set<String> systemBundleSet = new TreeSet<>()
        addBundles(source.listFiles(), target, systemBundleSet)
        final systemBundlesFile = new File(project.buildDir, "resources/test/system_bundles")
        systemBundlesFile.withWriter { writer ->
            systemBundleSet.each { line ->
                writer.writeLine(line)
            }
        }
        final numberOfBundles = systemBundleSet.size()
        logger.info "Included $numberOfBundles OSGi bundles in $systemBundlesFile resource."
    }
}
