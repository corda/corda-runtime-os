package net.corda.applications.workers.workercommon.test

import net.corda.applications.workers.healthprovider.HealthProvider
import net.corda.applications.workers.workercommon.Worker
import net.corda.applications.workers.workercommon.PARAM_EXTRA
import net.corda.applications.workers.workercommon.PARAM_INSTANCE_ID
import net.corda.applications.workers.workercommon.WorkerParams
import net.corda.libs.configuration.SmartConfig
import net.corda.libs.configuration.SmartConfigFactoryImpl
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import picocli.CommandLine

/** Tests of worker config parsing. */
class ConfigTests {
    // A no-op health provider.
    private val dummyHealthProvider = object : HealthProvider {
        override fun setHealthy() = Unit
        override fun setNotHealthy() = Unit
        override fun setReady() = Unit
        override fun setNotReady() = Unit
    }

    @Test
    fun `worker config contains provided instance ID`() {
        val expectedInstanceId = "3"

        var instanceId: Int? = null
        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) {
                instanceId = workerConfig.getAnyRef(CONFIG_INSTANCE_ID) as Int
            }
        }

        worker.startup(arrayOf(PARAM_INSTANCE_ID, expectedInstanceId))

        assertEquals(expectedInstanceId.toInt(), instanceId)
    }

    @Test
    fun `worker config contains autogenerated instance ID if none is provided`() {
        val iterations = 10
        val autogeneratedInstanceIds = mutableSetOf<Int>()

        repeat(iterations) {
            val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
                override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) {
                    autogeneratedInstanceIds.add(workerConfig.getAnyRef(CONFIG_INSTANCE_ID) as Int)
                }
            }
            worker.startup(arrayOf())
        }

        // We check that there are as many items in the set as there were iterations, and thus that no two instance IDs
        // were the same.
        assertEquals(iterations, autogeneratedInstanceIds.size)
    }

    @Test
    fun `throws if instance ID parameter is passed but no value is provided`() {
        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) = Unit
        }

        val e = assertThrows<IllegalArgumentException> {
            worker.startup(arrayOf(PARAM_INSTANCE_ID))
        }
        assertEquals("Missing required parameter for option '$PARAM_INSTANCE_ID' (<$CONFIG_INSTANCE_ID>)", e.message)
    }

    @Test
    fun `throws if instance ID parameter is passed but cannot be converted to an int`() {
        val nonIntString = "a"

        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) = Unit
        }

        val e = assertThrows<IllegalArgumentException> {
            worker.startup(arrayOf(PARAM_INSTANCE_ID, nonIntString))
        }
        assertEquals("Invalid value for option '$PARAM_INSTANCE_ID': 'a' is not an int", e.message)
    }

    @Test
    fun `throws if instance ID parameter is passed multiple times`() {
        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) = Unit
        }

        val e = assertThrows<IllegalArgumentException> {
            worker.startup(arrayOf(PARAM_INSTANCE_ID, "1", PARAM_INSTANCE_ID, "2"))
        }
        assertEquals("option '$PARAM_INSTANCE_ID' (<$CONFIG_INSTANCE_ID>) should be specified only once", e.message)
    }

    @Test
    fun `worker config contains provided additional parameters`() {
        val keyOne = "abc"
        val expectedValueOne = "xyz"
        val keyTwo = "123"
        val expectedValueTwo = "789"

        var valueOne: String? = null
        var valueTwo: String? = null
        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) {
                valueOne = workerConfig.getAnyRef("$CONFIG_EXTRA.$keyOne") as String
                valueTwo = workerConfig.getAnyRef("$CONFIG_EXTRA.$keyTwo") as String
            }
        }

        worker.startup(arrayOf(PARAM_EXTRA, "$keyOne=$expectedValueOne", PARAM_EXTRA, "$keyTwo=$expectedValueTwo"))

        assertEquals(expectedValueOne, valueOne)
        assertEquals(expectedValueTwo, valueTwo)
    }

    @Test
    fun `throws if additional parameter is passed but no value is provided`() {
        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) = Unit
        }

        val e = assertThrows<IllegalArgumentException> {
            worker.startup(arrayOf(PARAM_EXTRA))
        }
        assertEquals("Missing required parameter for option '$PARAM_EXTRA' (<String=String>)", e.message)
    }

    @Test
    fun `throws if additional parameter is passed but cannot be converted to a pair`() {
        val extraParamMissingEquals = "abc"

        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) = Unit
        }

        val e = assertThrows<IllegalArgumentException> {
            worker.startup(arrayOf(PARAM_EXTRA, extraParamMissingEquals))
        }
        assertEquals(
            "Value for option option '$PARAM_EXTRA' (<String=String>) should be in KEY=VALUE format but was $extraParamMissingEquals",
            e.message
        )
    }

    @Test
    fun `throws if unrecognised parameter is passed`() {
        val unrecognisedParameter = "-d"

        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) = Unit
        }

        val e = assertThrows<IllegalArgumentException> {
            worker.startup(arrayOf(unrecognisedParameter))
        }
        assertEquals("Unknown option: '$unrecognisedParameter'", e.message)
    }

    @Test
    fun `a worker can define extra standard parameters to be parsed`() {
        open class ExtendedParams : WorkerParams() {
            @Suppress("Unused")
            @CommandLine.Option(names = ["--testParamOne"])
            var testParamOne = ""
        }

        class DoublyExtendedParams : ExtendedParams() {
            @Suppress("Unused")
            @CommandLine.Option(names = ["--testParamTwo"])
            var testParamTwo = ""
        }

        var testParamOne: String? = null
        var testParamTwo: String? = null
        val worker = object : Worker(SmartConfigFactoryImpl(), dummyHealthProvider, DoublyExtendedParams()) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) {
                testParamOne = workerConfig.getAnyRef("testParamOne") as String
                testParamTwo = workerConfig.getAnyRef("testParamTwo") as String
            }
        }

        worker.startup(arrayOf("--testParamOne", "abc", "--testParamTwo", "xyz"))

        assertEquals("abc", testParamOne)
        assertEquals("xyz", testParamTwo)
    }
}