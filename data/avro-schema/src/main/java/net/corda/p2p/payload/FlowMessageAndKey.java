/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.p2p.payload;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlowMessageAndKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -395550349481639186L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlowMessageAndKey\",\"namespace\":\"net.corda.p2p.payload\",\"fields\":[{\"name\":\"flowMessage\",\"type\":{\"type\":\"record\",\"name\":\"FlowMessage\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"FlowMessageHeader\",\"fields\":[{\"name\":\"destination\",\"type\":{\"type\":\"record\",\"name\":\"HoldingIdentity\",\"fields\":[{\"name\":\"x500Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"source\",\"type\":\"HoldingIdentity\"},{\"name\":\"ttl\",\"type\":[\"null\",\"long\"]},{\"name\":\"messageId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"traceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"payload\",\"type\":\"bytes\"}]}},{\"name\":\"key\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlowMessageAndKey> ENCODER =
      new BinaryMessageEncoder<FlowMessageAndKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlowMessageAndKey> DECODER =
      new BinaryMessageDecoder<FlowMessageAndKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlowMessageAndKey> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlowMessageAndKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlowMessageAndKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FlowMessageAndKey>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlowMessageAndKey to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlowMessageAndKey from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlowMessageAndKey instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlowMessageAndKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private net.corda.p2p.payload.FlowMessage flowMessage;
   private java.nio.ByteBuffer key;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlowMessageAndKey() {}

  /**
   * All-args constructor.
   * @param flowMessage The new value for flowMessage
   * @param key The new value for key
   */
  public FlowMessageAndKey(net.corda.p2p.payload.FlowMessage flowMessage, java.nio.ByteBuffer key) {
    this.flowMessage = flowMessage;
    this.key = key;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flowMessage;
    case 1: return key;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flowMessage = (net.corda.p2p.payload.FlowMessage)value$; break;
    case 1: key = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'flowMessage' field.
   * @return The value of the 'flowMessage' field.
   */
  public net.corda.p2p.payload.FlowMessage getFlowMessage() {
    return flowMessage;
  }


  /**
   * Sets the value of the 'flowMessage' field.
   * @param value the value to set.
   */
  public void setFlowMessage(net.corda.p2p.payload.FlowMessage value) {
    this.flowMessage = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.nio.ByteBuffer getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.nio.ByteBuffer value) {
    this.key = value;
  }

  /**
   * Creates a new FlowMessageAndKey RecordBuilder.
   * @return A new FlowMessageAndKey RecordBuilder
   */
  public static net.corda.p2p.payload.FlowMessageAndKey.Builder newBuilder() {
    return new net.corda.p2p.payload.FlowMessageAndKey.Builder();
  }

  /**
   * Creates a new FlowMessageAndKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlowMessageAndKey RecordBuilder
   */
  public static net.corda.p2p.payload.FlowMessageAndKey.Builder newBuilder(net.corda.p2p.payload.FlowMessageAndKey.Builder other) {
    if (other == null) {
      return new net.corda.p2p.payload.FlowMessageAndKey.Builder();
    } else {
      return new net.corda.p2p.payload.FlowMessageAndKey.Builder(other);
    }
  }

  /**
   * Creates a new FlowMessageAndKey RecordBuilder by copying an existing FlowMessageAndKey instance.
   * @param other The existing instance to copy.
   * @return A new FlowMessageAndKey RecordBuilder
   */
  public static net.corda.p2p.payload.FlowMessageAndKey.Builder newBuilder(net.corda.p2p.payload.FlowMessageAndKey other) {
    if (other == null) {
      return new net.corda.p2p.payload.FlowMessageAndKey.Builder();
    } else {
      return new net.corda.p2p.payload.FlowMessageAndKey.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlowMessageAndKey instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlowMessageAndKey>
    implements org.apache.avro.data.RecordBuilder<FlowMessageAndKey> {

    private net.corda.p2p.payload.FlowMessage flowMessage;
    private net.corda.p2p.payload.FlowMessage.Builder flowMessageBuilder;
    private java.nio.ByteBuffer key;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.p2p.payload.FlowMessageAndKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flowMessage)) {
        this.flowMessage = data().deepCopy(fields()[0].schema(), other.flowMessage);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasFlowMessageBuilder()) {
        this.flowMessageBuilder = net.corda.p2p.payload.FlowMessage.newBuilder(other.getFlowMessageBuilder());
      }
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing FlowMessageAndKey instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.p2p.payload.FlowMessageAndKey other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.flowMessage)) {
        this.flowMessage = data().deepCopy(fields()[0].schema(), other.flowMessage);
        fieldSetFlags()[0] = true;
      }
      this.flowMessageBuilder = null;
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'flowMessage' field.
      * @return The value.
      */
    public net.corda.p2p.payload.FlowMessage getFlowMessage() {
      return flowMessage;
    }


    /**
      * Sets the value of the 'flowMessage' field.
      * @param value The value of 'flowMessage'.
      * @return This builder.
      */
    public net.corda.p2p.payload.FlowMessageAndKey.Builder setFlowMessage(net.corda.p2p.payload.FlowMessage value) {
      validate(fields()[0], value);
      this.flowMessageBuilder = null;
      this.flowMessage = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flowMessage' field has been set.
      * @return True if the 'flowMessage' field has been set, false otherwise.
      */
    public boolean hasFlowMessage() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'flowMessage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.p2p.payload.FlowMessage.Builder getFlowMessageBuilder() {
      if (flowMessageBuilder == null) {
        if (hasFlowMessage()) {
          setFlowMessageBuilder(net.corda.p2p.payload.FlowMessage.newBuilder(flowMessage));
        } else {
          setFlowMessageBuilder(net.corda.p2p.payload.FlowMessage.newBuilder());
        }
      }
      return flowMessageBuilder;
    }

    /**
     * Sets the Builder instance for the 'flowMessage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.p2p.payload.FlowMessageAndKey.Builder setFlowMessageBuilder(net.corda.p2p.payload.FlowMessage.Builder value) {
      clearFlowMessage();
      flowMessageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'flowMessage' field has an active Builder instance
     * @return True if the 'flowMessage' field has an active Builder instance
     */
    public boolean hasFlowMessageBuilder() {
      return flowMessageBuilder != null;
    }

    /**
      * Clears the value of the 'flowMessage' field.
      * @return This builder.
      */
    public net.corda.p2p.payload.FlowMessageAndKey.Builder clearFlowMessage() {
      flowMessage = null;
      flowMessageBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public net.corda.p2p.payload.FlowMessageAndKey.Builder setKey(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.key = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public net.corda.p2p.payload.FlowMessageAndKey.Builder clearKey() {
      key = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlowMessageAndKey build() {
      try {
        FlowMessageAndKey record = new FlowMessageAndKey();
        if (flowMessageBuilder != null) {
          try {
            record.flowMessage = this.flowMessageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("flowMessage"));
            throw e;
          }
        } else {
          record.flowMessage = fieldSetFlags()[0] ? this.flowMessage : (net.corda.p2p.payload.FlowMessage) defaultValue(fields()[0]);
        }
        record.key = fieldSetFlags()[1] ? this.key : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlowMessageAndKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlowMessageAndKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlowMessageAndKey>
    READER$ = (org.apache.avro.io.DatumReader<FlowMessageAndKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.flowMessage.customEncode(out);

    out.writeBytes(this.key);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.flowMessage == null) {
        this.flowMessage = new net.corda.p2p.payload.FlowMessage();
      }
      this.flowMessage.customDecode(in);

      this.key = in.readBytes(this.key);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.flowMessage == null) {
            this.flowMessage = new net.corda.p2p.payload.FlowMessage();
          }
          this.flowMessage.customDecode(in);
          break;

        case 1:
          this.key = in.readBytes(this.key);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










