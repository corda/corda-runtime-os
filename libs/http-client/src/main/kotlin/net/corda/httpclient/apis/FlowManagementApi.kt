/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.httpclient.apis

import net.corda.httpclient.models.FlowResultResponse
import net.corda.httpclient.models.FlowStatusResponse
import net.corda.httpclient.models.FlowStatusResponses
import net.corda.httpclient.models.StartFlowParameters

import net.corda.httpclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class FlowManagementApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getFlowGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/flow/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns an array containing the statuses of all flows for a specified holding identity, for a particular flow processing status if specified. An empty array is returned if there are no flows.
         * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration 
         * @param status Processing status of a flow to filter by. For example - RUNNING, START_REQUESTED, RETRYING, COMPLETED, FAILED, KILLED (optional)
         * @return FlowStatusResponses
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getFlowHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, status: kotlin.String?): HttpResponse<FlowStatusResponses> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            status?.apply { localVariableQuery["status"] = listOf("$status") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/flow/{holdingidentityshorthash}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method gets the current status of the specified flow instance.
         * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration 
         * @param clientrequestid Client provided flow identifier 
         * @return FlowStatusResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getFlowHoldingidentityshorthashClientrequestid(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String): HttpResponse<FlowStatusResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/flow/{holdingidentityshorthash}/{clientrequestid}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "clientrequestid" + "}", "$clientrequestid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method gets the result of the specified flow instance execution.
         * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration 
         * @param clientrequestid Client provided flow identifier 
         * @return FlowResultResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getFlowHoldingidentityshorthashClientrequestidResult(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String): HttpResponse<FlowResultResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/flow/{holdingidentityshorthash}/{clientrequestid}/result".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "clientrequestid" + "}", "$clientrequestid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method starts a new instance for the specified flow for the specified holding identity.
         * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration 
         * @param startFlowParameters requestBody 
         * @return FlowStatusResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postFlowHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, startFlowParameters: StartFlowParameters): HttpResponse<FlowStatusResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = startFlowParameters

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/flow/{holdingidentityshorthash}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
