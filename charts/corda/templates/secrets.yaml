{{- include "corda.secret"
  ( list
    $
    .Values.bootstrap.db.cluster
    "boostrap.db.cluster"
    ( include "corda.bootstrapClusterDbDefaultSecretName" . )
    ( dict "username" ( dict ) "password" ( dict ) )
    ( dict "cleanup" true )
  )
}}
{{- include "corda.secret"
  ( list
    $
    .Values.db.cluster
    "db.cluster"
    ( include "corda.clusterDbDefaultSecretName" . )
    ( dict "username" ( dict "required" true ) "password" ( dict "required" true ) )
  )
}}
{{- include "corda.secret"
  ( list
    $
    .Values.config.encryption
    "config.encryption"
    ( printf "%s-config" ( include "corda.fullname" . ) )
    ( dict "salt" ( dict "generate" 32 ) "passphrase" ( dict "generate" 32 ) )
  )
}}
{{/* If host is set at the worker level, user is expected to also set runtime connection credentials */}}
{{- range $workerKey, $workerConfig := .Values.workers }}
{{-   if  ( $workerConfig.stateManager ).db.host  -}}
{{-     include "corda.secret"
        ( list
          $
          $workerConfig.stateManager.db
          ( printf "workers.%s.stateManager.db" $workerKey )
          ( include "corda.stateManagerDefaultSecretName" ( list $ $workerKey ) )
          ( dict "username" ( dict "required" true ) "password" ( dict "generate" 12 ) )
        )
}}
{{-   end }}
{{- end }}
{{- if .Values.bootstrap.db.enabled }}
{{- include "corda.secret"
  ( list
    $
    .Values.bootstrap.db.crypto
    "bootstrap.db.crypto"
    ( include "corda.cryptoDbDefaultSecretName" . )
    ( dict "username" ( dict "required" true ) "password" ( dict "generate" 12 ) )
    ( dict "cleanup" true )
  )
}}
{{- include "corda.secret"
  ( list
    $
    .Values.bootstrap.db.rbac
    "bootstrap.db.rbac"
    ( include "corda.rbacDbDefaultSecretName" . )
    ( dict "username" ( dict "required" true ) "password" ( dict "generate" 12 ) )
    ( dict "cleanup" true )
  )
}}
{{/* If host is set at the worker level and bootstrap is enabled, user is expected to also set bootstrap connection credentials */}}
{{- range $workerKey, $authConfig := .Values.bootstrap.db.stateManager }}
{{-   $workerConfig := (index $.Values.workers $workerKey) }}
{{-   if  ( $workerConfig.stateManager ).db.host  -}}
{{-     include "corda.secret"
        ( list
          $
          $authConfig
          ( printf "bootstrap.db.stateManager.%s" $workerKey )
          ( include "corda.stateManagerDefaultBootSecretName" ( list $ $workerKey ) )
          ( dict "username" ( dict "required" true ) "password" ( dict "required" true ) )
          ( dict "cleanup" true )
        )
}}
{{-   end }}
{{- end }}
{{- end }}
{{- if or (.Values.bootstrap.db.enabled) (and (.Values.bootstrap.rbac.enabled) (and (or (.Values.bootstrap.restApiAdmin.username.value) (.Values.bootstrap.restApiAdmin.username.valueFrom.secretKeyRef.name)) (or (.Values.bootstrap.restApiAdmin.password.value) (.Values.bootstrap.restApiAdmin.password.valueFrom.secretKeyRef.name)))) }}
{{- include "corda.secret"
  ( list
    $
    .Values.bootstrap.restApiAdmin
    "bootstrap.restApiAdmin"
    ( include "corda.restApiAdminSecretName" . )
    ( dict "username" ( dict "required" true ) "password" ( dict "generate" 12 ) )
  )
}}
{{ else if .Values.bootstrap.rbac.enabled }}
{{- fail "credentials for restApiAdmin must be provided to bootstrap RBAC if DB bootstrap is disabled" }}
{{- end }}
{{- if not .Values.workers.rest.tls.secretName }}
{{- $altNames := list }}
{{- if .Values.workers.rest.tls.generation }}
{{-   $altNames = .Values.workers.rest.tls.generation.altNames }}
{{- end}}
{{- include "corda.tlsSecret"
  ( list
    $
    "REST Worker"
    ( printf "%s-rest-worker" ( include "corda.fullname" $ ) )
    $altNames
    ( include "corda.restTlsSecretName" . )
    .Values.workers.rest.tls.crt.secretKey
    .Values.workers.rest.tls.key.secretKey
    .Values.workers.rest.tls.ca.secretKey
  )
}}
{{- end }}