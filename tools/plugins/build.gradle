plugins {
    id 'corda.common-publishing'
    id 'java'
}

ext {
    releasable = true
}

group 'net.corda.cli.deployment'

configurations {
    cliHostDist
}

dependencies {
    cliHostDist "net.corda.cli.host:corda-cli:${pluginHostVersion}"
}

def S3_BUCKET_URI_PROPERTY = 'maven.repo.s3'

tasks.register('copyCliFiles') {
    dependsOn subprojects.collect { it.tasks.named("cliPluginTask").get() }
    doLast {
        copy {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            from configurations.named('cliHostDist')
            into "$buildDir/cli"
            rename ('.*.jar', 'corda-cli.jar')
        }
        copy {
            from subprojects.collect { it.tasks.named('cliPluginTask') }
            into "$buildDir/cli/plugins"
        }
        copy {
            from "$projectDir/installScripts"
            into "$buildDir/cli"
        }
    }
}

tasks.register("cliInstallArchive", Zip) {
    dependsOn tasks.named('copyCliFiles')
    from "$buildDir/cli"
    include '*'
    include '*/*'
    archiveName 'corda-cli-dist.zip'
    destinationDir(file("$buildDir/zip"))
}

tasks.register("cleanDir", Delete) {
    description 'Removes any previously generated scripts'
    delete 'build/generatedScripts'
}

tasks.register("cliS3Download", Copy) {
    dependsOn cleanDir
    description 'Copy corda-cli install scripts to a location in build dir and update to use correct version'
    if (project.hasProperty(S3_BUCKET_URI_PROPERTY)) {
        def s3Url = System.getenv('HTTPS_PATH') + '/'+ project.group.replace('.','/') + "/corda-cli-downloader/$version/corda-cli-downloader-$version"
        logger.info ("S3 Https URL: $s3Url")
        from 'templateScripts'
        into 'build/generatedScripts'
        filter {
            String line -> line.replaceAll("TEMPLATE_URL", s3Url)
        }
    }
    else {
        logger.info("parameter S3_BUCKET_URI_PROPERTY is required! e.g. -Pmaven.repo.s3=https://demo.s3.com/example/bucket, Taking no action for :cliS3Download")
    }
}


tasks.named('jar').configure {
    finalizedBy cliInstallArchive
    if (project.hasProperty(S3_BUCKET_URI_PROPERTY)) {
        finalizedBy cliS3Download
    }
}

tasks.register('publishBuildkitImage' , BuildkitBuild) {
    def sourceTasks = subprojects.collect { it.tasks.named("cliPluginTask").get() }
    def cordaCliIncluded = gradle.includedBuilds.collect { it.name == "corda-cli-plugin-host" }.contains(true)
    def cordaApiIncluded = gradle.includedBuilds.collect { it.name == "corda-api" }.contains(true)
    def buildBaseDir = it.temporaryDir.toString()
    def containerizationDir = "$buildBaseDir/containerization/"
    def driverDir = "$buildBaseDir/jdbc-driver/"
    def containerLocation = '/opt/override/'
    def driverLocation = '/opt/jdbc-driver'
    def subDir = "plugins/"
    String containerName = project.name
    String containerTag = ''

    if (project.hasProperty('cliBaseImage')) {
        it.baseImageName = cliBaseImage
    } else {
        // cater for local composite build
        it.baseImageName = (cordaCliIncluded) ? "corda-os-docker-dev.software.r3.com/corda-os-cli" : "corda-os-docker.software.r3.com/corda-os-cli"
    }

    if (project.hasProperty('baseTag')) {
        it.baseImageTag = baseTag
    } else {
        it.baseImageTag = (cordaCliIncluded) ? "latest-local" : "unstable"
    }

    if(project.hasProperty('Tag')){
        containerTag = Tag
    }

    List<String> javaArgs = new ArrayList<String>(it.arguments.get())
    javaArgs.add("-Dlog4j2.debug=\${ENABLE_LOG4J2_DEBUG:-false}")
    javaArgs.add("-Dlog4j.configurationFile=log4j2-console.xml")
    javaArgs.add("-Dpf4j.pluginsDir=${containerLocation + subDir}")

    if (cordaCliIncluded) {
        logger.lifecycle("corda-cli-plugin-host project detected in composite build logic, building base image from include project")
        dependsOn gradle.includedBuild("corda-api").task(':application:jar')
        dependsOn gradle.includedBuild("corda-cli-plugin-host").task(':app:publishBuildkitImage')
    }

    it.sourceFiles.setFrom(sourceTasks)
    sourceFiles.forEach{
        logger.quiet("${it.name.toString()}")
    }

    def baseImageName = "${it.baseImageTag.get().empty ? it.baseImageName.get() : "${it.baseImageName.get()}:${it.baseImageTag.get()}"}"
    def finalName = "${containerTag.isEmpty() ? containerName : "${containerName}:${containerTag}"}"

    String systemCommand
    String systemPrefix
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        systemCommand = 'powershell'
        systemPrefix = '/c'
    } else{
        systemCommand = 'bash'
        systemPrefix = '/c'
    }

    String[] baseCommand = ['buildctl', "--addr tcp://localhost:3476" , "build" ,"--frontend=dockerfile.v0" , "--local context=/" , "--local dockerfile=${project.rootDir.toString() + "/docker"}"]
    String[] opts = ["--opt build-arg:BASE_IMAGE=${baseImageName}" , "--opt build-arg:BUILD_PATH=${containerizationDir}" , "--opt build-arg:JAR_LOCATION=${containerLocation + subDir}" , "--opt build-arg:JDBC_PATH=${driverDir}" , "--opt build-arg:JDBC_DRIVER_LOCATION=${driverLocation}" , "--opt build-arg:IMAGE_ENTRYPOINT=\"exec java ${javaArgs.join(" ")} -jar  ${containerLocation}cli.jar\" "]
    String[] commandTail = ["--output type=image,name=docker-js-temp.software.r3.com/corda-os-${finalName},push=true" , "--export-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache" , "--import-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache"]
    
    String[] buildkitCommand = baseCommand + opts + commandTail

    doLast {
        exec{
            workingDir("${project.rootDir}")
            commandLine systemCommand, systemPrefix, buildkitCommand.join(" ")
        }
    }
}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    def sourceTasks = subprojects.collect { it.tasks.named("cliPluginTask").get() }
    def cordaCliIncluded = gradle.includedBuilds.collect { it.name == "corda-cli-plugin-host" }.contains(true)
    def cordaApiIncluded = gradle.includedBuilds.collect { it.name == "corda-api" }.contains(true)

    if (cordaCliIncluded && cordaApiIncluded) {
        logger.lifecycle("corda-cli-plugin-host project detected in composite build logic, building base image from include project")
        dependsOn gradle.includedBuild("corda-api").task(':application:jar')
        dependsOn gradle.includedBuild("corda-cli-plugin-host").task(':app:publishOSGiImage')
    }

    it.sourceFiles.setFrom(sourceTasks)
    it.subDir = "plugins/"
    it.setEntry = false
    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }

    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    // Has to be different as jenkins will always try use zulu
    if (project.hasProperty('cliBaseImage')) {
        baseImageName = cliBaseImage
    } else {
        // cater for local composite build
        baseImageName = (cordaCliIncluded) ? "corda-os-docker-dev.software.r3.com/corda-os-cli" : "corda-os-docker.software.r3.com/corda-os-cli"
    }

    if (project.hasProperty('cliBaseTag')) {
        baseImageTag = cliBaseTag
    } else {
        it.baseImageTag = (cordaCliIncluded) ? "latest-local" : "unstable"
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
}

def s3Script = null
if (project.hasProperty(S3_BUCKET_URI_PROPERTY)) {
    s3Script = artifacts.add('archives', file("$project.buildDir/generatedScripts/corda-cli-downloader.sh")) {
        builtBy('cliS3Download')
    }
    artifacts {
        cliInstallArchive
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            artifactId "corda-cli-installer"
            groupId project.group
            artifact cliInstallArchive
        }
        if (project.hasProperty(S3_BUCKET_URI_PROPERTY) && s3Script != null) {
            maven(MavenPublication) {
                artifactId "corda-cli-downloader"
                groupId project.group
                artifact s3Script
            }
        }
    }
    if (project.hasProperty(S3_BUCKET_URI_PROPERTY) && project.hasProperty('releasable')) {
        publishing {
            repositories {
                maven {
                    url = project.findProperty(S3_BUCKET_URI_PROPERTY)
                    credentials(AwsCredentials) {
                        accessKey "${System.getenv('AWS_ACCESS_KEY_ID')}"
                        secretKey "${System.getenv('AWS_SECRET_ACCESS_KEY')}"
                        sessionToken "${System.getenv('AWS_SESSION_TOKEN')}"
                    }
                }
            }
        }
    }
}
