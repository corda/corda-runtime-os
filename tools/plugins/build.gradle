plugins {
    id 'corda.common-publishing'
    id 'java'
}

group 'net.corda.cli.deployment'

configurations {
    cliHostDist
}

var commitId = com.gradle.Utils.execAndGetStdOut "git", "rev-parse", "--verify", "HEAD"
subprojects {
    pluginManager.withPlugin('corda.cli-plugin-packager') {
        cliPlugin {
            cliPluginGitCommitId = "$commitId"
        }
    }
}

dependencies {
    cliHostDist "net.corda.cli.host:corda-cli:${pluginHostVersion}"
}

def S3_BUCKET_URI_PROPERTY = 'maven.repo.s3'
def S3_BUCKET_GROUP_ID_PROPERTY = 'maven.repo.groupId'
def s3_upload_group_id = project.hasProperty(S3_BUCKET_GROUP_ID_PROPERTY) ? "${project.findProperty(S3_BUCKET_GROUP_ID_PROPERTY)}" : project.group

def otherPluginsTasks = subprojects.collect {
        it.tasks.matching {
            task -> task.name == 'cliPluginTask' // Module `plugins-rest` will not have this task
        }
    }

tasks.register('copyCliFiles') {
        def otherPluginsTasksFlattened = otherPluginsTasks.collect {
            it.collect()
        }.flatten()
        logger.info("otherPluginsTasksFlattened : $otherPluginsTasksFlattened")
        dependsOn otherPluginsTasks
        doLast {
            copy {
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                from configurations.named('cliHostDist')
                into "$buildDir/cli"
                rename('.*.jar', 'corda-cli.jar')
            }
            copy {
                from otherPluginsTasks
                into "$buildDir/cli/plugins"
            }
            copy {
                from "$projectDir/installScripts"
                into "$buildDir/cli"
            }
        }
}

tasks.register("cliInstallArchive", Zip) {
    dependsOn tasks.named('copyCliFiles')
    from "$buildDir/cli"
    include '*'
    include '*/*'
    archiveFileName = 'corda-cli-dist.zip'
    destinationDirectory = file("$buildDir/zip")
}

tasks.register("cleanDir", Delete) {
    description 'Removes any previously generated scripts'
    delete 'build/generatedScripts'
}

tasks.register("cliS3Download", Copy) {
    dependsOn cleanDir
    description 'Copy corda-cli install scripts to a location in build dir and update to use correct version'
    if (project.hasProperty(S3_BUCKET_URI_PROPERTY)) {
        def s3Url = System.getenv('HTTPS_PATH') + '/'+ s3_upload_group_id.replace('.','/') + "/corda-cli-downloader/$version/corda-cli-downloader-$version"
        logger.info ("S3 Https URL: $s3Url")
        from 'templateScripts'
        into 'build/generatedScripts'
        filter {
            String line -> line.replaceAll("TEMPLATE_URL", s3Url)
        }
    }
    else {
        logger.info("parameter S3_BUCKET_URI_PROPERTY is required! e.g. -Pmaven.repo.s3=https://demo.s3.com/example/bucket, Taking no action for :cliS3Download")
    }
}


tasks.named('jar').configure {
    finalizedBy cliInstallArchive
    if (project.hasProperty(S3_BUCKET_URI_PROPERTY)) {
        finalizedBy cliS3Download
    }
}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {

    def cordaCliIncluded = gradle.includedBuilds.collect { it.name == "corda-cli-plugin-host" }.contains(true)
    def cordaApiIncluded = gradle.includedBuilds.collect { it.name == "corda-api" }.contains(true)

    if (cordaCliIncluded && cordaApiIncluded) {
        logger.lifecycle("corda-cli-plugin-host project detected in composite build logic, building base image from include project")
        dependsOn gradle.includedBuild("corda-api").task(':application:jar')
        dependsOn gradle.includedBuild("corda-cli-plugin-host").task(':app:publishOSGiImage')
    }

    it.sourceFiles.setFrom(otherPluginsTasks)
    it.subDir = "plugins/"
    it.setEntry = false
    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }
    if (project.hasProperty('doDockerHubPublish')) {
        dockerHubPublish = doDockerHubPublish.toBoolean()
    }
    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    // Has to be different as jenkins will always try use zulu
    if (project.hasProperty('cliBaseImage')) {
        baseImageName = cliBaseImage
    } else {
        // cater for local composite build
        baseImageName = (cordaCliIncluded) ? "corda-os-docker-dev.software.r3.com/corda-os-cli" : "corda-os-docker.software.r3.com/corda-os-cli"
    }

    if (project.hasProperty('cliBaseTag')) {
        baseImageTag = cliBaseTag
    } else {
        String cliVersion = pluginHostVersion.replaceAll(/(.*\d)\D*$/, '$1') // drop suffix i.e beta-+
        if (['RC', 'GA'].contains(System.getenv('RELEASE_TYPE'))) {
            it.baseImageTag = cliVersion
        } else {
            it.baseImageTag = (cordaCliIncluded) ? "latest-local-${cliVersion}" : "unstable-${cliVersion}"
        }
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }

    if (project.hasProperty('multiArchSupport')) {
        multiArch = multiArchSupport.toBoolean()
    }

    if (project.hasProperty('targetPlatform')) {
        targetPlatform = project.property('targetPlatform').toString()
    }
}

def s3Script = null
if (project.hasProperty(S3_BUCKET_URI_PROPERTY)) {
    s3Script = artifacts.add('archives', file("$project.buildDir/generatedScripts/corda-cli-downloader.sh")) {
        builtBy('cliS3Download')
    }
    artifacts {
        cliInstallArchive
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId "corda-cli-installer"
            groupId s3_upload_group_id
            artifact cliInstallArchive
        }
        if (project.hasProperty(S3_BUCKET_URI_PROPERTY) && s3Script != null) {
            maven(MavenPublication) {
                artifactId "corda-cli-downloader"
                groupId s3_upload_group_id
                artifact s3Script
            }
        }
    }
    if (project.hasProperty(S3_BUCKET_URI_PROPERTY) && project.hasProperty('releasable')) {
        publishing {
            repositories {
                maven {
                    url = project.findProperty(S3_BUCKET_URI_PROPERTY)
                    credentials(AwsCredentials) {
                        accessKey "${System.getenv('AWS_ACCESS_KEY_ID')}"
                        secretKey "${System.getenv('AWS_SECRET_ACCESS_KEY')}"
                        sessionToken "${System.getenv('AWS_SESSION_TOKEN')}"
                    }
                }
            }
        }
    }
}

subprojects {
    sourceSets {
        pluginSmokeTest {
            java {
                srcDirs += ['src/pluginSmokeTest/java']
            }
            kotlin {
                srcDirs += ['src/pluginSmokeTest/kotlin']
            }
            resources {
                srcDirs = ['src/pluginSmokeTest/resources']
            }
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    kotlin {
        target {
            java
            compilations.pluginSmokeTest {
                associateWith compilations.main
                associateWith compilations.test

                configurations {
                    pluginSmokeTestApi.extendsFrom testApi
                    pluginSmokeTestImplementation.extendsFrom testImplementation
                    pluginSmokeTestRuntimeOnly.extendsFrom testRuntimeOnly
                }
            }
        }
    }

    tasks.register('pluginSmokeTest', Test) {
        description = "Runs smoke tests for Corda CLI plugins."
        group = "verification"

        testClassesDirs = project.sourceSets["pluginSmokeTest"].output.classesDirs
        classpath = project.sourceSets["pluginSmokeTest"].runtimeClasspath

        def combinedWorker = project.getProperties().getOrDefault("isCombinedWorker", true).toBoolean()
        println "Running tests against ${combinedWorker ? "combined worker" : "Kubernetes cluster"}"

        // Note these port values have to match what is setup as part of port forwarding at cluster bootstrap time.
        // E.g. during Jenkins pipeline setup.
        def combinedWorkerUrl = "http://localhost:7004/"
        def cryptoWorkerUrl = project.getProperties().getOrDefault("cryptoWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7001/")
        systemProperty "cryptoWorkerUrl", cryptoWorkerUrl
        println "Crypto worker url: $cryptoWorkerUrl"
        def restWorkerUrl = project.getProperties().getOrDefault("restWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7002/")
        systemProperty "restWorkerUrl", restWorkerUrl
        println "REST worker url: $restWorkerUrl"
        def flowWorkerUrl = project.getProperties().getOrDefault("flowWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7003/")
        systemProperty "flowWorkerUrl", flowWorkerUrl
        println "Flow worker url: $flowWorkerUrl"
        def flowMapperWorkerUrl = project.getProperties().getOrDefault("flowMapperWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7004/")
        systemProperty "flowMapperWorkerUrl", flowMapperWorkerUrl
        println "Flow Mapper worker url: $flowMapperWorkerUrl"
        def verificationWorkerUrl = project.getProperties().getOrDefault("verificationWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7005/")
        systemProperty "verificationWorkerUrl", verificationWorkerUrl
        println "Verification worker url: $verificationWorkerUrl"
        def dbWorkerUrl = project.getProperties().getOrDefault("dbWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7006/")
        systemProperty "dbWorkerUrl", dbWorkerUrl
        println "DB worker url: $dbWorkerUrl"
        def persistenceWorkerUrl = project.getProperties().getOrDefault("persistenceWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7007/")
        systemProperty "persistenceWorkerUrl", persistenceWorkerUrl
        println "Persistence worker url: $persistenceWorkerUrl"
        def uniquenessWorkerUrl = project.getProperties().getOrDefault("uniquenessWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7008/")
        systemProperty "uniquenessWorkerUrl", uniquenessWorkerUrl

        jvmArgs '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'
    }
}