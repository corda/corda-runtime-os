/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.httpclient.apis

import net.corda.httpclient.models.AsyncOperationStatus
import net.corda.httpclient.models.AsyncResponse
import net.corda.httpclient.models.ChangeVirtualNodeStateResponse
import net.corda.httpclient.models.JsonCreateVirtualNodeRequest
import net.corda.httpclient.models.UpdateVirtualNodeDbRequest
import net.corda.httpclient.models.VirtualNodeInfo
import net.corda.httpclient.models.VirtualNodes

import net.corda.httpclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class VirtualNodeApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * This method lists all virtual nodes in the cluster.
         * @return VirtualNodes
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnode(): HttpResponse<VirtualNodes> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns the Crypto SQL needed for intention to create a virtual node.
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnodeCreateDbCrypto(): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode/create/db/crypto",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns the Uniqueness SQL needed for intention to create a virtual node.
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnodeCreateDbUniqueness(): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode/create/db/uniqueness",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns the Vault SQL needed for intention to create a virtual node and latest uploaded CPI.
         * @param cpichecksum The file checksum of the CPI 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnodeCreateDbVaultCpichecksum(cpichecksum: kotlin.String): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode/create/db/vault/{cpichecksum}".replace("{" + "cpichecksum" + "}", "$cpichecksum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnodeGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns the VirtualNodeInfo for a given Holding Identity ShortHash.
         * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration 
         * @return VirtualNodeInfo
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnodeHoldingidentityshorthash(holdingidentityshorthash: kotlin.String): HttpResponse<VirtualNodeInfo> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode/{holdingidentityshorthash}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns the VirtualNodeOperationStatus for a given operation request id.
         * @param requestid The requestId for the operation; obtained during node creation/upgrade 
         * @return AsyncOperationStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnodeStatusRequestid(requestid: kotlin.String): HttpResponse<AsyncOperationStatus> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode/status/{requestid}".replace("{" + "requestid" + "}", "$requestid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns the SQL needed to update the virtual node&#39;s CPI
         * @param virtualnodeshortid Short ID of the virtual node instance 
         * @param newcpichecksum The file checksum of the CPI to be upgraded to 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVirtualnodeVirtualnodeshortidDbVaultNewcpichecksum(virtualnodeshortid: kotlin.String, newcpichecksum: kotlin.String): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/virtualnode/{virtualnodeshortid}/db/vault/{newcpichecksum}".replace("{" + "virtualnodeshortid" + "}", "$virtualnodeshortid").replace("{" + "newcpichecksum" + "}", "$newcpichecksum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method creates a new virtual node.
         * @param jsonCreateVirtualNodeRequest requestBody 
         * @return AsyncResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postVirtualnode(jsonCreateVirtualNodeRequest: JsonCreateVirtualNodeRequest): HttpResponse<AsyncResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = jsonCreateVirtualNodeRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/virtualnode",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method upgrades a virtual node&#39;s CPI.
         * @param virtualnodeshortid Short ID of the virtual node instance to update 
         * @param targetcpifilechecksum The file checksum of the CPI to upgrade to. 
         * @param forceupgrade Whether this upgrade should be forced regardless of OperationInProgress. (optional)
         * @return AsyncResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun putVirtualnodeVirtualnodeshortidCpiTargetcpifilechecksum(virtualnodeshortid: kotlin.String, targetcpifilechecksum: kotlin.String, forceupgrade: kotlin.Boolean?): HttpResponse<AsyncResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            forceupgrade?.apply { localVariableQuery["forceupgrade"] = listOf("$forceupgrade") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/virtualnode/{virtualnodeshortid}/cpi/{targetcpifilechecksum}".replace("{" + "virtualnodeshortid" + "}", "$virtualnodeshortid").replace("{" + "targetcpifilechecksum" + "}", "$targetcpifilechecksum"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method updates virtual node connection strings.
         * @param virtualnodeshortid Short ID of the virtual node instance to update 
         * @param updateVirtualNodeDbRequest requestBody 
         * @return AsyncResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun putVirtualnodeVirtualnodeshortidDb(virtualnodeshortid: kotlin.String, updateVirtualNodeDbRequest: UpdateVirtualNodeDbRequest): HttpResponse<AsyncResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = updateVirtualNodeDbRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/virtualnode/{virtualnodeshortid}/db".replace("{" + "virtualnodeshortid" + "}", "$virtualnodeshortid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method updates the state of a new virtual node to one of the pre-defined values.
         * @param virtualnodeshortid Short ID of the virtual node instance to update 
         * @param newstate State to transition virtual node instance into. Possible values are: MAINTENANCE and ACTIVE. 
         * @return ChangeVirtualNodeStateResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun putVirtualnodeVirtualnodeshortidStateNewstate(virtualnodeshortid: kotlin.String, newstate: kotlin.String): HttpResponse<ChangeVirtualNodeStateResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/virtualnode/{virtualnodeshortid}/state/{newstate}".replace("{" + "virtualnodeshortid" + "}", "$virtualnodeshortid").replace("{" + "newstate" + "}", "$newstate"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
