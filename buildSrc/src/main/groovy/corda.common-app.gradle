plugins {
    id 'java'
    id 'corda.publish'
    id 'biz.aQute.bnd.builder'
}

configurations {

    runtimeArtifacts {}

    // KNOW_HOW
    // Use `osgiBundle` configuration to define dependencies the OSGi framework must install and activate as OSGI bundles.
    // NOTE
    // The functionalities of `osgi.core` and `osgi.cmpn` are provided by the OSGi framework itself.
    // The `osgi.core` and `osgi.cmpn` bundles must not be included as dependencies else the OSGi framework stops,
    // They can be expressed as `compileOnly` in dependencies of the modules needing to access OSGI framework classes.
    // As precaution the `osgi.core` and `osgi.cmpn` are excluded frm building.
    osgiBundle {
        // The `osgi.core` and `osgi.cmpn` should be declared as `compileOnly` dependencies
        // but many osgi packages include them as transitive dependencies unfortunately
        exclude group: "org.osgi", module: "osgi.core"
        exclude group: "org.osgi", module: "osgi.cmpn"

        exclude group: "net.corda.kotlin", module: "kotlin-stdlib-jdk8-osgi"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-osgi-bundle"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk8"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk7"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-common"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"

        resolutionStrategy.dependencySubstitution {
            //Replace Kotlin stdlib
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk7') with module("net.corda.kotlin:kotlin-stdlib-jdk7-osgi:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-reflect') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
        }
    }

    //The modules excluded from this configuration will be exposed to the OSGi framework from the bootstrapper classpath
    systemPackages {
        transitive = false
    }

    integrationTestRuntimeClasspath {
        extendsFrom(systemPackages)
    }

    appJarRuntimeClasspath {
        extendsFrom(runtimeClasspath)
        extendsFrom(systemPackages)
        canBeResolved = true
        transitive = true
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

compileTestKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

tasks.register("buildAppJar", Jar) {
    inputs.files(project("framework-api").jar)
    archiveBaseName = project.name
    archiveVersion = version
    ["compileJava", "compileKotlin", "processResources"].each { taskName ->
        inputs.files(tasks.named(taskName))
    }
    manifest {
        attributes 'Main-Class': 'net.corda.osgi.framework.OSGiFrameworkMain'
        attributes 'Can-Redefine-Classes': true
        attributes 'Can-Retransform-Classes': true
    }
    from(sourceSets.main.output.files)
    ['appJarRuntimeClasspath'].each { configurationName ->
        from { configurations[configurationName].collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

tasks.register("run", JavaExec) {
    mainClass = 'net.corda.osgi.framework.OSGiFrameworkMain'
    classpath(sourceSets.main.output)
    classpath(project.configurations.named('appJarRuntimeClasspath'))
}

