/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.data.flow;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlowKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5831555378670219809L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlowKey\",\"namespace\":\"net.corda.data.flow\",\"fields\":[{\"name\":\"flowId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"identity\",\"type\":{\"type\":\"record\",\"name\":\"HoldingIdentity\",\"namespace\":\"net.corda.data.identity\",\"fields\":[{\"name\":\"x500Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlowKey> ENCODER =
      new BinaryMessageEncoder<FlowKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlowKey> DECODER =
      new BinaryMessageDecoder<FlowKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlowKey> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlowKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlowKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FlowKey>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlowKey to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlowKey from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlowKey instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlowKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String flowId;
   private net.corda.data.identity.HoldingIdentity identity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlowKey() {}

  /**
   * All-args constructor.
   * @param flowId The new value for flowId
   * @param identity The new value for identity
   */
  public FlowKey(java.lang.String flowId, net.corda.data.identity.HoldingIdentity identity) {
    this.flowId = flowId;
    this.identity = identity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flowId;
    case 1: return identity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flowId = value$ != null ? value$.toString() : null; break;
    case 1: identity = (net.corda.data.identity.HoldingIdentity)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'flowId' field.
   * @return The value of the 'flowId' field.
   */
  public java.lang.String getFlowId() {
    return flowId;
  }


  /**
   * Sets the value of the 'flowId' field.
   * @param value the value to set.
   */
  public void setFlowId(java.lang.String value) {
    this.flowId = value;
  }

  /**
   * Gets the value of the 'identity' field.
   * @return The value of the 'identity' field.
   */
  public net.corda.data.identity.HoldingIdentity getIdentity() {
    return identity;
  }


  /**
   * Sets the value of the 'identity' field.
   * @param value the value to set.
   */
  public void setIdentity(net.corda.data.identity.HoldingIdentity value) {
    this.identity = value;
  }

  /**
   * Creates a new FlowKey RecordBuilder.
   * @return A new FlowKey RecordBuilder
   */
  public static net.corda.data.flow.FlowKey.Builder newBuilder() {
    return new net.corda.data.flow.FlowKey.Builder();
  }

  /**
   * Creates a new FlowKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlowKey RecordBuilder
   */
  public static net.corda.data.flow.FlowKey.Builder newBuilder(net.corda.data.flow.FlowKey.Builder other) {
    if (other == null) {
      return new net.corda.data.flow.FlowKey.Builder();
    } else {
      return new net.corda.data.flow.FlowKey.Builder(other);
    }
  }

  /**
   * Creates a new FlowKey RecordBuilder by copying an existing FlowKey instance.
   * @param other The existing instance to copy.
   * @return A new FlowKey RecordBuilder
   */
  public static net.corda.data.flow.FlowKey.Builder newBuilder(net.corda.data.flow.FlowKey other) {
    if (other == null) {
      return new net.corda.data.flow.FlowKey.Builder();
    } else {
      return new net.corda.data.flow.FlowKey.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlowKey instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlowKey>
    implements org.apache.avro.data.RecordBuilder<FlowKey> {

    private java.lang.String flowId;
    private net.corda.data.identity.HoldingIdentity identity;
    private net.corda.data.identity.HoldingIdentity.Builder identityBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.data.flow.FlowKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flowId)) {
        this.flowId = data().deepCopy(fields()[0].schema(), other.flowId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.identity)) {
        this.identity = data().deepCopy(fields()[1].schema(), other.identity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIdentityBuilder()) {
        this.identityBuilder = net.corda.data.identity.HoldingIdentity.newBuilder(other.getIdentityBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing FlowKey instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.data.flow.FlowKey other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.flowId)) {
        this.flowId = data().deepCopy(fields()[0].schema(), other.flowId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identity)) {
        this.identity = data().deepCopy(fields()[1].schema(), other.identity);
        fieldSetFlags()[1] = true;
      }
      this.identityBuilder = null;
    }

    /**
      * Gets the value of the 'flowId' field.
      * @return The value.
      */
    public java.lang.String getFlowId() {
      return flowId;
    }


    /**
      * Sets the value of the 'flowId' field.
      * @param value The value of 'flowId'.
      * @return This builder.
      */
    public net.corda.data.flow.FlowKey.Builder setFlowId(java.lang.String value) {
      validate(fields()[0], value);
      this.flowId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flowId' field has been set.
      * @return True if the 'flowId' field has been set, false otherwise.
      */
    public boolean hasFlowId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'flowId' field.
      * @return This builder.
      */
    public net.corda.data.flow.FlowKey.Builder clearFlowId() {
      flowId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'identity' field.
      * @return The value.
      */
    public net.corda.data.identity.HoldingIdentity getIdentity() {
      return identity;
    }


    /**
      * Sets the value of the 'identity' field.
      * @param value The value of 'identity'.
      * @return This builder.
      */
    public net.corda.data.flow.FlowKey.Builder setIdentity(net.corda.data.identity.HoldingIdentity value) {
      validate(fields()[1], value);
      this.identityBuilder = null;
      this.identity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'identity' field has been set.
      * @return True if the 'identity' field has been set, false otherwise.
      */
    public boolean hasIdentity() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'identity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.data.identity.HoldingIdentity.Builder getIdentityBuilder() {
      if (identityBuilder == null) {
        if (hasIdentity()) {
          setIdentityBuilder(net.corda.data.identity.HoldingIdentity.newBuilder(identity));
        } else {
          setIdentityBuilder(net.corda.data.identity.HoldingIdentity.newBuilder());
        }
      }
      return identityBuilder;
    }

    /**
     * Sets the Builder instance for the 'identity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.data.flow.FlowKey.Builder setIdentityBuilder(net.corda.data.identity.HoldingIdentity.Builder value) {
      clearIdentity();
      identityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'identity' field has an active Builder instance
     * @return True if the 'identity' field has an active Builder instance
     */
    public boolean hasIdentityBuilder() {
      return identityBuilder != null;
    }

    /**
      * Clears the value of the 'identity' field.
      * @return This builder.
      */
    public net.corda.data.flow.FlowKey.Builder clearIdentity() {
      identity = null;
      identityBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlowKey build() {
      try {
        FlowKey record = new FlowKey();
        record.flowId = fieldSetFlags()[0] ? this.flowId : (java.lang.String) defaultValue(fields()[0]);
        if (identityBuilder != null) {
          try {
            record.identity = this.identityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("identity"));
            throw e;
          }
        } else {
          record.identity = fieldSetFlags()[1] ? this.identity : (net.corda.data.identity.HoldingIdentity) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlowKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlowKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlowKey>
    READER$ = (org.apache.avro.io.DatumReader<FlowKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.flowId);

    this.identity.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.flowId = in.readString();

      if (this.identity == null) {
        this.identity = new net.corda.data.identity.HoldingIdentity();
      }
      this.identity.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.flowId = in.readString();
          break;

        case 1:
          if (this.identity == null) {
            this.identity = new net.corda.data.identity.HoldingIdentity();
          }
          this.identity.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










