package net.corda.virtualnode.rpcops.common.impl

import net.corda.httprpc.exception.BadRequestException
import net.corda.httprpc.exception.ResourceNotFoundException
import net.corda.virtualnode.ShortHash
import net.corda.virtualnode.ShortHashException
import net.corda.virtualnode.VirtualNodeInfo
import net.corda.virtualnode.read.VirtualNodeInfoReadService

// could be a service

/**
 * Returns the virtual node info by short-hash code, for a given holding identity
 * without starting any bundles or instantiating any classes.
 *
 * Implementation may return null if it is part of a component.
 *
 * Short id can be generated by calling the [HoldingIdentity.shortHash]
 *
 * Returns `null` if no such information exists
 */
fun VirtualNodeInfoReadService.getByHoldingIdentityShortHashOrThrow(holdingIdentityShortHash: ShortHash): VirtualNodeInfo {
    return getByHoldingIdentityShortHash(holdingIdentityShortHash)
        ?: throw ResourceNotFoundException("Virtual Node", holdingIdentityShortHash.value)
}

fun VirtualNodeInfoReadService.getByHoldingIdentityShortHashOrThrow(
    holdingIdentityShortHash: ShortHash,
    message: () -> String
): VirtualNodeInfo {
    return getByHoldingIdentityShortHash(holdingIdentityShortHash) ?: throw ResourceNotFoundException(message())
}

/**
 * Returns the virtual node info by short-hash code, for a given holding identity
 * without starting any bundles or instantiating any classes.
 *
 * Implementation may return null if it is part of a component.
 *
 * Short id can be generated by calling the [HoldingIdentity.shortHash]
 *
 * Returns `null` if no such information exists
 */
fun VirtualNodeInfoReadService.getByHoldingIdentityShortHashOrThrow(holdingIdentityShortHash: String): VirtualNodeInfo {
    val shortHash = ShortHash.ofOrThrow(holdingIdentityShortHash)
    return getByHoldingIdentityShortHash(shortHash) ?: throw ResourceNotFoundException("Virtual Node", shortHash.value)
}

fun VirtualNodeInfoReadService.getByHoldingIdentityShortHashOrThrow(
    holdingIdentityShortHash: String,
    message: () -> String
): VirtualNodeInfo {
    val shortHash = ShortHash.ofOrThrow(holdingIdentityShortHash)
    return getByHoldingIdentityShortHash(shortHash) ?: throw ResourceNotFoundException(message())
}

fun ShortHash.Companion.ofOrThrow(holdingIdentityShortHash: String): ShortHash {
    return try {
        of(holdingIdentityShortHash)
    } catch (e: ShortHashException) {
        throw BadRequestException("Invalid holding identity short hash${e.message?.let { ": $it" }}")
    }
}