import java.util.jar.JarFile

plugins {
    id 'java'
    id 'corda.publish'
    id 'biz.aQute.bnd.builder'
}

compileKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

compileTestKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

configurations {

    bootstrapClasspath {
        transitive = false
    }

    systemPackages {
        transitive = false
    }

}

dependencies {

    //bootstrapClasspath project(":osgi-framework-bootstrap:framework-api")
    bootstrapClasspath "org.apache.felix:org.apache.felix.framework:$felixVersion"
    bootstrapClasspath project(":osgi-framework-bootstrap")

}

Provider<Copy> bundleOSGiDependencies = tasks.register("bundleOSGiDependencies", Copy) {

    // EXECUTION PRIORITY DEFINITION
    // The *Java* and *Java Library* `classes` task runs after `compileJava` and `processResources`
    // providing the `runtimeClasspath` configuration populated with the dependencies
    // declared by in the `dependencies` block.
    // See https://docs.gradle.org/current/userguide/java_plugin.html
    // See https://docs.gradle.org/current/userguide/java_library_plugin.html
    dependsOn([tasks.classes, tasks.processResources])
    // This task runs after the `classes` task and before the `jar` task to select the OSGi bundles needed by the
    // `runtimeClasspath` configuration.

    doLast {
        println "TASK buildOsgiBundles start..."
        // COPY TASK EXTENSION
        // Copies artifacts solved as needed dependencies from the `runtimeClasspath` configuration
        // into the directory `resources/main/bundles` part of the *Java* plugin file topology.
        final def bundlesDir = new File(project.buildDir, "resources/main/bundles")
        // Java plugin task `processResources` skips if it doesn't any resource in the `src/main`,
        // hence force the creation of the expected structure of directories if `bundles` dir doesn't exist.
        if (!bundlesDir.exists()) {
            assert bundlesDir.mkdirs()
        }
        final def runtimeClasspath = configurations.getByName("runtimeClasspath")
        final def systemBundlesFile = new File(project.buildDir, "resources/main/system_bundles")
        from runtimeClasspath
        into bundlesDir

        // SYSTEM BUNDLE CATALOG
        // Artifacts solved as dependencies in the `runtimeClasspath` classpath are scanned to check if those are
        // OSGi bundle.
        final Set<String> systemBundleSet = new TreeSet<>()
        runtimeClasspath.incoming.each { resolvableDependency ->
            resolvableDependency.artifacts.each { resolvedArtifact ->
                final def file = resolvedArtifact.file
                // OSGi bundles must be `.jar` files.
                if (file.name.endsWith(".jar")) {
                    final def jarFile = new JarFile(file)
                    // OSGi bundles must be have `Bundle-SymbolicName` metadata in jar's manifest..
                    if (jarFile.manifest.mainAttributes.getValue("Bundle-SymbolicName") != null) {
                        // Describe the OSGi bundle as resource from the root of the classpath, this stratagem allows
                        // JVM to load it indifferently if the resources are loaded by the file system directly,
                        // or if resources are included in a fat jar.
                        systemBundleSet.add("bundles/${file.name}")
                        println "OSGI Bundle $file.name included as resource."
                    }
                }
            }
        }
        // Write the `system_bundles` catalog as resource.
        systemBundlesFile.withWriter { writer ->
            systemBundleSet.each { line ->
                writer.writeLine(line)
            }
        }
        final def size = systemBundleSet.size()
        println "TASK buildOsgiBundles included $size OSGi bundles in $systemBundlesFile resource."
    }

}

jar {
    dependsOn bundleOSGiDependencies
    from {
        configurations.bootstrapClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'net.corda.osgi.framework.OSGiFrameworkMain'
    }
}

