/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.apis

import net.corda.restclient.models.GenerateCsrWrapperRequest

import net.corda.restclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class CertificateApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * This method gets the certificate chain aliases for a cluster.
         * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service. 
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCertificateClusterUsage(usage: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/certificate/cluster/{usage}".replace("{" + "usage" + "}", "$usage"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method gets the certificate chain in PEM format for a cluster.
         * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service. 
         * @param alias The certificate chain unique alias. 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCertificateClusterUsageAlias(usage: kotlin.String, alias: kotlin.String): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/certificate/cluster/{usage}/{alias}".replace("{" + "usage" + "}", "$usage").replace("{" + "alias" + "}", "$alias"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCertificateGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/certificate/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method gets the certificate chain aliases for a virtual node.
         * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service. 
         * @param holdingidentityid Holding identity ID of the virtual node that owns the certificate. 
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCertificateVnodeHoldingidentityidUsage(usage: kotlin.String, holdingidentityid: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/certificate/vnode/{holdingidentityid}/{usage}".replace("{" + "usage" + "}", "$usage").replace("{" + "holdingidentityid" + "}", "$holdingidentityid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method gets the certificate chain in PEM format for a virtual node.
         * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service. 
         * @param holdingidentityid The certificate holding identity ID 
         * @param alias The certificate chain unique alias. 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCertificateVnodeHoldingidentityidUsageAlias(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/certificate/vnode/{holdingidentityid}/{usage}/{alias}".replace("{" + "usage" + "}", "$usage").replace("{" + "holdingidentityid" + "}", "$holdingidentityid").replace("{" + "alias" + "}", "$alias"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method enables you to generate a certificate signing request (CSR) for a tenant.
         * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST 
         * @param keyid Identifier of the public key that will be included in the certificate 
         * @param generateCsrWrapperRequest requestBody 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postCertificateTenantidKeyid(tenantid: kotlin.String, keyid: kotlin.String, generateCsrWrapperRequest: GenerateCsrWrapperRequest): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = generateCsrWrapperRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/certificate/{tenantid}/{keyid}".replace("{" + "tenantid" + "}", "$tenantid").replace("{" + "keyid" + "}", "$keyid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method imports a certificate chain for a cluster.
         * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service. 
         * @param alias The unique alias under which the certificate chain will be stored (optional)
         * @param certificate  (optional)
         * @return void
        */
        open suspend fun putCertificateClusterUsage(usage: kotlin.String, alias: kotlin.String?, certificate: io.ktor.client.request.forms.InputProvider?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                        formData {
                        alias?.apply { append("alias", alias) }
                        certificate?.apply { append("certificate", certificate) }
                        }

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/certificate/cluster/{usage}".replace("{" + "usage" + "}", "$usage"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method imports a certificate chain for a virtual node.
         * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service. 
         * @param holdingidentityid The certificate holding identity ID 
         * @param alias The unique alias under which the certificate chain will be stored (optional)
         * @param certificate  (optional)
         * @return void
        */
        open suspend fun putCertificateVnodeHoldingidentityidUsage(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String?, certificate: io.ktor.client.request.forms.InputProvider?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                        formData {
                        alias?.apply { append("alias", alias) }
                        certificate?.apply { append("certificate", certificate) }
                        }

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/certificate/vnode/{holdingidentityid}/{usage}".replace("{" + "usage" + "}", "$usage").replace("{" + "holdingidentityid" + "}", "$holdingidentityid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
