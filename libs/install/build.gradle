import aQute.bnd.gradle.Resolve

plugins {
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'corda.common-library'
}

description "Corda CorDapp Installer"

ext {
    cordaDevPreviewVersion = '5.0.0-DevPreview--beta-1631256347020'
}

configurations {
    all {
        resolutionStrategy.dependencySubstitution {
            substitute module("antlr:antlr") using module("antlr:antlr.osgi:$antlrVersion")
            substitute module("org.dom4j:dom4j") using module("org.apache.servicemix.bundles:org.apache.servicemix.bundles.dom4j:$dom4jOsgiVersion")
        }
    }
    cpks {
        canBeConsumed = false
        transitive = false
    }
}

dependencies {
    implementation platform("net.corda:corda-api:$cordaApiVersion")

    implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi"
    implementation "org.slf4j:slf4j-api"
    implementation "net.corda:corda-base"
    implementation "net.corda:corda-crypto"
    implementation "net.corda:corda-packaging"
    implementation "net.corda:corda-serialization"
    implementation project(":libs:crypto:crypto-impl")
    implementation project(":libs:crypto:crypto-internal")
    implementation project(":libs:utilities")

    compileOnly "org.osgi:osgi.annotation"
    compileOnly "org.osgi:osgi.core"
    compileOnly "org.osgi:org.osgi.service.component.annotations"
    compileOnly "org.osgi:org.osgi.service.cm:$osgiCmVersion"
    compileOnly "biz.aQute.bnd:biz.aQute.bndlib:$bndVersion"

    testImplementation project(":libs:crypto:crypto-testkit")
    testImplementation project(":libs:crypto:crypto-impl")

    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation("org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion") {
        exclude group: 'mockito-core'
    }
    testImplementation "org.apache.felix:org.apache.felix.configadmin:$felixConfigAdminVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"

    cpks project(path: 'split-packages-one', configuration: 'cordaCPK')
    cpks project(path: 'split-packages-two', configuration: 'cordaCPK')
    cpks "net.corda:corda-smoketest-linearstate-flow-contracts:$cordaDevPreviewVersion:cordapp@cpk"
    cpks "net.corda:corda-smoketest-linearstate-sample-workflows:$cordaDevPreviewVersion:cordapp@cpk"
    cpks "net.corda:corda-flows:$cordaDevPreviewVersion:cordapp@cpk"
}

tasks.named('jar', Jar) {
    bnd """\
-conditionalpackage: aQute.*
"""
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar
    bundles = files(
        sourceSets.integrationTest.runtimeClasspath,
        configurations.archives.artifacts.files
    )
    bndrun = file('tests.bndrun')
    //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
    System.setProperty("bnd.home.dir", "$rootDir/bnd")
}

tasks.named('check') {
    dependsOn resolve
}

tasks.named('test', Test) {
    inputs.files configurations.cpks
    classpath += files(tasks.named('jar', Jar))

    doFirst {
        configurations.cpks.forEach { cpk ->
            String key
            if (cpk.name.contains('contracts')) {
                key = 'contract'
            } else if (cpk.name.contains('workflows')) {
                key = 'workflow'
            } else if (cpk.name.contains('split-packages-one')) {
                key = 'split1'
            } else if (cpk.name.contains('split-packages-two')) {
                key = 'split2'
            } else {
                key = 'flows'
            }
            systemProperty "test.cpk.$key", cpk
        }
    }
}
