/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class RBACRoleApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * This method removes the specified permission from the specified role.
     * @param roleid Identifier for an existing role
     * @param permissionid Identifier for an existing permission
     * @return net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteRoleRoleidPermissionPermissionid(roleid: kotlin.String, permissionid: kotlin.String) : net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType {
        val localVarResponse = deleteRoleRoleidPermissionPermissionidWithHttpInfo(roleid = roleid, permissionid = permissionid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method removes the specified permission from the specified role.
     * @param roleid Identifier for an existing role
     * @param permissionid Identifier for an existing permission
     * @return ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteRoleRoleidPermissionPermissionidWithHttpInfo(roleid: kotlin.String, permissionid: kotlin.String) : ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?> {
        val localVariableConfig = deleteRoleRoleidPermissionPermissionidRequestConfig(roleid = roleid, permissionid = permissionid)

        return request<Unit, net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteRoleRoleidPermissionPermissionid
     *
     * @param roleid Identifier for an existing role
     * @param permissionid Identifier for an existing permission
     * @return RequestConfig
     */
    fun deleteRoleRoleidPermissionPermissionidRequestConfig(roleid: kotlin.String, permissionid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/role/{roleid}/permission/{permissionid}".replace("{"+"roleid"+"}", encodeURIComponent(roleid.toString())).replace("{"+"permissionid"+"}", encodeURIComponent(permissionid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns an array with information about all roles in the permission system.
     * @return kotlin.collections.Set<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRole() : kotlin.collections.Set<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType> {
        val localVarResponse = getRoleWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns an array with information about all roles in the permission system.
     * @return ApiResponse<kotlin.collections.Set<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRoleWithHttpInfo() : ApiResponse<kotlin.collections.Set<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>?> {
        val localVariableConfig = getRoleRequestConfig()

        return request<Unit, kotlin.collections.Set<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRole
     *
     * @return RequestConfig
     */
    fun getRoleRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/role",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRoleGetprotocolversion() : kotlin.Int {
        val localVarResponse = getRoleGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRoleGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getRoleGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRoleGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getRoleGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/role/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method gets the details of a role specified by its ID.
     * @param id ID of the role to be returned.
     * @return net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRoleId(id: kotlin.String) : net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType {
        val localVarResponse = getRoleIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method gets the details of a role specified by its ID.
     * @param id ID of the role to be returned.
     * @return ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRoleIdWithHttpInfo(id: kotlin.String) : ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?> {
        val localVariableConfig = getRoleIdRequestConfig(id = id)

        return request<Unit, net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRoleId
     *
     * @param id ID of the role to be returned.
     * @return RequestConfig
     */
    fun getRoleIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/role/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * The method creates a new role in the RBAC permission system.
     * @param netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType requestBody
     * @return net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postRole(netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType: net.corda.libs.permissions.endpoints.v1.role.types.CreateRoleType) : net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType {
        val localVarResponse = postRoleWithHttpInfo(netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType = netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * The method creates a new role in the RBAC permission system.
     * @param netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType requestBody
     * @return ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postRoleWithHttpInfo(netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType: net.corda.libs.permissions.endpoints.v1.role.types.CreateRoleType) : ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?> {
        val localVariableConfig = postRoleRequestConfig(netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType = netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType)

        return request<net.corda.libs.permissions.endpoints.v1.role.types.CreateRoleType, net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postRole
     *
     * @param netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType requestBody
     * @return RequestConfig
     */
    fun postRoleRequestConfig(netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType: net.corda.libs.permissions.endpoints.v1.role.types.CreateRoleType) : RequestConfig<net.corda.libs.permissions.endpoints.v1.role.types.CreateRoleType> {
        val localVariableBody = netCordaLibsPermissionsEndpointsV1RoleTypesCreateRoleType
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/role",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method adds the specified permission to the specified role.
     * @param roleid Identifier for an existing role
     * @param permissionid Identifier for an existing permission
     * @return net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putRoleRoleidPermissionPermissionid(roleid: kotlin.String, permissionid: kotlin.String) : net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType {
        val localVarResponse = putRoleRoleidPermissionPermissionidWithHttpInfo(roleid = roleid, permissionid = permissionid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method adds the specified permission to the specified role.
     * @param roleid Identifier for an existing role
     * @param permissionid Identifier for an existing permission
     * @return ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun putRoleRoleidPermissionPermissionidWithHttpInfo(roleid: kotlin.String, permissionid: kotlin.String) : ApiResponse<net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType?> {
        val localVariableConfig = putRoleRoleidPermissionPermissionidRequestConfig(roleid = roleid, permissionid = permissionid)

        return request<Unit, net.corda.libs.permissions.endpoints.v1.role.types.RoleResponseType>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putRoleRoleidPermissionPermissionid
     *
     * @param roleid Identifier for an existing role
     * @param permissionid Identifier for an existing permission
     * @return RequestConfig
     */
    fun putRoleRoleidPermissionPermissionidRequestConfig(roleid: kotlin.String, permissionid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/role/{roleid}/permission/{permissionid}".replace("{"+"roleid"+"}", encodeURIComponent(roleid.toString())).replace("{"+"permissionid"+"}", encodeURIComponent(permissionid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
