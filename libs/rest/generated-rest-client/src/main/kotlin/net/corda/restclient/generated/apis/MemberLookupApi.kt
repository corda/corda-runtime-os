/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class MemberLookupApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMembersGetprotocolversion() : kotlin.Int {
        val localVarResponse = getMembersGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMembersGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getMembersGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMembersGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getMembersGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/members/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method retrieves a list of all active and pending members in the membership group.
     * @param holdingidentityshorthash Holding identity ID of the requesting member. The result only contains members that are visible to this member
     * @param cn Common Name (CN) attribute of the X.500 name to filter members by (optional)
     * @param o Organization (O) attribute of the X.500 name to filter members by (optional)
     * @param ou Organization Unit (OU) attribute of the X.500 name to filter members by (optional)
     * @param l Locality (L) attribute of the X.500 name to filter members by (optional)
     * @param st State (ST) attribute of the X.500 name to filter members by (optional)
     * @param c Country (C) attribute of the X.500 name to filter members by (optional)
     * @param statuses List of statuses (\&quot;ACTIVE\&quot;, \&quot;SUSPENDED\&quot;) to filter members by. By default, only ACTIVE members are filtered. An MGM can view all suspended members. A regular member cannot view other suspended members, but can view itself in any status (e.g. even if it&#39;s suspended). (optional)
     * @return net.corda.membership.rest.v1.types.response.RestMemberInfoList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMembersHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, cn: kotlin.String? = null, o: kotlin.String? = null, ou: kotlin.String? = null, l: kotlin.String? = null, st: kotlin.String? = null, c: kotlin.String? = null, statuses: kotlin.collections.List<kotlin.String>? = null) : net.corda.membership.rest.v1.types.response.RestMemberInfoList {
        val localVarResponse = getMembersHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash, cn = cn, o = o, ou = ou, l = l, st = st, c = c, statuses = statuses)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.membership.rest.v1.types.response.RestMemberInfoList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method retrieves a list of all active and pending members in the membership group.
     * @param holdingidentityshorthash Holding identity ID of the requesting member. The result only contains members that are visible to this member
     * @param cn Common Name (CN) attribute of the X.500 name to filter members by (optional)
     * @param o Organization (O) attribute of the X.500 name to filter members by (optional)
     * @param ou Organization Unit (OU) attribute of the X.500 name to filter members by (optional)
     * @param l Locality (L) attribute of the X.500 name to filter members by (optional)
     * @param st State (ST) attribute of the X.500 name to filter members by (optional)
     * @param c Country (C) attribute of the X.500 name to filter members by (optional)
     * @param statuses List of statuses (\&quot;ACTIVE\&quot;, \&quot;SUSPENDED\&quot;) to filter members by. By default, only ACTIVE members are filtered. An MGM can view all suspended members. A regular member cannot view other suspended members, but can view itself in any status (e.g. even if it&#39;s suspended). (optional)
     * @return ApiResponse<net.corda.membership.rest.v1.types.response.RestMemberInfoList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMembersHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash: kotlin.String, cn: kotlin.String?, o: kotlin.String?, ou: kotlin.String?, l: kotlin.String?, st: kotlin.String?, c: kotlin.String?, statuses: kotlin.collections.List<kotlin.String>?) : ApiResponse<net.corda.membership.rest.v1.types.response.RestMemberInfoList?> {
        val localVariableConfig = getMembersHoldingidentityshorthashRequestConfig(holdingidentityshorthash = holdingidentityshorthash, cn = cn, o = o, ou = ou, l = l, st = st, c = c, statuses = statuses)

        return request<Unit, net.corda.membership.rest.v1.types.response.RestMemberInfoList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMembersHoldingidentityshorthash
     *
     * @param holdingidentityshorthash Holding identity ID of the requesting member. The result only contains members that are visible to this member
     * @param cn Common Name (CN) attribute of the X.500 name to filter members by (optional)
     * @param o Organization (O) attribute of the X.500 name to filter members by (optional)
     * @param ou Organization Unit (OU) attribute of the X.500 name to filter members by (optional)
     * @param l Locality (L) attribute of the X.500 name to filter members by (optional)
     * @param st State (ST) attribute of the X.500 name to filter members by (optional)
     * @param c Country (C) attribute of the X.500 name to filter members by (optional)
     * @param statuses List of statuses (\&quot;ACTIVE\&quot;, \&quot;SUSPENDED\&quot;) to filter members by. By default, only ACTIVE members are filtered. An MGM can view all suspended members. A regular member cannot view other suspended members, but can view itself in any status (e.g. even if it&#39;s suspended). (optional)
     * @return RequestConfig
     */
    fun getMembersHoldingidentityshorthashRequestConfig(holdingidentityshorthash: kotlin.String, cn: kotlin.String?, o: kotlin.String?, ou: kotlin.String?, l: kotlin.String?, st: kotlin.String?, c: kotlin.String?, statuses: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (cn != null) {
                    put("cn", listOf(cn.toString()))
                }
                if (o != null) {
                    put("o", listOf(o.toString()))
                }
                if (ou != null) {
                    put("ou", listOf(ou.toString()))
                }
                if (l != null) {
                    put("l", listOf(l.toString()))
                }
                if (st != null) {
                    put("st", listOf(st.toString()))
                }
                if (c != null) {
                    put("c", listOf(c.toString()))
                }
                if (statuses != null) {
                    put("statuses", toMultiValue(statuses.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/members/{holdingidentityshorthash}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method retrieves the group parameters of the membership group.
     * @param holdingidentityshorthash Holding identity ID of the requesting member. The result contains group parameters visible to this member.
     * @return net.corda.membership.rest.v1.types.RestGroupParameters
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMembersHoldingidentityshorthashGroupParameters(holdingidentityshorthash: kotlin.String) : net.corda.membership.rest.v1.types.RestGroupParameters {
        val localVarResponse = getMembersHoldingidentityshorthashGroupParametersWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.membership.rest.v1.types.RestGroupParameters
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method retrieves the group parameters of the membership group.
     * @param holdingidentityshorthash Holding identity ID of the requesting member. The result contains group parameters visible to this member.
     * @return ApiResponse<net.corda.membership.rest.v1.types.RestGroupParameters?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMembersHoldingidentityshorthashGroupParametersWithHttpInfo(holdingidentityshorthash: kotlin.String) : ApiResponse<net.corda.membership.rest.v1.types.RestGroupParameters?> {
        val localVariableConfig = getMembersHoldingidentityshorthashGroupParametersRequestConfig(holdingidentityshorthash = holdingidentityshorthash)

        return request<Unit, net.corda.membership.rest.v1.types.RestGroupParameters>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMembersHoldingidentityshorthashGroupParameters
     *
     * @param holdingidentityshorthash Holding identity ID of the requesting member. The result contains group parameters visible to this member.
     * @return RequestConfig
     */
    fun getMembersHoldingidentityshorthashGroupParametersRequestConfig(holdingidentityshorthash: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/members/{holdingidentityshorthash}/group-parameters".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
