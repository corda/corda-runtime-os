plugins {
    id 'org.jetbrains.kotlin.jvm'
}

description 'Worker Smoketests'

configurations {
    cpis {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV1 {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV2 {
        canBeConsumed = false
        transitive = false
    }
}

sourceSets {
    smokeTest {
        java {
            srcDirs += [ 'src/smokeTest/java' ]
        }
        kotlin {
            srcDirs += [ 'src/smokeTest/kotlin' ]
        }
        resources {
            srcDirs = [ 'src/smokeTest/resources' ]
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

kotlin {
    target {
        java
        compilations.smokeTest {
            associateWith compilations.main
            associateWith compilations.test

            configurations {
                smokeTestApi.extendsFrom testApi
                smokeTestImplementation.extendsFrom testImplementation
                smokeTestRuntimeOnly.extendsFrom testRuntimeOnly
            }
        }
    }
}

dependencies {
    // NO CORDA DEPENDENCIES!!
    smokeTestImplementation "net.corda:corda-avro-schema:$cordaApiVersion"
    // Avoid having the schema names and keys scattered across projects
    smokeTestImplementation "net.corda:corda-config-schema:$cordaApiVersion"

    // But building a cpb for use in a test is ok.
    cpis project(path: ':notary-plugins:notary-plugin-non-validating:notary-plugin-non-validating-server', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:test-cordapp', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-consensual-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-utxo-demo-app', configuration: 'cordaCPB')
    upgradeTestingCpiV1 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v1', configuration: 'cordaCPB')
    upgradeTestingCpiV2 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v2', configuration: 'cordaCPB')

    smokeTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    smokeTestImplementation "org.slf4j:slf4j-api:$slf4jVersion"

    smokeTestImplementation project(':components:flow:flow-rest-resource-service')
    smokeTestImplementation project(':libs:crypto:crypto-core')
    // TODO: this reference is only to get the serialialiser. I don't think this should be in the
    //  messagebus project.
    smokeTestImplementation project(":libs:messaging:kafka-message-bus-impl")
    smokeTestImplementation project(":libs:schema-registry:schema-registry")
    smokeTestImplementation project(":libs:schema-registry:schema-registry-impl")
    smokeTestImplementation project(":libs:serialization:serialization-avro")
    smokeTestImplementation project(':testing:e2e-test-utilities')
    smokeTestImplementation project(":testing:packaging-test-utilities")
    smokeTestImplementation project(':testing:test-utilities')
    smokeTestImplementation project(":testing:uniqueness:uniqueness-utilities")
    smokeTestImplementation libs.bundles.test
    smokeTestRuntimeOnly libs.bundles.test.runtime
    smokeTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
}

def smokeTestResources = tasks.named('processSmokeTestResources', ProcessResources) {
    from(configurations.cpis) {
        into 'META-INF'
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "\$1\$3"
    }

    // These CPBs need to have the same name as the main test-cordapp because they test force-upload to overwrite existing CPIs.

    // Put the test cordapp for upgrade testing (v1) into a folder
    def upgradeTestingCpiV1 = configurations.upgradeTestingCpiV1
    def upgradeTestingCpiV1Dir = "META-INF" + File.separator + "upgrade-testing-v1"
    from(upgradeTestingCpiV1) {
        into upgradeTestingCpiV1Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
    // Put the test cordapp for upgrade testing (v2) into a folder
    def upgradeTestingCpiV2 = configurations.upgradeTestingCpiV2
    def upgradeTestingCpiV2Dir = "META-INF" + File.separator + "upgrade-testing-v2"
    from(upgradeTestingCpiV2) {
        into upgradeTestingCpiV2Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
}

tasks.register('smokeTest', Test) {
    description = "Runs smoke tests."
    group = "verification"

    dependsOn smokeTestResources

    testClassesDirs = project.sourceSets["smokeTest"].output.classesDirs
    classpath = project.sourceSets["smokeTest"].runtimeClasspath

    def combinedWorker = project.getProperties().getOrDefault("isCombinedWorker", true).toBoolean()
    println "Running tests against ${ combinedWorker ? "combined worker" : "Kubernetes cluster" }"

    // Note these port values have to match what is setup as part of port forwarding at cluster bootstrap time.
    // E.g. during Jenkins pipeline setup.
    def combinedWorkerUrl = "http://localhost:7004/"
    def cryptoWorkerUrl = project.getProperties().getOrDefault("cryptoWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7001/")
    systemProperty "cryptoWorkerUrl", cryptoWorkerUrl
    println "Crypto worker url: $cryptoWorkerUrl"
    def restWorkerUrl = project.getProperties().getOrDefault("restWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7002/")
    systemProperty "restWorkerUrl", restWorkerUrl
    println "REST worker url: $restWorkerUrl"
    def flowWorkerUrl = project.getProperties().getOrDefault("flowWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7003/")
    systemProperty "flowWorkerUrl",flowWorkerUrl
    println "Flow worker url: $flowWorkerUrl"
    def flowMapperWorkerUrl = project.getProperties().getOrDefault("flowMapperWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7004/")
    systemProperty "flowMapperWorkerUrl", flowMapperWorkerUrl
    println "Flow Mapper worker url: $flowMapperWorkerUrl"
    def verificationWorkerUrl  = project.getProperties().getOrDefault("verificationWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7005/")
    systemProperty "verificationWorkerUrl", verificationWorkerUrl
    println "Verification worker url: $verificationWorkerUrl"
    def dbWorkerUrl = project.getProperties().getOrDefault("dbWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7006/")
    systemProperty "dbWorkerUrl", dbWorkerUrl
    println "DB worker url: $dbWorkerUrl"
    def persistenceWorkerUrl = project.getProperties().getOrDefault("persistenceWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7007/")
    systemProperty "persistenceWorkerUrl", persistenceWorkerUrl
    def tokenSelectionWorkerUrl = project.getProperties().getOrDefault("tokenSelectionWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7008/")
    systemProperty "tokenSelectionWorkerUrl", tokenSelectionWorkerUrl
    println "tokenSelection worker url: $tokenSelectionWorkerUrl"
    def uniquenessWorkerUrl = project.getProperties().getOrDefault("uniquenessWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7009/")
    systemProperty "uniquenessWorkerUrl", uniquenessWorkerUrl

    jvmArgs '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'

    systemProperties([
            // Configuration parameters to execute top-level classes in parallel but methods in same thread
            'junit.jupiter.execution.parallel.enabled'                 : 'true',
            'junit.jupiter.execution.parallel.mode.default'            : 'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
    ])
}
