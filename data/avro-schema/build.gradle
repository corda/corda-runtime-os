import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask
import groovy.io.FileType
import groovy.text.SimpleTemplateEngine

plugins {
    id 'corda.publish'
    id 'corda.common-library'
    id "com.github.davidmc24.gradle.plugin.avro-base" version "$avroGradlePluginVersion"
}

dependencies {
    implementation "net.corda:corda-base:$cordaVersion"
    api "org.apache.avro:avro:$avroVersion"
}

description 'Data Model Definitions'

def generatedPackageInfoDir = "src/main/java"

sourceSets.main.java.srcDirs generatedPackageInfoDir

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    group = "codeGeneration"
    source("src/main/resources/avro")
    outputDir = file(generatedPackageInfoDir)
}
assemble.dependsOn generateAvro

// region Generate package-info.java
// The following code ensures that we have a `package-info.java` for every package that we
// generate through Avro

def generateOSGiPackageInfo = tasks.register("generateOSGiPackageInfo", Task) {
    group = "codeGeneration"
    def packages = [] as Set
    file(generatedPackageInfoDir).eachFileRecurse(FileType.FILES) {
        if (!it.name.contains("package-info") && it.name.endsWith('.java')) {
            packages << ((it.text =~ "package (.+);")[0][1])
        }
    }

    packages.each {
        def dir = "$generatedPackageInfoDir/${it.replaceAll(/\./, '/')}"
        def outputFile = file(dir + '/package-info.java').newWriter()
        outputFile << applyPackageInfoTemplate(it)
        outputFile.close()
    }
    dependsOn(generateAvro)
}
assemble.dependsOn generateOSGiPackageInfo

private static String applyPackageInfoTemplate(packageName) {
    def engine = new SimpleTemplateEngine()
    def templateText =
            """/**
 * Autogenerated by R3
 *
 * DO NOT EDIT DIRECTLY
 */
@Export
package $packageName;

import org.osgi.annotation.bundle.Export;
"""
    def templateParams = ['packageName': packageName]
    engine.createTemplate(templateText).make(templateParams).toString()
}
// endregion

