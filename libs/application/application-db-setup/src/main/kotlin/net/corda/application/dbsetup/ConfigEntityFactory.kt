package net.corda.application.dbsetup

import com.typesafe.config.ConfigRenderOptions
import net.corda.crypto.config.impl.createCryptoSmartConfigFactory
import net.corda.crypto.config.impl.createDefaultCryptoConfig
import net.corda.crypto.core.aes.KeyCredentials
import net.corda.db.core.DbPrivilege
import net.corda.libs.configuration.datamodel.ConfigEntity
import net.corda.libs.configuration.datamodel.DbConnectionConfig
import net.corda.libs.configuration.secret.EncryptionSecretsServiceImpl
import net.corda.libs.configuration.secret.SecretsCreateService
import net.corda.schema.configuration.ConfigKeys
import org.slf4j.LoggerFactory
import java.security.SecureRandom
import java.time.Instant
import java.util.*

class ConfigEntityFactory(
    private val secretsSalt: String,
    private val secretsPassphrase: String,
) {
    companion object {
        private val log = LoggerFactory.getLogger(this::class.java.enclosingClass)
    }

    fun createConfiguration(
        connectionName: String,
        username: String,
        password: String,
        jdbcUrl: String,
        privilege: DbPrivilege
    ): DbConnectionConfig {
        log.info("Initialise configuration for $connectionName ($jdbcUrl).")
        val secretsService = EncryptionSecretsServiceImpl(secretsPassphrase, secretsSalt)

        return DbConnectionConfig(
            id = UUID.randomUUID(),
            name = connectionName,
            privilege = privilege,
            updateTimestamp = Instant.now(),
            updateActor = "Setup Script",
            description = "Initial configuration - autogenerated by setup script",
            config = createDbConfig(jdbcUrl, username, password, secretsService)
        ).also { it.version = 0 }
    }

    fun createCryptoConfig(): ConfigEntity {
        val random = SecureRandom()
        val config = createCryptoSmartConfigFactory(
            KeyCredentials(
                salt = secretsSalt,
                passphrase = secretsPassphrase
            )
        ).createDefaultCryptoConfig(
            KeyCredentials(
                passphrase = random.randomString(),
                salt = random.randomString()
            )
        ).root().render(ConfigRenderOptions.concise())

        return ConfigEntity(
            section = ConfigKeys.CRYPTO_CONFIG,
            config = config,
            schemaVersionMajor = 1,
            schemaVersionMinor = 0,
            updateTimestamp = Instant.now(),
            updateActor = "init",
            isDeleted = false
        ).apply {
            version = 0
        }
    }

    private fun createDbConfig(
        jdbcUrl: String,
        username: String,
        password: String,
        secretsService: SecretsCreateService
    ): String {
        return "{\"database\":{" +
                "\"jdbc\":" +
                "{\"url\":\"$jdbcUrl\"}," +
                "\"pass\":${createSecureConfig(secretsService, password)}," +
                "\"user\":\"$username\"}}"
    }

    private fun createSecureConfig(secretsService: SecretsCreateService, value: String): String {
        return secretsService.createValue(value).root().render(ConfigRenderOptions.concise())
    }

    private fun SecureRandom.randomString(length: Int = 32): String = ByteArray(length).let {
        this.nextBytes(it)
        Base64.getEncoder().encodeToString(it)
    }
}