/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroEnvelope extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3423238542708684631L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroEnvelope\",\"namespace\":\"net.corda.data\",\"fields\":[{\"name\":\"magic\",\"type\":{\"type\":\"fixed\",\"name\":\"Magic\",\"size\":8}},{\"name\":\"fingerprint\",\"type\":{\"type\":\"fixed\",\"name\":\"Fingerprint\",\"size\":32}},{\"name\":\"flags\",\"type\":\"int\"},{\"name\":\"payload\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroEnvelope> ENCODER =
      new BinaryMessageEncoder<AvroEnvelope>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroEnvelope> DECODER =
      new BinaryMessageDecoder<AvroEnvelope>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroEnvelope> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroEnvelope> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroEnvelope> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroEnvelope>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroEnvelope to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroEnvelope from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroEnvelope instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroEnvelope fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private net.corda.data.Magic magic;
   private net.corda.data.Fingerprint fingerprint;
   private int flags;
   private java.nio.ByteBuffer payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroEnvelope() {}

  /**
   * All-args constructor.
   * @param magic The new value for magic
   * @param fingerprint The new value for fingerprint
   * @param flags The new value for flags
   * @param payload The new value for payload
   */
  public AvroEnvelope(net.corda.data.Magic magic, net.corda.data.Fingerprint fingerprint, java.lang.Integer flags, java.nio.ByteBuffer payload) {
    this.magic = magic;
    this.fingerprint = fingerprint;
    this.flags = flags;
    this.payload = payload;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return magic;
    case 1: return fingerprint;
    case 2: return flags;
    case 3: return payload;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: magic = (net.corda.data.Magic)value$; break;
    case 1: fingerprint = (net.corda.data.Fingerprint)value$; break;
    case 2: flags = (java.lang.Integer)value$; break;
    case 3: payload = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'magic' field.
   * @return The value of the 'magic' field.
   */
  public net.corda.data.Magic getMagic() {
    return magic;
  }


  /**
   * Sets the value of the 'magic' field.
   * @param value the value to set.
   */
  public void setMagic(net.corda.data.Magic value) {
    this.magic = value;
  }

  /**
   * Gets the value of the 'fingerprint' field.
   * @return The value of the 'fingerprint' field.
   */
  public net.corda.data.Fingerprint getFingerprint() {
    return fingerprint;
  }


  /**
   * Sets the value of the 'fingerprint' field.
   * @param value the value to set.
   */
  public void setFingerprint(net.corda.data.Fingerprint value) {
    this.fingerprint = value;
  }

  /**
   * Gets the value of the 'flags' field.
   * @return The value of the 'flags' field.
   */
  public int getFlags() {
    return flags;
  }


  /**
   * Sets the value of the 'flags' field.
   * @param value the value to set.
   */
  public void setFlags(int value) {
    this.flags = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.nio.ByteBuffer getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.nio.ByteBuffer value) {
    this.payload = value;
  }

  /**
   * Creates a new AvroEnvelope RecordBuilder.
   * @return A new AvroEnvelope RecordBuilder
   */
  public static net.corda.data.AvroEnvelope.Builder newBuilder() {
    return new net.corda.data.AvroEnvelope.Builder();
  }

  /**
   * Creates a new AvroEnvelope RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroEnvelope RecordBuilder
   */
  public static net.corda.data.AvroEnvelope.Builder newBuilder(net.corda.data.AvroEnvelope.Builder other) {
    if (other == null) {
      return new net.corda.data.AvroEnvelope.Builder();
    } else {
      return new net.corda.data.AvroEnvelope.Builder(other);
    }
  }

  /**
   * Creates a new AvroEnvelope RecordBuilder by copying an existing AvroEnvelope instance.
   * @param other The existing instance to copy.
   * @return A new AvroEnvelope RecordBuilder
   */
  public static net.corda.data.AvroEnvelope.Builder newBuilder(net.corda.data.AvroEnvelope other) {
    if (other == null) {
      return new net.corda.data.AvroEnvelope.Builder();
    } else {
      return new net.corda.data.AvroEnvelope.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroEnvelope instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroEnvelope>
    implements org.apache.avro.data.RecordBuilder<AvroEnvelope> {

    private net.corda.data.Magic magic;
    private net.corda.data.Fingerprint fingerprint;
    private int flags;
    private java.nio.ByteBuffer payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.data.AvroEnvelope.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.magic)) {
        this.magic = data().deepCopy(fields()[0].schema(), other.magic);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fingerprint)) {
        this.fingerprint = data().deepCopy(fields()[1].schema(), other.fingerprint);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.flags)) {
        this.flags = data().deepCopy(fields()[2].schema(), other.flags);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroEnvelope instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.data.AvroEnvelope other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.magic)) {
        this.magic = data().deepCopy(fields()[0].schema(), other.magic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fingerprint)) {
        this.fingerprint = data().deepCopy(fields()[1].schema(), other.fingerprint);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.flags)) {
        this.flags = data().deepCopy(fields()[2].schema(), other.flags);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'magic' field.
      * @return The value.
      */
    public net.corda.data.Magic getMagic() {
      return magic;
    }


    /**
      * Sets the value of the 'magic' field.
      * @param value The value of 'magic'.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder setMagic(net.corda.data.Magic value) {
      validate(fields()[0], value);
      this.magic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'magic' field has been set.
      * @return True if the 'magic' field has been set, false otherwise.
      */
    public boolean hasMagic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'magic' field.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder clearMagic() {
      magic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fingerprint' field.
      * @return The value.
      */
    public net.corda.data.Fingerprint getFingerprint() {
      return fingerprint;
    }


    /**
      * Sets the value of the 'fingerprint' field.
      * @param value The value of 'fingerprint'.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder setFingerprint(net.corda.data.Fingerprint value) {
      validate(fields()[1], value);
      this.fingerprint = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fingerprint' field has been set.
      * @return True if the 'fingerprint' field has been set, false otherwise.
      */
    public boolean hasFingerprint() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fingerprint' field.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder clearFingerprint() {
      fingerprint = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'flags' field.
      * @return The value.
      */
    public int getFlags() {
      return flags;
    }


    /**
      * Sets the value of the 'flags' field.
      * @param value The value of 'flags'.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder setFlags(int value) {
      validate(fields()[2], value);
      this.flags = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'flags' field has been set.
      * @return True if the 'flags' field has been set, false otherwise.
      */
    public boolean hasFlags() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'flags' field.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder clearFlags() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder setPayload(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.payload = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public net.corda.data.AvroEnvelope.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroEnvelope build() {
      try {
        AvroEnvelope record = new AvroEnvelope();
        record.magic = fieldSetFlags()[0] ? this.magic : (net.corda.data.Magic) defaultValue(fields()[0]);
        record.fingerprint = fieldSetFlags()[1] ? this.fingerprint : (net.corda.data.Fingerprint) defaultValue(fields()[1]);
        record.flags = fieldSetFlags()[2] ? this.flags : (java.lang.Integer) defaultValue(fields()[2]);
        record.payload = fieldSetFlags()[3] ? this.payload : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroEnvelope>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroEnvelope>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroEnvelope>
    READER$ = (org.apache.avro.io.DatumReader<AvroEnvelope>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeFixed(this.magic.bytes(), 0, 8);

    out.writeFixed(this.fingerprint.bytes(), 0, 32);

    out.writeInt(this.flags);

    out.writeBytes(this.payload);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.magic == null) {
        this.magic = new net.corda.data.Magic();
      }
      in.readFixed(this.magic.bytes(), 0, 8);

      if (this.fingerprint == null) {
        this.fingerprint = new net.corda.data.Fingerprint();
      }
      in.readFixed(this.fingerprint.bytes(), 0, 32);

      this.flags = in.readInt();

      this.payload = in.readBytes(this.payload);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.magic == null) {
            this.magic = new net.corda.data.Magic();
          }
          in.readFixed(this.magic.bytes(), 0, 8);
          break;

        case 1:
          if (this.fingerprint == null) {
            this.fingerprint = new net.corda.data.Fingerprint();
          }
          in.readFixed(this.fingerprint.bytes(), 0, 32);
          break;

        case 2:
          this.flags = in.readInt();
          break;

        case 3:
          this.payload = in.readBytes(this.payload);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










