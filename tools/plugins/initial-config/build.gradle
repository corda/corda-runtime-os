plugins{
    id 'distribution'
    id 'org.jetbrains.kotlin.kapt'
    id 'java-library'
    id 'idea'
    id 'io.gitlab.arturbosch.detekt'
    id 'jacoco'
}

version rootProject.version
group 'net.corda.cli.deployment'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    implementation platform("net.corda:corda-api:$cordaApiVersion")

    compileOnly "org.pf4j:pf4j:$pf4jVersion"
    kapt "org.pf4j:pf4j:$pf4jVersion"
    kapt "info.picocli:picocli-codegen:$picoCliVersion"
    
    compile project(":libs:permissions:permission-datamodel")
    compile project(":libs:permissions:permission-password")
    compile project(":libs:configuration:configuration-datamodel")
    compile project(":libs:configuration:configuration-core")
    compile project(":libs:db:db-core")
    compileOnly "net.corda.cli.host:api:$pluginHostVersion"

    testImplementation "org.pf4j:pf4j:${pf4jVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit5Version"
    testImplementation "com.github.stefanbirkner:system-lambda:$systemLambdaVersion"
    testCompile(group: 'net.corda.cli.host', name: 'api', version: "$pluginHostVersion")
}

test {
    useJUnitPlatform()
}

def pluginJar = tasks.named('jar', Jar) {
    manifest {
        attributes['Plugin-Class'] = pluginClass
        attributes['Plugin-Id'] = pluginId
        attributes['Plugin-Version'] = version
        attributes['Plugin-Provider'] = pluginProvider
        attributes['Plugin-Description'] = pluginDescription
    }
}

// the plugin task will put the files into a zip file
def plugin = tasks.register('plugin', Zip) {
    archiveBaseName = "plugin-$pluginId-$version"
    archiveExtension = 'zip'

    // first taking the classes generated by the jar task
    into('classes') {
        with pluginJar.get()
    }
    // and then we also need to include any libraries that are needed by the plugin
    dependsOn configurations.runtimeClasspath.buildDependencies
    into('lib') {
        from configurations.runtimeClasspath.filter { it.name.endsWith('jar')}
    }
}

tasks.register('movePlugin', Copy) {
    from plugin
    into "$buildDir/plugin"
}

tasks.named('assemble'){
    dependsOn movePlugin
}

artifacts {
    archives plugin
}

