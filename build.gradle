import static org.gradle.api.JavaVersion.VERSION_11

buildscript {
    configurations.classpath {
        resolutionStrategy {
            // FORCE Gradle to use latest dynamic-version plugins.
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    ext {
        // Remember where our Java executable lives (until Bnd supports Gradle toolchains).
        javaExecutable = file("${System.getProperty('java.home')}/bin/java")

        // Create another Quasar property in this repository's chosen format.
        quasarVersion = quasar_version
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.allopen' apply false
    id 'org.jetbrains.kotlin.plugin.noarg' apply false
    id 'io.gitlab.arturbosch.detekt' apply false
    id 'idea'
    id 'application'
    id 'net.corda.cordapp.cordapp-configuration'
    id 'com.r3.internal.gradle.plugins.r3ArtifactoryPublish'
    id 'maven-publish'
    id 'jacoco'
}

wrapper {
    gradleVersion = '7.1.1'
    distributionType = Wrapper.DistributionType.BIN
    distributionUrl="https://gradleproxy:gradleproxy@software.r3.com/artifactory/gradle-proxy/gradle-$gradleVersion-bin.zip"
}

def javaVersion = VERSION_11

allprojects {
    if (!project.hasProperty('cordaArtifactoryUsername')) {
        ext.cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME')
    }

    if (!project.hasProperty('cordaArtifactoryPassword')) {
        ext.cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
    }

    apply plugin: 'org.jetbrains.kotlin.jvm'

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = 'UTF-8'
        options.compilerArgs += [ '-XDenableSunApiLintControl', '-parameters' ]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            allWarningsAsErrors = true
            languageVersion = '1.4'
            apiVersion = '1.4'
            jvmTarget = javaVersion
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                    // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                    "-Xskip-runtime-version-check",
                    "-java-parameters",
                    "-Xjvm-default=all"
            ]
        }
    }

    configurations {
        all {
            [ compileClasspath, testCompileClasspath, runtimeClasspath, testRuntimeClasspath ].forEach { cfg ->
                configureKotlinForOSGi(cfg)
            }
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }

    tasks.register('compileAll') { task ->
        description = "Compiles all the Kotlin and Java classes, including all of the test classes."
        group = "verification"

        task.dependsOn tasks.withType(AbstractCompile)
    }

    repositories {
        // TODO: you really need to use the cache, otherwise no complaining when upstream repos throttle us!
        // It would make sense to follow the template!

        // Listed the mavenLocal repository first in case people are doing a local publication of an upstream
        //  module (e.g in corda-api repo).
        //  This would ensure that the local copy is picked up if it is available.
        mavenLocal()

        //repo for CI builds,
        maven {
            url = "$artifactoryContextUrl/corda-ent-maven-unstable"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
        //repo for dev builds
        maven {
            url = "$artifactoryContextUrl/corda-ent-maven-dev"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
        //needed for kotlin osgi bundles generated by us
        maven {
            url = "$artifactoryContextUrl/corda-dependencies"
        }
        //needed for C5 binaries
        maven {
            url = "$artifactoryContextUrl/corda-os-maven-unstable"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
        mavenCentral()
        //TODO remove this when we can as its only needed for kotlinx-html-jvm
        jcenter()
    }

    sourceSets {
        integrationTest {
            java {
                srcDirs += [ 'src/integration-test/java' ]
            }
            kotlin {
                srcDirs += [ 'src/integration-test/kotlin' ]
            }
            resources {
                srcDirs = [ 'src/integration-test/resources' ]
            }
        }
    }

    kotlin {
        target {
            java
            compilations.integrationTest {
                associateWith compilations.main
                associateWith compilations.test

                configurations {
                    integrationTestApi.extendsFrom testApi
                    integrationTestImplementation.extendsFrom testImplementation
                    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

                    [ integrationTestCompileClasspath, integrationTestRuntimeClasspath ].forEach { cfg ->
                        configureKotlinForOSGi(cfg)
                    }
                }
            }
        }
    }

    dependencies {
        // Exported as OSGi 'system packages extra' at runtime by the `osgi-framework-bootstrap` module.
        implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"

        // Test utilities
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    }
}

// Ensure that we both compile and run using Kotlin OSGi bundles.
// We must ONLY invoke this for Kotlin's classpath configurations.
void configureKotlinForOSGi(Configuration configuration) {
    configuration.resolutionStrategy {
        dependencySubstitution {
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk7') with module("net.corda.kotlin:kotlin-stdlib-jdk7-osgi:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-reflect') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
        }
    }
}

logger.quiet("********************** CORDA FLOW WORKER BUILD **********************")
if (JavaVersion.current() != javaVersion) {
    throw new GradleException("The java version used ${JavaVersion.current()} is not the expected version ${javaVersion}.")
}
logger.quiet("SDK version: {}", JavaVersion.current())
logger.quiet("JAVA HOME {}", System.getProperty("java.home"))

def cordaVersion = "$cordaProductVersion.$cordaRuntimeRevision"
if (System.getenv("RELEASE_VERSION")?.trim()) {
    version = System.getenv("RELEASE_VERSION")
} else {
    def versionSuffix = '-SNAPSHOT'
    if(project.hasProperty('overridePublishVersionSuffix')) {
        versionSuffix = project.property('overridePublishVersionSuffix')
    } else if (System.getenv('VERSION_SUFFIX')) {
        versionSuffix = System.getenv('VERSION_SUFFIX')
    }
    version = "$cordaVersion$versionSuffix"
}
logger.quiet("Corda runtime OS release version: {}", version)
logger.quiet("Corda API dependency version spec: {}", cordaApiVersion)
logger.quiet("Old Corda dependencies version spec: {}", cordaVersion)
//logger.quiet("Release Type: {}", releaseType)

subprojects {
    buildscript {
        configurations.classpath {
            // FORCE Gradle to use latest dynamic versions.
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-noarg'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'jacoco'

    version rootProject.version
    group 'net.corda'

    detekt {
        baseline = file("$projectDir/detekt-baseline.xml")
        config.setFrom(files("$rootDir/detekt-config.yml"))
        parallel = true
        reports {
            xml {
                enabled = true
                destination = file("$projectDir/build/detekt-report.xml")
            }
            html {
                enabled = false
            }
            txt {
                enabled = false
            }
        }
    }

    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"
    }

    task allDependencyInsight(type: DependencyInsightReportTask) {}
}

