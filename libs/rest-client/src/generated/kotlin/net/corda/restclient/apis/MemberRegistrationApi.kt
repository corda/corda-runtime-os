/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.apis

import net.corda.restclient.models.MemberRegistrationRequest
import net.corda.restclient.models.RegistrationRequestProgress
import net.corda.restclient.models.RestRegistrationRequestStatus

import net.corda.restclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class MemberRegistrationApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMembershipGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/membership/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method checks the statuses of all registration requests for a specified holding identity.
         * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked. 
         * @return kotlin.collections.List<RestRegistrationRequestStatus>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMembershipHoldingidentityshorthash(holdingidentityshorthash: kotlin.String): HttpResponse<kotlin.collections.List<RestRegistrationRequestStatus>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/membership/{holdingidentityshorthash}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method checks the status of the specified registration request for a holding identity.
         * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked. 
         * @param registrationrequestid The ID of the registration request 
         * @return RestRegistrationRequestStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMembershipHoldingidentityshorthashRegistrationrequestid(holdingidentityshorthash: kotlin.String, registrationrequestid: kotlin.String): HttpResponse<RestRegistrationRequestStatus> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/membership/{holdingidentityshorthash}/{registrationrequestid}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "registrationrequestid" + "}", "$registrationrequestid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method starts the registration process for a holding identity.
         * @param holdingidentityshorthash The holding identity ID of the requesting virtual node 
         * @param memberRegistrationRequest requestBody 
         * @return RegistrationRequestProgress
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postMembershipHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, memberRegistrationRequest: MemberRegistrationRequest): HttpResponse<RegistrationRequestProgress> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = memberRegistrationRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/membership/{holdingidentityshorthash}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
