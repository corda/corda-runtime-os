import aQute.bnd.gradle.Bundle

plugins {
    id 'corda.common-library'
    id 'corda.osgi-test-conventions'
    id 'corda.common-publishing'
}

description 'Corda Kryo Serialization Library'

configurations {
    cpbs {
        canBeConsumed = false
        transitive = false
    }
}

dependencies {
    compileOnly 'org.osgi:osgi.annotation'
    compileOnly 'org.osgi:osgi.core'
    compileOnly 'org.osgi:org.osgi.service.component.annotations'
    compileOnly "biz.aQute.bnd:biz.aQute.bnd.annotation:$bndlibVersion"
    compileOnly "co.paralleluniverse:quasar-osgi-annotations:$quasarVersion"

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation "net.corda:corda-application"
    implementation "net.corda:corda-base"
    implementation project(':libs:crypto:cipher-suite')
    implementation project(":libs:packaging:packaging")
    implementation "net.corda:corda-serialization"

    implementation "co.paralleluniverse:quasar-core-osgi:$quasarVersion"
    implementation "com.esotericsoftware:kryo:$kryoVersion"
    implementation project(path: ':libs:serialization:kryo-serializers', configuration: 'bundle')
    implementation 'org.jetbrains.kotlin:kotlin-osgi-bundle'
    implementation "org.slf4j:slf4j-api"
    
    implementation project(":libs:sandbox")
    implementation project(":libs:serialization:serialization-checkpoint-api")
    implementation project(path: ':libs:serialization:serialization-encoding', configuration: 'bundle')
    implementation project(":libs:utilities")
    runtimeOnly project(':libs:crypto:cipher-suite-impl')

    cpbs project(path: 'cpks:serializable-cpk-one', configuration: 'cordaCPB')
    cpbs project(path: 'cpks:serializable-cpk-two', configuration: 'cordaCPB')

    testCompileOnly 'org.osgi:osgi.core'
    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testRuntimeOnly "co.paralleluniverse:quasar-core-osgi:$quasarVersion:framework-extension"
    testImplementation project(":testing:kryo-serialization-testkit")
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    integrationTestImplementation project(':testing:sandboxes')
    integrationTestImplementation project('cpks:serializable-cpk-one')
    integrationTestImplementation "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    integrationTestRuntimeOnly "co.paralleluniverse:quasar-core-osgi:$quasarVersion:framework-extension"

    integrationTestRuntimeOnly project(':libs:crypto:crypto-core')
    integrationTestRuntimeOnly project(':libs:crypto:cipher-suite-impl')
    integrationTestRuntimeOnly project(':libs:lifecycle:lifecycle-impl')
    integrationTestRuntimeOnly project(':libs:messaging:db-message-bus-impl')
    integrationTestRuntimeOnly project(':libs:messaging:messaging-impl')
}

tasks.withType(Test).configureEach {
    // Kryo needs reflective access to these packages.
    jvmArgs '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time.chrono=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time.zone=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED'
}

def integrationTestResources = tasks.named('processIntegrationTestResources', ProcessResources) {
    from configurations.cpbs
}

tasks.named('testingBundle', Bundle) {
    dependsOn integrationTestResources
}
