@Library('corda-shared-build-pipeline-steps@5.3') _

import com.r3.build.agents.KubernetesAgent
import com.r3.build.enums.BuildEnvironment
import com.r3.build.enums.KubernetesCluster
import com.r3.build.BuildConstants
import com.r3.build.utils.GitUtils
import com.r3.build.utils.SnykUtils

KubernetesAgent k8s = new KubernetesAgent(
        BuildEnvironment.AMD64_LINUX_JAVA17,
        KubernetesCluster.JenkinsAgents,
        1
)

GitUtils gitUtils = new GitUtils(this)
SnykUtils snykUtils = new SnykUtils(this)

pipeline {
    agent {
        kubernetes {
            cloud k8s.buildCluster.cloudName
            yaml k8s.JSON
            yamlMergeStrategy merge() // important to keep tolerations from the inherited template
            idleMinutes 15
            podRetention always()
            nodeSelector k8s.nodeSelector
            label k8s.jenkinsLabel
            showRawYaml true
            defaultContainer k8s.defaultContainer.name
        }
    }

    environment {
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        CORDA_ARTIFACTORY_PASSWORD = "${env.ARTIFACTORY_CREDENTIALS_PSW}"
        CORDA_ARTIFACTORY_USERNAME = "${env.ARTIFACTORY_CREDENTIALS_USR}"
        BUILD_CACHE_CREDENTIALS = credentials('gradle-ent-cache-credentials')
        BUILD_CACHE_PASSWORD = "${env.BUILD_CACHE_CREDENTIALS_PSW}"
        BUILD_CACHE_USERNAME = "${env.BUILD_CACHE_CREDENTIALS_USR}"
        CORDA_GRADLE_SCAN_KEY = credentials('gradle-build-scans-key')
        GRADLE_USER_HOME = "/host_tmp/gradle"
        SNYK_TOKEN = credentials("r3-snyk-corda5")
        SNYK_ORG_ID = credentials("corda5-snyk-org-id")
    }

    options {
        timestamps()
    }

    triggers {
        cron (gitUtils.isReleaseBranch() ? '@midnight' : '')
    }

    stages {
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarCloud') {
                    sh './gradlew sonar -Si'
                }
            }
        }
        stage('Snyk Code analysis') {
            steps {
                script {
                    snykUtils.runSnykCode()
                }
            }
        }
    }
}
