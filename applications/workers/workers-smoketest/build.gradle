plugins {
    id 'org.jetbrains.kotlin.jvm'
}

description 'Worker Smoketests'

configurations {
    cpis {
        canBeConsumed = false
        transitive = false
    }
    cpiForFlowCacheTest {
        canBeConsumed = false
        transitive = false
    }
}

sourceSets {
    smokeTest {
        java {
            srcDirs += [ 'src/smokeTest/java' ]
        }
        kotlin {
            srcDirs += [ 'src/smokeTest/kotlin' ]
        }
        resources {
            srcDirs = [ 'src/smokeTest/resources' ]
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

kotlin {
    target {
        java
        compilations.smokeTest {
            associateWith compilations.main
            associateWith compilations.test

            configurations {
                smokeTestApi.extendsFrom testApi
                smokeTestImplementation.extendsFrom testImplementation
                smokeTestRuntimeOnly.extendsFrom testRuntimeOnly
            }
        }
    }
}

dependencies {
    // NO CORDA DEPENDENCIES!!
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.4.2"

    // Avoid having the schema names and keys scattered across projects
    smokeTestImplementation "net.corda:corda-config-schema:$cordaApiVersion"

    // But building a cpb for use in a test is ok.
    cpis project(path: ':notary-plugins:notary-plugin-non-validating:notary-plugin-non-validating-server', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:test-cordapp', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-consensual-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-utxo-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-obligation-demo-app:ledger-obligation-demo-workflow', configuration: 'cordaCPB')
    cpiForFlowCacheTest project(path: ':testing:cpbs:test-cordapp-for-cache-testing', configuration: 'cordaCPB')

    smokeTestImplementation "com.konghq:unirest-java:$unirestVersion"
    smokeTestImplementation "com.konghq:unirest-objectmapper-jackson:$unirestVersion"
    smokeTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    smokeTestImplementation project(':testing:test-utilities')

    smokeTestImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    smokeTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    smokeTestImplementation "org.apache.commons:commons-text:$commonsTextVersion"
    smokeTestImplementation "org.assertj:assertj-core:$assertjVersion"
    smokeTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    smokeTestImplementation project(':components:flow:flow-rpcops-service')
    smokeTestImplementation project(':tools:plugins:package')
    smokeTestImplementation project(":testing:packaging-test-utilities")
    smokeTestImplementation "org.eclipse.jetty.websocket:websocket-client:$jettyVersion"
    smokeTestImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    smokeTestImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    smokeTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    smokeTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
}

def smokeTestResources = tasks.named('processSmokeTestResources', ProcessResources) {
    from(configurations.cpis) {
        into 'META-INF'
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "\$1\$3"
    }

    // Put the test-cordapp-for-cache-testing cpb into a different folder
    def cpiForFlowCacheTest = configurations.cpiForFlowCacheTest
    def cacheTestingDir = "META-INF" + File.separator + "cache-invalidation-testing"
    from(cpiForFlowCacheTest) {
        into cacheTestingDir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "test-cordapp.cpb"
    }
}

tasks.register('smokeTest', Test) {
    description = "Runs smoke tests."
    group = "verification"

    testClassesDirs = project.sourceSets["smokeTest"].output.classesDirs
    classpath = project.sourceSets["smokeTest"].runtimeClasspath

    def combinedWorker = project.getProperties().getOrDefault("isCombinedWorker",false)
    systemProperty "rpcHost", project.getProperties().getOrDefault("rpcHost","https://localhost:8888/")

    // Note these port values have to match what is setup as part of port forwarding at cluster bootstrap time.
    // E.g. during Jenkins pipeline setup.
    systemProperty "cryptoWorkerHealthHttp",
            project.getProperties().getOrDefault("cryptoWorkerHealthHttp",combinedWorker ? null : "http://localhost:7001/")
    systemProperty "rpcWorkerHealthHttp",
            project.getProperties().getOrDefault("rpcWorkerHealthHttp",combinedWorker ? null : "http://localhost:7002/")
    systemProperty "flowWorkerHealthHttp",
            project.getProperties().getOrDefault("flowWorkerHealthHttp",combinedWorker ? null : "http://localhost:7003/")
    systemProperty "dbWorkerHealthHttp",
            project.getProperties().getOrDefault("dbWorkerHealthHttp",combinedWorker ? null : "http://localhost:7004/")

    systemProperty "combinedWorkerHealthHttp",
            project.getProperties().getOrDefault("combinedWorkerHealthHttp",combinedWorker ? "http://localhost:7000/" : null)
}


tasks.named('smokeTest', Test) {
    dependsOn smokeTestResources
}
