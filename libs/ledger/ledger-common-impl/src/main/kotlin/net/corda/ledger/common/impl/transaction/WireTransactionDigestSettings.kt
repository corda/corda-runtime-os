package net.corda.ledger.common.impl.transaction

import net.corda.v5.crypto.DigestAlgorithmName
import net.corda.v5.crypto.merkle.HASH_DIGEST_PROVIDER_LEAF_PREFIX_OPTION
import net.corda.v5.crypto.merkle.HASH_DIGEST_PROVIDER_NODE_PREFIX_OPTION
import net.corda.v5.crypto.merkle.HASH_DIGEST_PROVIDER_NONCE_NAME
import net.corda.v5.crypto.merkle.HASH_DIGEST_PROVIDER_TWEAKABLE_NAME

const val ROOT_MERKLE_TREE_DIGEST_PROVIDER_NAME_KEY = "ROOT_MERKLE_TREE_DIGEST_PROVIDER_NAME"
const val ROOT_MERKLE_TREE_DIGEST_ALGORITHM_NAME_KEY = "ROOT_MERKLE_TREE_DIGEST_ALGORITHM_NAME"
const val ROOT_MERKLE_TREE_DIGEST_OPTIONS_KEY = "ROOT_MERKLE_TREE_DIGEST_OPTIONS"
const val COMPONENT_MERKLE_TREE_DIGEST_PROVIDER_NAME_KEY = "COMPONENT_MERKLE_TREE_DIGEST_PROVIDER_NAME"
const val COMPONENT_MERKLE_TREE_DIGEST_ALGORITHM_NAME_KEY = "COMPONENT_MERKLE_TREE_DIGEST_ALGORITHM_NAME"
const val COMPONENT_MERKLE_TREE_ENTROPY_ALGORITHM_NAME_KEY = "COMPONENT_MERKLE_TREE_ENTROPY_ALGORITHM_NAME"

class WireTransactionDigestSettings {
    companion object {
        val DefaultValues = mapOf(
            ROOT_MERKLE_TREE_DIGEST_PROVIDER_NAME_KEY to HASH_DIGEST_PROVIDER_TWEAKABLE_NAME,
            ROOT_MERKLE_TREE_DIGEST_ALGORITHM_NAME_KEY to DigestAlgorithmName.SHA2_256D,
            ROOT_MERKLE_TREE_DIGEST_OPTIONS_KEY to mapOf(
                HASH_DIGEST_PROVIDER_LEAF_PREFIX_OPTION to "leaf".toByteArray(Charsets.UTF_8),
                HASH_DIGEST_PROVIDER_NODE_PREFIX_OPTION to "node".toByteArray(Charsets.UTF_8)
            ),
            COMPONENT_MERKLE_TREE_DIGEST_PROVIDER_NAME_KEY to HASH_DIGEST_PROVIDER_NONCE_NAME,
            COMPONENT_MERKLE_TREE_DIGEST_ALGORITHM_NAME_KEY to DigestAlgorithmName.SHA2_256D,

            COMPONENT_MERKLE_TREE_ENTROPY_ALGORITHM_NAME_KEY to DigestAlgorithmName.SHA2_256D,
        )
    }
}