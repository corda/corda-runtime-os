import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'biz.aQute.bnd.builder'
}

description "Bare bones Kotlin reflection within an OSGi framework."

configurations {
    bundle {
        canBeResolved = false
    }
    bundle.extendsFrom runtimeClasspath
}

dependencies {
    compileOnly "org.osgi:osgi.annotation:$osgiVersion"
    api "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"
    compileOnly "org.jetbrains.kotlinx:kotlinx-metadata-jvm:$kotlinMetadataVersion"
    compileOnly "org.ow2.asm:asm:$asmVersion"

    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testRuntimeOnly "org.jetbrains.kotlinx:kotlinx-metadata-jvm:$kotlinMetadataVersion"
    testRuntimeOnly "org.ow2.asm:asm:$asmVersion"

    integrationTestImplementation project(':libs:kotlin-reflection:kotlin-reflection-test-example')
    integrationTestImplementation "org.apache.felix:org.apache.felix.framework:$felixVersion"
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    integrationTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

def jar = tasks.named('jar', Jar) {
    archiveBaseName = 'corda-kotlin-reflection'
    bnd """\
Bundle-Name: Corda Kotlin Reflection
Bundle-SymbolicName: \${project.group}.kotlin-reflection
-includeresource: @kotlinx-metadata-jvm-${kotlinMetadataVersion}.jar
-conditionalpackage: org.objectweb.asm
"""
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.integrationTest.output
    sourceSet = sourceSets.integrationTest
    bnd '''
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
'''
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(
        sourceSets.integrationTest.runtimeClasspath,
        configurations.archives.artifacts.files,
        testingBundle
    )
    bndrun = file('tests.bndrun')
    //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
    System.setProperty('bnd.home.dir', "$rootDir/bnd")
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve
    resultsDirectory = file("$testResultsDir/integrationTest")
    bundles = files(
        sourceSets.integrationTest.runtimeClasspath,
        configurations.archives.artifacts.files,
        testingBundle
    )
    bndrun = file('tests.bndrun')
}

tasks.register('integrationTest', Test) {
    dependsOn testOSGi
    enabled = false
}

artifacts {
    bundle jar
}
