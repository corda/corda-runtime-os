plugins {
    id 'distribution'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
    id 'corda.cli-plugin-packager'
    id 'corda.common-publishing'
}

ext {
    releasable = false
}

ext.cordaEnableFormatting = true

group 'net.corda.cli.deployment'

dependencies {
    constraints {
        implementation(libs.slf4j.v2.api)
    }

    compileOnly "net.corda.cli.host:api:$pluginHostVersion"

    implementation project(':libs:packaging:packaging-verify')
    implementation project(':libs:corda-sdk')
    implementation project(':libs:membership:schema-validation')
    implementation project(':libs:membership:membership-common')
    implementation libs.pf4j
    kapt libs.pf4j

    testImplementation libs.bundles.test
    testImplementation "net.corda.cli.host:api:$pluginHostVersion"
    testImplementation libs.pf4j
    testImplementation project(":testing:test-utilities")
    testImplementation project(":testing:packaging-test-utilities")

    testRuntimeOnly libs.log4j.slf4j2

    implementation libs.liquibase
    implementation project(":tools:plugins:plugins-rest")
    implementation project(":tools:plugins:common-utils")
    implementation project(":libs:virtual-node:virtual-node-endpoints-maintenance")
//    implementation project(":libs:virtual-node:cpi-upload-endpoints")

    testImplementation project(":libs:db:db-admin-impl")

    implementation project(":libs:db:db-admin-impl") // TODO delete
}


/*
dependencies {

    implementation project(":libs:virtual-node:virtual-node-endpoints-maintenance")
    implementation project(":libs:virtual-node:cpi-upload-endpoints")
    implementation project(':libs:crypto:crypto-core')
    implementation project(":libs:db:db-admin-impl") //

    implementation platform("net.corda:corda-api:$cordaApiVersion")

    implementation project(':libs:corda-sdk')
    implementation project(":tools:plugins:plugins-rest")
    implementation project(":tools:plugins:common-utils")
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib'
    compileOnly libs.pf4j
//    compileOnly "net.corda.cli.host:api:$pluginHostVersion"
    implementation "net.corda.cli.host:api:$pluginHostVersion"

//    testImplementation project(":testing:test-utilities")
//    testImplementation project(":testing:packaging-test-utilities")

//    testRuntimeOnly libs.log4j.slf4j2

    kapt libs.pf4j
//    kapt "info.picocli:picocli:$picocliVersion"


    testImplementation "info.picocli:picocli:$picocliVersion"

    implementation libs.liquibase
    constraints {
        implementation(libs.slf4j.v2.api)
    }

    // DO NOT DISTRIBUTE DRIVERS HERE WE ARE NOT LICENSED TO DISTRIBUTE
    // JDBC drivers are picked up in Corda 5 from a configured location, the CLI tool does not yet have this ability so
    // the Postgres drivers are packaged within the tool itself.
    runtimeOnly libs.postgresql.jdbc

    testImplementation libs.bundles.test
//    testImplementation libs.pf4j
//    testCompileOnly "net.corda.cli.host:api:$pluginHostVersion"
//    testImplementation "net.corda.cli.host:api:$pluginHostVersion"
}
*/

cliPlugin {
    cliPluginClass = 'net.corda.cli.plugins.vnode.VirtualNodeCliPlugin'
    cliPluginDescription = 'A CLI plug-in for operations on Virtual Node'
}

tasks.named("installDist") {
    dependsOn cliPlugin
    def homePath = System.properties['user.home']
    from cliPlugin
    into "$homePath/.corda/cli/plugins"
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId "${cliPlugin.cliPluginId.get()}-cli-plugin"
            groupId project.group
            artifact cliPluginTask
        }
    }
}
