services:
  zookeeper:
    container_name: zookeeper
    # https://hub.docker.com/r/bitnami/zookeeper
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    # https://hub.docker.com/r/bitnami/kafka
    image: "bitnami/kafka:latest"
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list" ]
      interval: 5s
      timeout: 20s
      retries: 15

  init-kafka:
    container_name: init-kafka
    image: "bitnami/kafka:latest"
    depends_on:
      kafka:
        condition: service_healthy

    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic config.management.request
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic config.management.request.resp
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic config.topic --config "cleanup.policy=compact"

      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.management
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.management.resp
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.user --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.group --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.role --config "cleanup.policy=compact"
      kafka-topics.sh --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.permission --config "cleanup.policy=compact"

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      kafka:
        condition: service_healthy

  cluster-db:
    container_name: cluster-db
    image: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: "cordacluster"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "pass"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d cordacluster" ]
      interval: 2s
      timeout: 2s
      retries: 15

  crypto-worker:
    container_name: crypto-worker
    # Created with `gradlew applications:workers:release:crypto:publishOSGiImage`.
    image: "corda-os-docker-dev.software.r3.com/corda-os-crypto-worker:latest-local"
    ports:
      - "5007:5007" # debug port
      - "7001:7000" # healthcheck port
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007"
    command:
      - --messagingParams
      - kafka.common.bootstrap.servers=kafka:9092
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:7000/isHealthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 20

  db-worker:
    container_name: db-worker
    # Created with `gradlew :applications:workers:release:db-worker:publishOSGiImage`.
    image: "corda-os-docker-dev.software.r3.com/corda-os-db-worker:latest-local"
    ports:
      - "5006:5006" # debug port
      - "7002:7000" # healthcheck port
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006"
    command:
      - -mkafka.common.bootstrap.servers=kafka:9092
      - -spassphrase=bad passphrase
      - -ssalt=not so random
      - -dcluster.user=user
      - -dcluster.pass.configSecret.encryptedSecret=4LNuCvt+NhGIBwL7gRRhvAZh3k6JRN9NHv0aG3pi1xM=
      - -dcluster.jdbc.url=jdbc:postgresql://cluster-db:5432/cordacluster
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:7000/isHealthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 20

  flow-worker:
    container_name: flow-worker
    # Created with `gradlew applications:workers:release:flow:publishOSGiImage`.
    image: "corda-os-docker-dev.software.r3.com/corda-os-flow-worker:latest-local"
    ports:
      - "5008:5008" # debug port
      - "7003:7000" # healthcheck port
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008"
    command:
      - --messagingParams
      - kafka.common.bootstrap.servers=kafka:9092
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:7000/isHealthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 20

  rpc-worker:
    container_name: rpc-worker
    # Created with `gradlew applications:workers:release:rpc:publishOSGiImage`.
    image: "corda-os-docker-dev.software.r3.com/corda-os-rpc-worker:latest-local"
    ports:
      - "8888:8888" # RPC port
      - "5005:5005" # debug port
      - "7004:7000" # healthcheck port
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    command:
      - --messagingParams
      - kafka.common.bootstrap.servers=kafka:9092
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:7000/isHealthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 20