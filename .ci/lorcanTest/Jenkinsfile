pipeline {
    agent { label 'standard' }

    parameters {
        // TODO: Change this when the version in gradle.properties had changed
        string(defaultValue: "1623074066759-rc",
            description: 'The corda version suffix',
            name: 'UPSTREAM_VERSION_SUFFIX')
        string(defaultValue: "",
            description: 'Up String project name',
            name: 'UPSTREAM_PROJECT_NAME')
    }

    environment {
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        CORDA_ARTIFACTORY_USERNAME = "${env.ARTIFACTORY_CREDENTIALS_USR}"
        CORDA_ARTIFACTORY_PASSWORD = "${env.ARTIFACTORY_CREDENTIALS_PSW}"
        GRADLE_USER_HOME = "/tmp:/host_tmp/gradle"
        CORDA_REVISION = "${env.GIT_COMMIT}"
        WORKSPACE = pwd()
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
        timeout(time: 120, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Prep') {
            steps {
                sh 'mkdir -p ${GRADLE_USER_HOME}'
                sh 'sudo chmod -R ugo+w ${GRADLE_USER_HOME}'
            }
        }
        stage('Setup Kafka') {
            steps {
                echo "CORDA_REVISION is ${CORDA_REVISION}"
                echo "workspace is ${WORKSPACE}"
            }
        }
    }
    post {
        cleanup {
            junit allowEmptyResults: true, testResults: '**/build/test-results/**/TEST-*.xml'
            archiveArtifacts artifacts: '**/build/test-results/**/TEST-*.xml', fingerprint: true
            recordIssues(
                enabledForFailure: true, aggregatingResults: true,
                tools: [kotlin(), java(), detekt(pattern: '**/build/detekt-report.xml')]
            )
        }
        success {
            sh 'rm -rf **/build/test-results/**/TEST-*.xml'
        }
    }
}
