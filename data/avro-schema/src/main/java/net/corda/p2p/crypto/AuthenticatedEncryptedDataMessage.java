/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.p2p.crypto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuthenticatedEncryptedDataMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2589352847842888119L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuthenticatedEncryptedDataMessage\",\"namespace\":\"net.corda.p2p.crypto\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"CommonHeader\",\"fields\":[{\"name\":\"messageType\",\"type\":{\"type\":\"enum\",\"name\":\"MessageType\",\"symbols\":[\"INITIATOR_HELLO\",\"RESPONDER_HELLO\",\"INITIATOR_HANDSHAKE\",\"RESPONDER_HANDSHAKE\",\"DATA\"]}},{\"name\":\"protocolVersion\",\"type\":\"int\"},{\"name\":\"sessionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sequenceNo\",\"type\":\"long\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}},{\"name\":\"encryptedPayload\",\"type\":\"bytes\"},{\"name\":\"authTag\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AuthenticatedEncryptedDataMessage> ENCODER =
      new BinaryMessageEncoder<AuthenticatedEncryptedDataMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuthenticatedEncryptedDataMessage> DECODER =
      new BinaryMessageDecoder<AuthenticatedEncryptedDataMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuthenticatedEncryptedDataMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuthenticatedEncryptedDataMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuthenticatedEncryptedDataMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AuthenticatedEncryptedDataMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuthenticatedEncryptedDataMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuthenticatedEncryptedDataMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuthenticatedEncryptedDataMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuthenticatedEncryptedDataMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private net.corda.p2p.crypto.CommonHeader header;
   private java.nio.ByteBuffer encryptedPayload;
   private java.nio.ByteBuffer authTag;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuthenticatedEncryptedDataMessage() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param encryptedPayload The new value for encryptedPayload
   * @param authTag The new value for authTag
   */
  public AuthenticatedEncryptedDataMessage(net.corda.p2p.crypto.CommonHeader header, java.nio.ByteBuffer encryptedPayload, java.nio.ByteBuffer authTag) {
    this.header = header;
    this.encryptedPayload = encryptedPayload;
    this.authTag = authTag;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return encryptedPayload;
    case 2: return authTag;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (net.corda.p2p.crypto.CommonHeader)value$; break;
    case 1: encryptedPayload = (java.nio.ByteBuffer)value$; break;
    case 2: authTag = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public net.corda.p2p.crypto.CommonHeader getHeader() {
    return header;
  }


  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(net.corda.p2p.crypto.CommonHeader value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'encryptedPayload' field.
   * @return The value of the 'encryptedPayload' field.
   */
  public java.nio.ByteBuffer getEncryptedPayload() {
    return encryptedPayload;
  }


  /**
   * Sets the value of the 'encryptedPayload' field.
   * @param value the value to set.
   */
  public void setEncryptedPayload(java.nio.ByteBuffer value) {
    this.encryptedPayload = value;
  }

  /**
   * Gets the value of the 'authTag' field.
   * @return The value of the 'authTag' field.
   */
  public java.nio.ByteBuffer getAuthTag() {
    return authTag;
  }


  /**
   * Sets the value of the 'authTag' field.
   * @param value the value to set.
   */
  public void setAuthTag(java.nio.ByteBuffer value) {
    this.authTag = value;
  }

  /**
   * Creates a new AuthenticatedEncryptedDataMessage RecordBuilder.
   * @return A new AuthenticatedEncryptedDataMessage RecordBuilder
   */
  public static net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder newBuilder() {
    return new net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder();
  }

  /**
   * Creates a new AuthenticatedEncryptedDataMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuthenticatedEncryptedDataMessage RecordBuilder
   */
  public static net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder newBuilder(net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder other) {
    if (other == null) {
      return new net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder();
    } else {
      return new net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder(other);
    }
  }

  /**
   * Creates a new AuthenticatedEncryptedDataMessage RecordBuilder by copying an existing AuthenticatedEncryptedDataMessage instance.
   * @param other The existing instance to copy.
   * @return A new AuthenticatedEncryptedDataMessage RecordBuilder
   */
  public static net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder newBuilder(net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage other) {
    if (other == null) {
      return new net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder();
    } else {
      return new net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuthenticatedEncryptedDataMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuthenticatedEncryptedDataMessage>
    implements org.apache.avro.data.RecordBuilder<AuthenticatedEncryptedDataMessage> {

    private net.corda.p2p.crypto.CommonHeader header;
    private net.corda.p2p.crypto.CommonHeader.Builder headerBuilder;
    private java.nio.ByteBuffer encryptedPayload;
    private java.nio.ByteBuffer authTag;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = net.corda.p2p.crypto.CommonHeader.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.encryptedPayload)) {
        this.encryptedPayload = data().deepCopy(fields()[1].schema(), other.encryptedPayload);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.authTag)) {
        this.authTag = data().deepCopy(fields()[2].schema(), other.authTag);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AuthenticatedEncryptedDataMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.encryptedPayload)) {
        this.encryptedPayload = data().deepCopy(fields()[1].schema(), other.encryptedPayload);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.authTag)) {
        this.authTag = data().deepCopy(fields()[2].schema(), other.authTag);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public net.corda.p2p.crypto.CommonHeader getHeader() {
      return header;
    }


    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder setHeader(net.corda.p2p.crypto.CommonHeader value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.p2p.crypto.CommonHeader.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(net.corda.p2p.crypto.CommonHeader.newBuilder(header));
        } else {
          setHeaderBuilder(net.corda.p2p.crypto.CommonHeader.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder setHeaderBuilder(net.corda.p2p.crypto.CommonHeader.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'encryptedPayload' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getEncryptedPayload() {
      return encryptedPayload;
    }


    /**
      * Sets the value of the 'encryptedPayload' field.
      * @param value The value of 'encryptedPayload'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder setEncryptedPayload(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.encryptedPayload = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'encryptedPayload' field has been set.
      * @return True if the 'encryptedPayload' field has been set, false otherwise.
      */
    public boolean hasEncryptedPayload() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'encryptedPayload' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder clearEncryptedPayload() {
      encryptedPayload = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'authTag' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAuthTag() {
      return authTag;
    }


    /**
      * Sets the value of the 'authTag' field.
      * @param value The value of 'authTag'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder setAuthTag(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.authTag = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'authTag' field has been set.
      * @return True if the 'authTag' field has been set, false otherwise.
      */
    public boolean hasAuthTag() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'authTag' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.AuthenticatedEncryptedDataMessage.Builder clearAuthTag() {
      authTag = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuthenticatedEncryptedDataMessage build() {
      try {
        AuthenticatedEncryptedDataMessage record = new AuthenticatedEncryptedDataMessage();
        if (headerBuilder != null) {
          try {
            record.header = this.headerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("header"));
            throw e;
          }
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (net.corda.p2p.crypto.CommonHeader) defaultValue(fields()[0]);
        }
        record.encryptedPayload = fieldSetFlags()[1] ? this.encryptedPayload : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.authTag = fieldSetFlags()[2] ? this.authTag : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuthenticatedEncryptedDataMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuthenticatedEncryptedDataMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuthenticatedEncryptedDataMessage>
    READER$ = (org.apache.avro.io.DatumReader<AuthenticatedEncryptedDataMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.header.customEncode(out);

    out.writeBytes(this.encryptedPayload);

    out.writeBytes(this.authTag);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.header == null) {
        this.header = new net.corda.p2p.crypto.CommonHeader();
      }
      this.header.customDecode(in);

      this.encryptedPayload = in.readBytes(this.encryptedPayload);

      this.authTag = in.readBytes(this.authTag);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.header == null) {
            this.header = new net.corda.p2p.crypto.CommonHeader();
          }
          this.header.customDecode(in);
          break;

        case 1:
          this.encryptedPayload = in.readBytes(this.encryptedPayload);
          break;

        case 2:
          this.authTag = in.readBytes(this.authTag);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










