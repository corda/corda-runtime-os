/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class CertificateApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * This method gets the certificate chain aliases for a cluster.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @return kotlin.collections.List<kotlin.String>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCertificateClusterUsage(usage: kotlin.String) : kotlin.collections.List<kotlin.String> {
        val localVarResponse = getCertificateClusterUsageWithHttpInfo(usage = usage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method gets the certificate chain aliases for a cluster.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @return ApiResponse<kotlin.collections.List<kotlin.String>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCertificateClusterUsageWithHttpInfo(usage: kotlin.String) : ApiResponse<kotlin.collections.List<kotlin.String>?> {
        val localVariableConfig = getCertificateClusterUsageRequestConfig(usage = usage)

        return request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCertificateClusterUsage
     *
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @return RequestConfig
     */
    fun getCertificateClusterUsageRequestConfig(usage: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/certificate/cluster/{usage}".replace("{"+"usage"+"}", encodeURIComponent(usage.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method gets the certificate chain in PEM format for a cluster.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param alias The certificate chain unique alias.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCertificateClusterUsageAlias(usage: kotlin.String, alias: kotlin.String) : kotlin.String {
        val localVarResponse = getCertificateClusterUsageAliasWithHttpInfo(usage = usage, alias = alias)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method gets the certificate chain in PEM format for a cluster.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param alias The certificate chain unique alias.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCertificateClusterUsageAliasWithHttpInfo(usage: kotlin.String, alias: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = getCertificateClusterUsageAliasRequestConfig(usage = usage, alias = alias)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCertificateClusterUsageAlias
     *
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param alias The certificate chain unique alias.
     * @return RequestConfig
     */
    fun getCertificateClusterUsageAliasRequestConfig(usage: kotlin.String, alias: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/certificate/cluster/{usage}/{alias}".replace("{"+"usage"+"}", encodeURIComponent(usage.toString())).replace("{"+"alias"+"}", encodeURIComponent(alias.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCertificateGetprotocolversion() : kotlin.Int {
        val localVarResponse = getCertificateGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCertificateGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getCertificateGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCertificateGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getCertificateGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/certificate/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method gets the certificate chain aliases for a virtual node.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid Holding identity ID of the virtual node that owns the certificate.
     * @return kotlin.collections.List<kotlin.String>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCertificateVnodeHoldingidentityidUsage(usage: kotlin.String, holdingidentityid: kotlin.String) : kotlin.collections.List<kotlin.String> {
        val localVarResponse = getCertificateVnodeHoldingidentityidUsageWithHttpInfo(usage = usage, holdingidentityid = holdingidentityid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method gets the certificate chain aliases for a virtual node.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid Holding identity ID of the virtual node that owns the certificate.
     * @return ApiResponse<kotlin.collections.List<kotlin.String>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCertificateVnodeHoldingidentityidUsageWithHttpInfo(usage: kotlin.String, holdingidentityid: kotlin.String) : ApiResponse<kotlin.collections.List<kotlin.String>?> {
        val localVariableConfig = getCertificateVnodeHoldingidentityidUsageRequestConfig(usage = usage, holdingidentityid = holdingidentityid)

        return request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCertificateVnodeHoldingidentityidUsage
     *
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid Holding identity ID of the virtual node that owns the certificate.
     * @return RequestConfig
     */
    fun getCertificateVnodeHoldingidentityidUsageRequestConfig(usage: kotlin.String, holdingidentityid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/certificate/vnode/{holdingidentityid}/{usage}".replace("{"+"usage"+"}", encodeURIComponent(usage.toString())).replace("{"+"holdingidentityid"+"}", encodeURIComponent(holdingidentityid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method gets the certificate chain in PEM format for a virtual node.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid The certificate holding identity ID
     * @param alias The certificate chain unique alias.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCertificateVnodeHoldingidentityidUsageAlias(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String) : kotlin.String {
        val localVarResponse = getCertificateVnodeHoldingidentityidUsageAliasWithHttpInfo(usage = usage, holdingidentityid = holdingidentityid, alias = alias)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method gets the certificate chain in PEM format for a virtual node.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid The certificate holding identity ID
     * @param alias The certificate chain unique alias.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCertificateVnodeHoldingidentityidUsageAliasWithHttpInfo(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = getCertificateVnodeHoldingidentityidUsageAliasRequestConfig(usage = usage, holdingidentityid = holdingidentityid, alias = alias)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCertificateVnodeHoldingidentityidUsageAlias
     *
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid The certificate holding identity ID
     * @param alias The certificate chain unique alias.
     * @return RequestConfig
     */
    fun getCertificateVnodeHoldingidentityidUsageAliasRequestConfig(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/certificate/vnode/{holdingidentityid}/{usage}/{alias}".replace("{"+"usage"+"}", encodeURIComponent(usage.toString())).replace("{"+"holdingidentityid"+"}", encodeURIComponent(holdingidentityid.toString())).replace("{"+"alias"+"}", encodeURIComponent(alias.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method enables you to generate a certificate signing request (CSR) for a tenant.
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param keyid Identifier of the public key that will be included in the certificate
     * @param netCordaRestclientDtoGenerateCsrWrapperRequest requestBody
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postCertificateTenantidKeyid(tenantid: kotlin.String, keyid: kotlin.String, netCordaRestclientDtoGenerateCsrWrapperRequest: net.corda.restclient.dto.GenerateCsrWrapperRequest) : kotlin.String {
        val localVarResponse = postCertificateTenantidKeyidWithHttpInfo(tenantid = tenantid, keyid = keyid, netCordaRestclientDtoGenerateCsrWrapperRequest = netCordaRestclientDtoGenerateCsrWrapperRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method enables you to generate a certificate signing request (CSR) for a tenant.
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param keyid Identifier of the public key that will be included in the certificate
     * @param netCordaRestclientDtoGenerateCsrWrapperRequest requestBody
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postCertificateTenantidKeyidWithHttpInfo(tenantid: kotlin.String, keyid: kotlin.String, netCordaRestclientDtoGenerateCsrWrapperRequest: net.corda.restclient.dto.GenerateCsrWrapperRequest) : ApiResponse<kotlin.String?> {
        val localVariableConfig = postCertificateTenantidKeyidRequestConfig(tenantid = tenantid, keyid = keyid, netCordaRestclientDtoGenerateCsrWrapperRequest = netCordaRestclientDtoGenerateCsrWrapperRequest)

        return request<net.corda.restclient.dto.GenerateCsrWrapperRequest, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postCertificateTenantidKeyid
     *
     * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST
     * @param keyid Identifier of the public key that will be included in the certificate
     * @param netCordaRestclientDtoGenerateCsrWrapperRequest requestBody
     * @return RequestConfig
     */
    fun postCertificateTenantidKeyidRequestConfig(tenantid: kotlin.String, keyid: kotlin.String, netCordaRestclientDtoGenerateCsrWrapperRequest: net.corda.restclient.dto.GenerateCsrWrapperRequest) : RequestConfig<net.corda.restclient.dto.GenerateCsrWrapperRequest> {
        val localVariableBody = netCordaRestclientDtoGenerateCsrWrapperRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/certificate/{tenantid}/{keyid}".replace("{"+"tenantid"+"}", encodeURIComponent(tenantid.toString())).replace("{"+"keyid"+"}", encodeURIComponent(keyid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method imports a certificate chain for a cluster.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param alias The unique alias under which the certificate chain will be stored (optional)
     * @param certificate  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putCertificateClusterUsage(usage: kotlin.String, alias: kotlin.String? = null, certificate: kotlin.collections.List<java.io.File>? = null) : Unit {
        val localVarResponse = putCertificateClusterUsageWithHttpInfo(usage = usage, alias = alias, certificate = certificate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method imports a certificate chain for a cluster.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param alias The unique alias under which the certificate chain will be stored (optional)
     * @param certificate  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun putCertificateClusterUsageWithHttpInfo(usage: kotlin.String, alias: kotlin.String?, certificate: kotlin.collections.List<java.io.File>?) : ApiResponse<Unit?> {
        val localVariableConfig = putCertificateClusterUsageRequestConfig(usage = usage, alias = alias, certificate = certificate)

        return request<Map<String, PartConfig<*>>, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putCertificateClusterUsage
     *
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param alias The unique alias under which the certificate chain will be stored (optional)
     * @param certificate  (optional)
     * @return RequestConfig
     */
    fun putCertificateClusterUsageRequestConfig(usage: kotlin.String, alias: kotlin.String?, certificate: kotlin.collections.List<java.io.File>?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "alias" to PartConfig(body = alias, headers = mutableMapOf()),
            "certificate" to PartConfig(body = certificate?.first(), headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/certificate/cluster/{usage}".replace("{"+"usage"+"}", encodeURIComponent(usage.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method imports a certificate chain for a virtual node.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid The certificate holding identity ID
     * @param alias The unique alias under which the certificate chain will be stored (optional)
     * @param certificate  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putCertificateVnodeHoldingidentityidUsage(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String? = null, certificate: kotlin.collections.List<java.io.File>? = null) : Unit {
        val localVarResponse = putCertificateVnodeHoldingidentityidUsageWithHttpInfo(usage = usage, holdingidentityid = holdingidentityid, alias = alias, certificate = certificate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method imports a certificate chain for a virtual node.
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid The certificate holding identity ID
     * @param alias The unique alias under which the certificate chain will be stored (optional)
     * @param certificate  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun putCertificateVnodeHoldingidentityidUsageWithHttpInfo(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String?, certificate: kotlin.collections.List<java.io.File>?) : ApiResponse<Unit?> {
        val localVariableConfig = putCertificateVnodeHoldingidentityidUsageRequestConfig(usage = usage, holdingidentityid = holdingidentityid, alias = alias, certificate = certificate)

        return request<Map<String, PartConfig<*>>, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putCertificateVnodeHoldingidentityidUsage
     *
     * @param usage The certificate usage. Can be either &#39;p2p-tls&#39; for a TLS certificate to be used in P2P communication, &#39;p2p-session&#39; for a session certificate to be used in P2P communication, &#39;rest-tls&#39; for a TLS certificate to be used in REST communication, or &#39;code-signer&#39; for a certificate of the code signing service.
     * @param holdingidentityid The certificate holding identity ID
     * @param alias The unique alias under which the certificate chain will be stored (optional)
     * @param certificate  (optional)
     * @return RequestConfig
     */
    fun putCertificateVnodeHoldingidentityidUsageRequestConfig(usage: kotlin.String, holdingidentityid: kotlin.String, alias: kotlin.String?, certificate: kotlin.collections.List<java.io.File>?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "alias" to PartConfig(body = alias, headers = mutableMapOf()),
            "certificate" to PartConfig(body = certificate?.first(), headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/certificate/vnode/{holdingidentityid}/{usage}".replace("{"+"usage"+"}", encodeURIComponent(usage.toString())).replace("{"+"holdingidentityid"+"}", encodeURIComponent(holdingidentityid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
