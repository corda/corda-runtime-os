plugins {
    id 'distribution'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
}

group 'net.corda.cli.deployment'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation project(":libs:http-rpc:http-rpc-client")
    implementation project(":libs:virtual-node:virtual-node-endpoints-maintenance")

    compileOnly "net.corda.cli.host:api:${pluginHostVersion}"

    compileOnly "org.pf4j:pf4j:${pf4jVersion}"
    kapt "org.pf4j:pf4j:${pf4jVersion}"

    testImplementation "net.corda.cli.host:api:${pluginHostVersion}"
    testImplementation "org.pf4j:pf4j:${pf4jVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
}

def pluginJar = tasks.named('jar', Jar) {
    manifest {
        attributes['Plugin-Class'] = pluginClass
        attributes['Plugin-Id'] = pluginId
        attributes['Plugin-Provider'] = pluginProvider
        attributes['Plugin-Description'] = pluginDescription
        attributes['Plugin-Version'] = version
    }
}

def plugin = tasks.register('plugin', Zip) {
    archiveBaseName = "plugin-$pluginId-$version"
    // first taking the classes generated by the jar task
    into('classes') {
        from zipTree(pluginJar.map { it.outputs.files.singleFile })
    }
    // and then we also need to include any libraries that are needed by the plugin
    dependsOn configurations.runtimeClasspath.buildDependencies
    into('lib') {
        from configurations.runtimeClasspath.filter { it.name.endsWith('jar')}
    }
}

tasks.named("installDist") {
    dependsOn plugin
    def homePath = System.properties['user.home']
    from plugin
    into "$homePath/.corda/cli/plugins"
}

artifacts {
    archives plugin
}
