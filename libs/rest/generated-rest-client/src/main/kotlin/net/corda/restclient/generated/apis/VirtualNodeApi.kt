/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class VirtualNodeApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * This method lists all virtual nodes in the cluster.
     * @return net.corda.restclient.dto.VirtualNodes
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnode() : net.corda.restclient.dto.VirtualNodes {
        val localVarResponse = getVirtualnodeWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.restclient.dto.VirtualNodes
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method lists all virtual nodes in the cluster.
     * @return ApiResponse<net.corda.restclient.dto.VirtualNodes?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeWithHttpInfo() : ApiResponse<net.corda.restclient.dto.VirtualNodes?> {
        val localVariableConfig = getVirtualnodeRequestConfig()

        return request<Unit, net.corda.restclient.dto.VirtualNodes>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnode
     *
     * @return RequestConfig
     */
    fun getVirtualnodeRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns the Crypto SQL needed for intention to create a virtual node.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnodeCreateDbCrypto() : kotlin.String {
        val localVarResponse = getVirtualnodeCreateDbCryptoWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns the Crypto SQL needed for intention to create a virtual node.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeCreateDbCryptoWithHttpInfo() : ApiResponse<kotlin.String?> {
        val localVariableConfig = getVirtualnodeCreateDbCryptoRequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnodeCreateDbCrypto
     *
     * @return RequestConfig
     */
    fun getVirtualnodeCreateDbCryptoRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode/create/db/crypto",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns the Uniqueness SQL needed for intention to create a virtual node.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnodeCreateDbUniqueness() : kotlin.String {
        val localVarResponse = getVirtualnodeCreateDbUniquenessWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns the Uniqueness SQL needed for intention to create a virtual node.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeCreateDbUniquenessWithHttpInfo() : ApiResponse<kotlin.String?> {
        val localVariableConfig = getVirtualnodeCreateDbUniquenessRequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnodeCreateDbUniqueness
     *
     * @return RequestConfig
     */
    fun getVirtualnodeCreateDbUniquenessRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode/create/db/uniqueness",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns the Vault SQL needed for intention to create a virtual node and latest uploaded CPI.
     * @param cpichecksum The file checksum of the CPI
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnodeCreateDbVaultCpichecksum(cpichecksum: kotlin.String) : kotlin.String {
        val localVarResponse = getVirtualnodeCreateDbVaultCpichecksumWithHttpInfo(cpichecksum = cpichecksum)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns the Vault SQL needed for intention to create a virtual node and latest uploaded CPI.
     * @param cpichecksum The file checksum of the CPI
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeCreateDbVaultCpichecksumWithHttpInfo(cpichecksum: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = getVirtualnodeCreateDbVaultCpichecksumRequestConfig(cpichecksum = cpichecksum)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnodeCreateDbVaultCpichecksum
     *
     * @param cpichecksum The file checksum of the CPI
     * @return RequestConfig
     */
    fun getVirtualnodeCreateDbVaultCpichecksumRequestConfig(cpichecksum: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode/create/db/vault/{cpichecksum}".replace("{"+"cpichecksum"+"}", encodeURIComponent(cpichecksum.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnodeGetprotocolversion() : kotlin.Int {
        val localVarResponse = getVirtualnodeGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getVirtualnodeGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnodeGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getVirtualnodeGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns the VirtualNodeInfo for a given Holding Identity ShortHash.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @return net.corda.restclient.dto.VirtualNodeInfo
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnodeHoldingidentityshorthash(holdingidentityshorthash: kotlin.String) : net.corda.restclient.dto.VirtualNodeInfo {
        val localVarResponse = getVirtualnodeHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.restclient.dto.VirtualNodeInfo
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns the VirtualNodeInfo for a given Holding Identity ShortHash.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @return ApiResponse<net.corda.restclient.dto.VirtualNodeInfo?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash: kotlin.String) : ApiResponse<net.corda.restclient.dto.VirtualNodeInfo?> {
        val localVariableConfig = getVirtualnodeHoldingidentityshorthashRequestConfig(holdingidentityshorthash = holdingidentityshorthash)

        return request<Unit, net.corda.restclient.dto.VirtualNodeInfo>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnodeHoldingidentityshorthash
     *
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @return RequestConfig
     */
    fun getVirtualnodeHoldingidentityshorthashRequestConfig(holdingidentityshorthash: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode/{holdingidentityshorthash}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns the VirtualNodeOperationStatus for a given operation request id.
     * @param requestid The requestId for the operation; obtained during node creation/upgrade
     * @return net.corda.rest.asynchronous.v1.AsyncOperationStatus
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnodeStatusRequestid(requestid: kotlin.String) : net.corda.rest.asynchronous.v1.AsyncOperationStatus {
        val localVarResponse = getVirtualnodeStatusRequestidWithHttpInfo(requestid = requestid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.rest.asynchronous.v1.AsyncOperationStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns the VirtualNodeOperationStatus for a given operation request id.
     * @param requestid The requestId for the operation; obtained during node creation/upgrade
     * @return ApiResponse<net.corda.rest.asynchronous.v1.AsyncOperationStatus?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeStatusRequestidWithHttpInfo(requestid: kotlin.String) : ApiResponse<net.corda.rest.asynchronous.v1.AsyncOperationStatus?> {
        val localVariableConfig = getVirtualnodeStatusRequestidRequestConfig(requestid = requestid)

        return request<Unit, net.corda.rest.asynchronous.v1.AsyncOperationStatus>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnodeStatusRequestid
     *
     * @param requestid The requestId for the operation; obtained during node creation/upgrade
     * @return RequestConfig
     */
    fun getVirtualnodeStatusRequestidRequestConfig(requestid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode/status/{requestid}".replace("{"+"requestid"+"}", encodeURIComponent(requestid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns the SQL needed to update the virtual node&#39;s CPI
     * @param virtualnodeshortid Short ID of the virtual node instance
     * @param newcpichecksum The file checksum of the CPI to be upgraded to
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVirtualnodeVirtualnodeshortidDbVaultNewcpichecksum(virtualnodeshortid: kotlin.String, newcpichecksum: kotlin.String) : kotlin.String {
        val localVarResponse = getVirtualnodeVirtualnodeshortidDbVaultNewcpichecksumWithHttpInfo(virtualnodeshortid = virtualnodeshortid, newcpichecksum = newcpichecksum)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns the SQL needed to update the virtual node&#39;s CPI
     * @param virtualnodeshortid Short ID of the virtual node instance
     * @param newcpichecksum The file checksum of the CPI to be upgraded to
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVirtualnodeVirtualnodeshortidDbVaultNewcpichecksumWithHttpInfo(virtualnodeshortid: kotlin.String, newcpichecksum: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = getVirtualnodeVirtualnodeshortidDbVaultNewcpichecksumRequestConfig(virtualnodeshortid = virtualnodeshortid, newcpichecksum = newcpichecksum)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVirtualnodeVirtualnodeshortidDbVaultNewcpichecksum
     *
     * @param virtualnodeshortid Short ID of the virtual node instance
     * @param newcpichecksum The file checksum of the CPI to be upgraded to
     * @return RequestConfig
     */
    fun getVirtualnodeVirtualnodeshortidDbVaultNewcpichecksumRequestConfig(virtualnodeshortid: kotlin.String, newcpichecksum: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/virtualnode/{virtualnodeshortid}/db/vault/{newcpichecksum}".replace("{"+"virtualnodeshortid"+"}", encodeURIComponent(virtualnodeshortid.toString())).replace("{"+"newcpichecksum"+"}", encodeURIComponent(newcpichecksum.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method creates a new virtual node.
     * @param netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest requestBody
     * @return net.corda.rest.asynchronous.v1.AsyncResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postVirtualnode(netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest: net.corda.libs.virtualnode.endpoints.v1.types.CreateVirtualNodeRequestType.JsonCreateVirtualNodeRequest) : net.corda.rest.asynchronous.v1.AsyncResponse {
        val localVarResponse = postVirtualnodeWithHttpInfo(netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest = netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.rest.asynchronous.v1.AsyncResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method creates a new virtual node.
     * @param netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest requestBody
     * @return ApiResponse<net.corda.rest.asynchronous.v1.AsyncResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postVirtualnodeWithHttpInfo(netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest: net.corda.libs.virtualnode.endpoints.v1.types.CreateVirtualNodeRequestType.JsonCreateVirtualNodeRequest) : ApiResponse<net.corda.rest.asynchronous.v1.AsyncResponse?> {
        val localVariableConfig = postVirtualnodeRequestConfig(netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest = netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest)

        return request<net.corda.libs.virtualnode.endpoints.v1.types.CreateVirtualNodeRequestType.JsonCreateVirtualNodeRequest, net.corda.rest.asynchronous.v1.AsyncResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postVirtualnode
     *
     * @param netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest requestBody
     * @return RequestConfig
     */
    fun postVirtualnodeRequestConfig(netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest: net.corda.libs.virtualnode.endpoints.v1.types.CreateVirtualNodeRequestType.JsonCreateVirtualNodeRequest) : RequestConfig<net.corda.libs.virtualnode.endpoints.v1.types.CreateVirtualNodeRequestType.JsonCreateVirtualNodeRequest> {
        val localVariableBody = netCordaLibsVirtualnodeEndpointsV1TypesCreateVirtualNodeRequestTypeJsonCreateVirtualNodeRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/virtualnode",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method upgrades a virtual node&#39;s CPI.
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param targetcpifilechecksum The file checksum of the CPI to upgrade to.
     * @param forceupgrade Whether this upgrade should be forced regardless of OperationInProgress. (optional)
     * @return net.corda.rest.asynchronous.v1.AsyncResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putVirtualnodeVirtualnodeshortidCpiTargetcpifilechecksum(virtualnodeshortid: kotlin.String, targetcpifilechecksum: kotlin.String, forceupgrade: kotlin.Boolean? = null) : net.corda.rest.asynchronous.v1.AsyncResponse {
        val localVarResponse = putVirtualnodeVirtualnodeshortidCpiTargetcpifilechecksumWithHttpInfo(virtualnodeshortid = virtualnodeshortid, targetcpifilechecksum = targetcpifilechecksum, forceupgrade = forceupgrade)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.rest.asynchronous.v1.AsyncResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method upgrades a virtual node&#39;s CPI.
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param targetcpifilechecksum The file checksum of the CPI to upgrade to.
     * @param forceupgrade Whether this upgrade should be forced regardless of OperationInProgress. (optional)
     * @return ApiResponse<net.corda.rest.asynchronous.v1.AsyncResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun putVirtualnodeVirtualnodeshortidCpiTargetcpifilechecksumWithHttpInfo(virtualnodeshortid: kotlin.String, targetcpifilechecksum: kotlin.String, forceupgrade: kotlin.Boolean?) : ApiResponse<net.corda.rest.asynchronous.v1.AsyncResponse?> {
        val localVariableConfig = putVirtualnodeVirtualnodeshortidCpiTargetcpifilechecksumRequestConfig(virtualnodeshortid = virtualnodeshortid, targetcpifilechecksum = targetcpifilechecksum, forceupgrade = forceupgrade)

        return request<Unit, net.corda.rest.asynchronous.v1.AsyncResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putVirtualnodeVirtualnodeshortidCpiTargetcpifilechecksum
     *
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param targetcpifilechecksum The file checksum of the CPI to upgrade to.
     * @param forceupgrade Whether this upgrade should be forced regardless of OperationInProgress. (optional)
     * @return RequestConfig
     */
    fun putVirtualnodeVirtualnodeshortidCpiTargetcpifilechecksumRequestConfig(virtualnodeshortid: kotlin.String, targetcpifilechecksum: kotlin.String, forceupgrade: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (forceupgrade != null) {
                    put("forceupgrade", listOf(forceupgrade.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/virtualnode/{virtualnodeshortid}/cpi/{targetcpifilechecksum}".replace("{"+"virtualnodeshortid"+"}", encodeURIComponent(virtualnodeshortid.toString())).replace("{"+"targetcpifilechecksum"+"}", encodeURIComponent(targetcpifilechecksum.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method updates virtual node connection strings.
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest requestBody
     * @return net.corda.rest.asynchronous.v1.AsyncResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putVirtualnodeVirtualnodeshortidDb(virtualnodeshortid: kotlin.String, netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest: net.corda.libs.virtualnode.endpoints.v1.types.UpdateVirtualNodeDbRequest) : net.corda.rest.asynchronous.v1.AsyncResponse {
        val localVarResponse = putVirtualnodeVirtualnodeshortidDbWithHttpInfo(virtualnodeshortid = virtualnodeshortid, netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest = netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.rest.asynchronous.v1.AsyncResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method updates virtual node connection strings.
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest requestBody
     * @return ApiResponse<net.corda.rest.asynchronous.v1.AsyncResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun putVirtualnodeVirtualnodeshortidDbWithHttpInfo(virtualnodeshortid: kotlin.String, netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest: net.corda.libs.virtualnode.endpoints.v1.types.UpdateVirtualNodeDbRequest) : ApiResponse<net.corda.rest.asynchronous.v1.AsyncResponse?> {
        val localVariableConfig = putVirtualnodeVirtualnodeshortidDbRequestConfig(virtualnodeshortid = virtualnodeshortid, netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest = netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest)

        return request<net.corda.libs.virtualnode.endpoints.v1.types.UpdateVirtualNodeDbRequest, net.corda.rest.asynchronous.v1.AsyncResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putVirtualnodeVirtualnodeshortidDb
     *
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest requestBody
     * @return RequestConfig
     */
    fun putVirtualnodeVirtualnodeshortidDbRequestConfig(virtualnodeshortid: kotlin.String, netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest: net.corda.libs.virtualnode.endpoints.v1.types.UpdateVirtualNodeDbRequest) : RequestConfig<net.corda.libs.virtualnode.endpoints.v1.types.UpdateVirtualNodeDbRequest> {
        val localVariableBody = netCordaLibsVirtualnodeEndpointsV1TypesUpdateVirtualNodeDbRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/virtualnode/{virtualnodeshortid}/db".replace("{"+"virtualnodeshortid"+"}", encodeURIComponent(virtualnodeshortid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method updates the state of a new virtual node to one of the pre-defined values.
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param newstate State to transition virtual node instance into. Possible values are: MAINTENANCE and ACTIVE.
     * @return net.corda.libs.virtualnode.endpoints.v1.types.ChangeVirtualNodeStateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putVirtualnodeVirtualnodeshortidStateNewstate(virtualnodeshortid: kotlin.String, newstate: kotlin.String) : net.corda.libs.virtualnode.endpoints.v1.types.ChangeVirtualNodeStateResponse {
        val localVarResponse = putVirtualnodeVirtualnodeshortidStateNewstateWithHttpInfo(virtualnodeshortid = virtualnodeshortid, newstate = newstate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.virtualnode.endpoints.v1.types.ChangeVirtualNodeStateResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method updates the state of a new virtual node to one of the pre-defined values.
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param newstate State to transition virtual node instance into. Possible values are: MAINTENANCE and ACTIVE.
     * @return ApiResponse<net.corda.libs.virtualnode.endpoints.v1.types.ChangeVirtualNodeStateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun putVirtualnodeVirtualnodeshortidStateNewstateWithHttpInfo(virtualnodeshortid: kotlin.String, newstate: kotlin.String) : ApiResponse<net.corda.libs.virtualnode.endpoints.v1.types.ChangeVirtualNodeStateResponse?> {
        val localVariableConfig = putVirtualnodeVirtualnodeshortidStateNewstateRequestConfig(virtualnodeshortid = virtualnodeshortid, newstate = newstate)

        return request<Unit, net.corda.libs.virtualnode.endpoints.v1.types.ChangeVirtualNodeStateResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putVirtualnodeVirtualnodeshortidStateNewstate
     *
     * @param virtualnodeshortid Short ID of the virtual node instance to update
     * @param newstate State to transition virtual node instance into. Possible values are: MAINTENANCE and ACTIVE.
     * @return RequestConfig
     */
    fun putVirtualnodeVirtualnodeshortidStateNewstateRequestConfig(virtualnodeshortid: kotlin.String, newstate: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/virtualnode/{virtualnodeshortid}/state/{newstate}".replace("{"+"virtualnodeshortid"+"}", encodeURIComponent(virtualnodeshortid.toString())).replace("{"+"newstate"+"}", encodeURIComponent(newstate.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
