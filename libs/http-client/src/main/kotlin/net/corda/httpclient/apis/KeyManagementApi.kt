/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.httpclient.apis

import net.corda.httpclient.models.KeyMetaData
import net.corda.httpclient.models.KeyPairIdentifier

import net.corda.httpclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class KeyManagementApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getKeyGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/key/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method retrieves information about a list of key pairs belonging to a tenant.
         * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST 
         * @param skip The response paging information, number of records to skip (optional)
         * @param take The response paging information, that is, the number of records to return. The actual number returned may be less than requested. (optional)
         * @param orderby Specifies how to order the results. Can be one of &#39;NONE&#39;, &#39;TIMESTAMP&#39;, &#39;CATEGORY&#39;, &#39;SCHEME_CODE_NAME&#39;, &#39;ALIAS&#39;, &#39;MASTER_KEY_ALIAS&#39;, &#39;EXTERNAL_ID&#39;, &#39;ID&#39;, &#39;TIMESTAMP_DESC&#39;, &#39;CATEGORY_DESC&#39;, &#39;SCHEME_CODE_NAME_DESC&#39;, &#39;ALIAS_DESC&#39;, &#39;MASTER_KEY_ALIAS_DESC&#39;, &#39;EXTERNAL_ID_DESC&#39;, &#39;ID_DESC&#39;. (optional)
         * @param category Category of the HSM which handles the key pairs. Can be one of &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, &#39;JWT_KEY&#39;. (optional)
         * @param schemecodename The key pairs&#39; signature scheme name. For example, &#39;CORDA.RSA&#39;, &#39;CORDA.ECDSA.SECP256K1&#39;, &#39;CORDA.ECDSA.SECP256R1&#39;, &#39;CORDA.EDDSA.ED25519&#39;, &#39;CORDA.SPHINCS-256&#39;. (optional)
         * @param alias The alias under which the key pair is stored (optional)
         * @param masterkeyalias The alias of the wrapping key (optional)
         * @param createdafter Only include key pairs which were created on or after the specified time. Must be a valid instant in UTC, such as 2022-12-03T10:15:30.00Z. (optional)
         * @param createdbefore Only include key pairs which were created on or before the specified time. Must be a valid instant in UTC, such as 2022-12-03T10:15:30.00Z. (optional)
         * @param id Only include key pairs associated with the specified list of key IDs. If specified, other filter parameters will be ignored. (optional)
         * @return kotlin.collections.Map<kotlin.String, KeyMetaData>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getKeyTenantid(tenantid: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, orderby: kotlin.String?, category: kotlin.String?, schemecodename: kotlin.String?, alias: kotlin.String?, masterkeyalias: kotlin.String?, createdafter: kotlin.String?, createdbefore: kotlin.String?, id: kotlin.collections.List<kotlin.String>?): HttpResponse<kotlin.collections.Map<kotlin.String, KeyMetaData>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            skip?.apply { localVariableQuery["skip"] = listOf("$skip") }
            take?.apply { localVariableQuery["take"] = listOf("$take") }
            orderby?.apply { localVariableQuery["orderby"] = listOf("$orderby") }
            category?.apply { localVariableQuery["category"] = listOf("$category") }
            schemecodename?.apply { localVariableQuery["schemecodename"] = listOf("$schemecodename") }
            alias?.apply { localVariableQuery["alias"] = listOf("$alias") }
            masterkeyalias?.apply { localVariableQuery["masterkeyalias"] = listOf("$masterkeyalias") }
            createdafter?.apply { localVariableQuery["createdafter"] = listOf("$createdafter") }
            createdbefore?.apply { localVariableQuery["createdbefore"] = listOf("$createdbefore") }
            id?.apply { localVariableQuery["id"] = toMultiValue(this, "multi") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/key/{tenantid}".replace("{" + "tenantid" + "}", "$tenantid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method retrieves a tenant&#39;s public key in PEM format.
         * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST 
         * @param keyid Identifier of the public key to be retrieved 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getKeyTenantidKeyid(tenantid: kotlin.String, keyid: kotlin.String): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/key/{tenantid}/{keyid}".replace("{" + "tenantid" + "}", "$tenantid").replace("{" + "keyid" + "}", "$keyid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method retrieves a list of supported key schemes for a specified tenant and HSM category.
         * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST 
         * @param hsmcategory The category of the HSM. Can be the value &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, or &#39;JWT_KEY&#39; 
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getKeyTenantidSchemesHsmcategory(tenantid: kotlin.String, hsmcategory: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/key/{tenantid}/schemes/{hsmcategory}".replace("{" + "tenantid" + "}", "$tenantid").replace("{" + "hsmcategory" + "}", "$hsmcategory"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method generates a new key pair for a tenant.
         * @param tenantid Can either be a holding identity ID, the value &#39;p2p&#39; for a cluster-level tenant of the P2P services, or the value &#39;rest&#39; for a cluster-level tenant of the REST 
         * @param alias The alias under which the new key pair will be stored 
         * @param hsmcategory Category of the HSM which handles the key pairs. Can be one of &#39;ACCOUNTS&#39;, &#39;CI&#39;, &#39;LEDGER&#39;, &#39;NOTARY&#39;, &#39;SESSION_INIT&#39;, &#39;TLS&#39;, &#39;JWT_KEY&#39;. 
         * @param scheme The key&#39;s scheme describing which type of the key pair to generate. For example, &#39;CORDA.RSA&#39;, &#39;CORDA.ECDSA.SECP256K1&#39;, &#39;CORDA.ECDSA.SECP256R1&#39;, &#39;CORDA.EDDSA.ED25519&#39;, &#39;CORDA.SPHINCS-256&#39;. 
         * @return KeyPairIdentifier
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postKeyTenantidAliasAliasCategoryHsmcategorySchemeScheme(tenantid: kotlin.String, alias: kotlin.String, hsmcategory: kotlin.String, scheme: kotlin.String): HttpResponse<KeyPairIdentifier> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/key/{tenantid}/alias/{alias}/category/{hsmcategory}/scheme/{scheme}".replace("{" + "tenantid" + "}", "$tenantid").replace("{" + "alias" + "}", "$alias").replace("{" + "hsmcategory" + "}", "$hsmcategory").replace("{" + "scheme" + "}", "$scheme"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
