package net.corda.cli.plugin.initialconfig

import com.typesafe.config.ConfigRenderOptions
import net.corda.db.core.DbPrivilege
import net.corda.libs.configuration.datamodel.DbConnectionConfig
import net.corda.libs.configuration.secret.EncryptionSecretsServiceImpl
import net.corda.libs.configuration.secret.SecretsCreateService
import picocli.CommandLine.Command
import picocli.CommandLine.Option
import java.io.File
import java.io.FileWriter
import java.time.Instant
import java.util.UUID

@Command(
    name = "create-db-config",
    description = ["Create the SQL statements to insert the connection manager config for database"]
)
class DbConfigSubcommand : Runnable {

    @Option(
        names = ["-n", "--name"],
        required = true,
        description = ["Name of the database connection. Required."]
    )
    var connectionName: String? = null

    @Option(
        names = ["-j", "--jdbcURL"],
        required = true,
        description = ["The JDBC URL for the connection. Required."]
    )
    var jdbcUrl: String? = null

    @Option(
        names = ["-u", "--user"],
        required = true,
        description = ["User name for the database connection. Required."]
    )
    var username: String? = null

    @Option(
        names = ["-p", "--password"],
        required = true,
        description = ["Password name for the database connection. Required."]
    )
    var password: String? = null

    @Option(
        names = ["-a", "--isAdmin"],
        description = ["Whether this is an admin (DDL) connection. Defaults to false"]
    )
    var isAdmin: Boolean = false

    @Option(
        names = ["-d", "--description"],
        description = ["Detailed info on the database connection"]
    )
    var description: String = "Initial configuration - autogenerated by setup script"

    @Option(
        names = ["-s", "--salt"],
        required = true,
        description = ["Salt for the encrypting secrets service"]
    )
    var salt: String? = null

    @Option(
        names = ["-e", "--passphrase"],
        required = true,
        description = ["Passphrase for the encrypting secrets service"]
    )
    var passphrase: String? = null

    @Option(
        names = ["-l", "--location"],
        description = ["location to write the sql output to"]
    )
    var location: String? = null

    override fun run() {
        val secretsService = EncryptionSecretsServiceImpl(passphrase!!, salt!!)

        val dbConnectionConfig = DbConnectionConfig(
            id = UUID.randomUUID(),
            name = connectionName!!,
            privilege = if (isAdmin) DbPrivilege.DDL else DbPrivilege.DML,
            updateTimestamp = Instant.now(),
            updateActor = "Setup Script",
            description = description,
            config = createDbConfig(jdbcUrl!!, username!!, password!!, secretsService)
        ).also { it.version = 0 }


        val output = dbConnectionConfig.toInsertStatement()

        if (location == null) {
            println(output)
        } else {
            FileWriter(File("${location!!.removeSuffix("/")}/db-config.sql")).run {
                write(output)
                flush()
                close()
            }
        }
    }
}

fun createDbConfig(jdbcUrl: String, username: String, password: String, secretsService: SecretsCreateService): String {
    return "{\"database\":{" +
            "\"jdbc\":" +
            "{\"url\":\"$jdbcUrl\"}," +
            "\"pass\":${createSecureConfig(secretsService, password)}," +
            "\"user\":\"$username\"}}"
}

fun createSecureConfig(secretsService: SecretsCreateService, value: String): String {
    return secretsService.createValue(value).root().render(ConfigRenderOptions.concise())
}
