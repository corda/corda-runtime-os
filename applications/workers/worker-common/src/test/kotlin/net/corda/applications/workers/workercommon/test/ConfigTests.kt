package net.corda.applications.workers.workercommon.test

import net.corda.applications.workers.workercommon.HealthProvider
import net.corda.applications.workers.workercommon.Worker
import net.corda.applications.workers.workercommon.internal.PARAM_INSTANCE_ID
import net.corda.libs.configuration.SmartConfig
import net.corda.libs.configuration.SmartConfigFactoryImpl
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test

class ConfigTests {

    @Test
    fun `worker config contains provided instance ID`() {
        val expectedInstanceId = "3"

        var instanceId: Int? = null
        val worker = object : Worker(SmartConfigFactoryImpl()) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) {
                instanceId = workerConfig.getAnyRef("instanceId") as Int
            }
        }

        worker.startup(arrayOf(PARAM_INSTANCE_ID, expectedInstanceId))

        assertEquals(expectedInstanceId.toInt(), instanceId)
    }

    @Test
    fun `worker config contains autogenerated instance ID if none is provided`() {
        val iterations = 10

        val autogeneratedInstanceIds = mutableSetOf<Int>()

        val worker = object : Worker(SmartConfigFactoryImpl()) {
            override fun startup(healthProvider: HealthProvider, workerConfig: SmartConfig) {
                autogeneratedInstanceIds.add(workerConfig.getAnyRef("instanceId") as Int)
            }
        }

        repeat(iterations) {
            worker.startup(arrayOf())
        }

        // We check that there are as many items in the set as there were iterations, and thus that no two instance IDs
        // were the same.
        assertEquals(iterations, autogeneratedInstanceIds.size)
    }
}