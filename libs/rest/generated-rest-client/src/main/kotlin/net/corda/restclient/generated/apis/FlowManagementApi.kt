/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class FlowManagementApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * 
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlowGetprotocolversion() : kotlin.Int {
        val localVarResponse = getFlowGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlowGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getFlowGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlowGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getFlowGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/flow/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns an array containing the statuses of all flows for a specified holding identity, for a particular flow processing status if specified. An empty array is returned if there are no flows.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param status Processing status of a flow to filter by. For example - RUNNING, START_REQUESTED, RETRYING, COMPLETED, FAILED, KILLED (optional)
     * @return net.corda.flow.rest.v1.types.response.FlowStatusResponses
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlowHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, status: kotlin.String? = null) : net.corda.flow.rest.v1.types.response.FlowStatusResponses {
        val localVarResponse = getFlowHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash, status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.flow.rest.v1.types.response.FlowStatusResponses
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns an array containing the statuses of all flows for a specified holding identity, for a particular flow processing status if specified. An empty array is returned if there are no flows.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param status Processing status of a flow to filter by. For example - RUNNING, START_REQUESTED, RETRYING, COMPLETED, FAILED, KILLED (optional)
     * @return ApiResponse<net.corda.flow.rest.v1.types.response.FlowStatusResponses?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlowHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash: kotlin.String, status: kotlin.String?) : ApiResponse<net.corda.flow.rest.v1.types.response.FlowStatusResponses?> {
        val localVariableConfig = getFlowHoldingidentityshorthashRequestConfig(holdingidentityshorthash = holdingidentityshorthash, status = status)

        return request<Unit, net.corda.flow.rest.v1.types.response.FlowStatusResponses>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlowHoldingidentityshorthash
     *
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param status Processing status of a flow to filter by. For example - RUNNING, START_REQUESTED, RETRYING, COMPLETED, FAILED, KILLED (optional)
     * @return RequestConfig
     */
    fun getFlowHoldingidentityshorthashRequestConfig(holdingidentityshorthash: kotlin.String, status: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/flow/{holdingidentityshorthash}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method gets the current status of the specified flow instance.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param clientrequestid Client provided flow identifier
     * @return net.corda.flow.rest.v1.types.response.FlowStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlowHoldingidentityshorthashClientrequestid(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String) : net.corda.flow.rest.v1.types.response.FlowStatusResponse {
        val localVarResponse = getFlowHoldingidentityshorthashClientrequestidWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash, clientrequestid = clientrequestid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.flow.rest.v1.types.response.FlowStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method gets the current status of the specified flow instance.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param clientrequestid Client provided flow identifier
     * @return ApiResponse<net.corda.flow.rest.v1.types.response.FlowStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlowHoldingidentityshorthashClientrequestidWithHttpInfo(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String) : ApiResponse<net.corda.flow.rest.v1.types.response.FlowStatusResponse?> {
        val localVariableConfig = getFlowHoldingidentityshorthashClientrequestidRequestConfig(holdingidentityshorthash = holdingidentityshorthash, clientrequestid = clientrequestid)

        return request<Unit, net.corda.flow.rest.v1.types.response.FlowStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlowHoldingidentityshorthashClientrequestid
     *
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param clientrequestid Client provided flow identifier
     * @return RequestConfig
     */
    fun getFlowHoldingidentityshorthashClientrequestidRequestConfig(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/flow/{holdingidentityshorthash}/{clientrequestid}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())).replace("{"+"clientrequestid"+"}", encodeURIComponent(clientrequestid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method gets the result of the specified flow instance execution.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param clientrequestid Client provided flow identifier
     * @return net.corda.flow.rest.v1.types.response.FlowResultResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlowHoldingidentityshorthashClientrequestidResult(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String) : net.corda.flow.rest.v1.types.response.FlowResultResponse {
        val localVarResponse = getFlowHoldingidentityshorthashClientrequestidResultWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash, clientrequestid = clientrequestid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.flow.rest.v1.types.response.FlowResultResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method gets the result of the specified flow instance execution.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param clientrequestid Client provided flow identifier
     * @return ApiResponse<net.corda.flow.rest.v1.types.response.FlowResultResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlowHoldingidentityshorthashClientrequestidResultWithHttpInfo(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String) : ApiResponse<net.corda.flow.rest.v1.types.response.FlowResultResponse?> {
        val localVariableConfig = getFlowHoldingidentityshorthashClientrequestidResultRequestConfig(holdingidentityshorthash = holdingidentityshorthash, clientrequestid = clientrequestid)

        return request<Unit, net.corda.flow.rest.v1.types.response.FlowResultResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlowHoldingidentityshorthashClientrequestidResult
     *
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param clientrequestid Client provided flow identifier
     * @return RequestConfig
     */
    fun getFlowHoldingidentityshorthashClientrequestidResultRequestConfig(holdingidentityshorthash: kotlin.String, clientrequestid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/flow/{holdingidentityshorthash}/{clientrequestid}/result".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())).replace("{"+"clientrequestid"+"}", encodeURIComponent(clientrequestid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method starts a new instance for the specified flow for the specified holding identity.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param netCordaFlowRestV1TypesRequestStartFlowParameters requestBody
     * @return net.corda.flow.rest.v1.types.response.FlowStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postFlowHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, netCordaFlowRestV1TypesRequestStartFlowParameters: net.corda.flow.rest.v1.types.request.StartFlowParameters) : net.corda.flow.rest.v1.types.response.FlowStatusResponse {
        val localVarResponse = postFlowHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash, netCordaFlowRestV1TypesRequestStartFlowParameters = netCordaFlowRestV1TypesRequestStartFlowParameters)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.flow.rest.v1.types.response.FlowStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method starts a new instance for the specified flow for the specified holding identity.
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param netCordaFlowRestV1TypesRequestStartFlowParameters requestBody
     * @return ApiResponse<net.corda.flow.rest.v1.types.response.FlowStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postFlowHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash: kotlin.String, netCordaFlowRestV1TypesRequestStartFlowParameters: net.corda.flow.rest.v1.types.request.StartFlowParameters) : ApiResponse<net.corda.flow.rest.v1.types.response.FlowStatusResponse?> {
        val localVariableConfig = postFlowHoldingidentityshorthashRequestConfig(holdingidentityshorthash = holdingidentityshorthash, netCordaFlowRestV1TypesRequestStartFlowParameters = netCordaFlowRestV1TypesRequestStartFlowParameters)

        return request<net.corda.flow.rest.v1.types.request.StartFlowParameters, net.corda.flow.rest.v1.types.response.FlowStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postFlowHoldingidentityshorthash
     *
     * @param holdingidentityshorthash The short hash of the holding identity; obtained during node registration
     * @param netCordaFlowRestV1TypesRequestStartFlowParameters requestBody
     * @return RequestConfig
     */
    fun postFlowHoldingidentityshorthashRequestConfig(holdingidentityshorthash: kotlin.String, netCordaFlowRestV1TypesRequestStartFlowParameters: net.corda.flow.rest.v1.types.request.StartFlowParameters) : RequestConfig<net.corda.flow.rest.v1.types.request.StartFlowParameters> {
        val localVariableBody = netCordaFlowRestV1TypesRequestStartFlowParameters
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/flow/{holdingidentityshorthash}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
