import static org.gradle.api.JavaVersion.VERSION_11
import static org.gradle.jvm.toolchain.JavaLanguageVersion.of

buildscript {
    configurations.classpath {
        resolutionStrategy {
            // FORCE Gradle to use latest dynamic-version plugins.
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.allopen' apply false
    id 'org.jetbrains.kotlin.plugin.jpa' apply false
    id 'io.gitlab.arturbosch.detekt' apply false
    id 'biz.aQute.bnd.builder' apply false
    id 'idea'
    id 'application'
    id 'net.corda.cordapp.cordapp-configuration'
    id 'com.r3.internal.gradle.plugins.r3ArtifactoryPublish'
    id 'maven-publish'
    id 'jacoco'
}

wrapper {
    gradleVersion = '7.2'
    distributionType = Wrapper.DistributionType.BIN
    distributionUrl="https://gradleproxy:gradleproxy@software.r3.com/artifactory/gradle-proxy/gradle-$gradleVersion-bin.zip"
}

def javaVersion = VERSION_11

allprojects {
    if (!project.hasProperty('cordaArtifactoryUsername')) {
        ext.cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME')
    }

    if (!project.hasProperty('cordaArtifactoryPassword')) {
        ext.cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
    }

    pluginManager.withPlugin('java') {
        java {
            toolchain {
                languageVersion = of(javaVersion.majorVersion.toInteger())
            }
        }
    }

    apply plugin: 'org.jetbrains.kotlin.jvm'

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs += [ '-XDenableSunApiLintControl', '-parameters' ]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            allWarningsAsErrors = true
            languageVersion = '1.4'
            apiVersion = '1.4'
            jvmTarget = javaVersion
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                    // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                    "-Xskip-runtime-version-check",
                    "-java-parameters",
                    "-Xjvm-default=all"
            ]
        }
    }

    configurations {
        [ compileClasspath, testCompileClasspath, runtimeClasspath, testRuntimeClasspath ].forEach { cfg ->
            configureKotlinForOSGi(cfg)
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()

        doFirst {
            systemProperty 'java.io.tmpdir', buildDir.absolutePath
        }
    }

    pluginManager.withPlugin('biz.aQute.bnd.builder') {
        tasks.withType(aQute.bnd.gradle.Bndrun).configureEach {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = of(javaVersion.getMajorVersion().toInteger())
            }
        }
    }

    tasks.register('compileAll') { task ->
        description = "Compiles all the Kotlin and Java classes, including all of the test classes."
        group = "verification"

        task.dependsOn tasks.withType(AbstractCompile)
    }

    repositories {
        // TODO: you really need to use the cache, otherwise no complaining when upstream repos throttle us!
        // It would make sense to follow the template!

        // Listed the mavenLocal repository first in case people are doing a local publication of an upstream
        //  module (e.g in corda-api repo).
        //  This would ensure that the local copy is picked up if it is available.
        mavenLocal()

        //needed for kotlin osgi bundles generated by us
        maven {
            url = "$artifactoryContextUrl/corda-dependencies"
        }
        //needed for C5 binaries
        maven {
            url = "$artifactoryContextUrl/corda-os-maven"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }

        def cordaUseCache = System.getenv("CORDA_USE_CACHE")
        if (cordaUseCache != null) {
            maven {
                url = "$artifactoryContextUrl/$cordaUseCache"
                name = "R3 Maven remote repositories"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            mavenCentral()

            exclusiveContent {
                forRepository {
                    maven {
                        url 'https://repository.mulesoft.org/nexus/content/repositories/public'
                    }
                }
                filter {
                    includeGroup 'org.mule.distributions'
                    includeGroup 'antlr'
                }
            }

            // temporarily for the Liquibase patch
            // TODO: REMOVE when patched merged https://r3-cev.atlassian.net/browse/CORE-2723
            exclusiveContent {
                forRepository {
                    maven {
                        url "$artifactoryContextUrl/corda-dependencies-dev"
                    }
                }
                filter {
                    includeGroup 'org.liquibase'
                }
            }
        }
    }

    sourceSets {
        integrationTest {
            java {
                srcDirs += [ 'src/integration-test/java' ]
            }
            kotlin {
                srcDirs += [ 'src/integration-test/kotlin' ]
            }
            resources {
                srcDirs = [ 'src/integration-test/resources' ]
            }
        }
    }

    kotlin {
        target {
            java
            compilations.integrationTest {
                associateWith compilations.main
                associateWith compilations.test

                configurations {
                    integrationTestApi.extendsFrom testApi
                    integrationTestImplementation.extendsFrom testImplementation
                    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

                    [ integrationTestCompileClasspath, integrationTestRuntimeClasspath ].forEach { cfg ->
                        configureKotlinForOSGi(cfg)
                    }
                }
            }
        }
    }

    dependencies {
        // Test utilities
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    }
}

// Ensure that we both compile and run using Kotlin OSGi bundles.
// We must ONLY invoke this for Kotlin's classpath configurations.
void configureKotlinForOSGi(Configuration configuration) {
    configuration.resolutionStrategy {
        dependencySubstitution {
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk7') with module("net.corda.kotlin:kotlin-stdlib-jdk7-osgi:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-reflect') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion")
        }
    }
}

logger.quiet("********************** CORDA FLOW WORKER BUILD **********************")
if (JavaVersion.current() != javaVersion) {
    throw new GradleException("The java version used ${JavaVersion.current()} is not the expected version ${javaVersion}.")
}
logger.quiet("SDK version: {}", JavaVersion.current())
logger.quiet("JAVA HOME {}", System.getProperty("java.home"))

def cordaVersion = "$cordaProductVersion.$cordaRuntimeRevision"
if (System.getenv("RELEASE_VERSION")?.trim()) {
    version = System.getenv("RELEASE_VERSION")
} else {
    def versionSuffix = '-SNAPSHOT'
    if(project.hasProperty('overridePublishVersionSuffix')) {
        versionSuffix = project.property('overridePublishVersionSuffix')
    } else if (System.getenv('VERSION_SUFFIX')) {
        versionSuffix = System.getenv('VERSION_SUFFIX')
    }
    version = "$cordaVersion$versionSuffix"
}
logger.quiet("Corda runtime OS release version: {}", version)
logger.quiet("Corda API dependency version spec: {}", cordaApiVersion)
logger.quiet("Old Corda dependencies version spec: {}", cordaVersion)
//logger.quiet("Release Type: {}", releaseType)
if ("${compositeBuild}".toBoolean() && file("${cordaApiLocation}").exists()) {
    logger.quiet( "Corda-Api project exists on disk in the expected location and Gradle composite build is enabled, corda-api binaries will be substituted with source code")
}

subprojects {
    buildscript {
        configurations.classpath {
            // FORCE Gradle to use latest dynamic-version plugins.
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-jpa'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'jacoco'

    version rootProject.version
    group 'net.corda'

    idea{
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    detekt {
        baseline = file("$projectDir/detekt-baseline.xml")
        config.setFrom(files("$rootDir/detekt-config.yml"))
        parallel = true
        reports {
            xml {
                enabled = true
                destination = file("$projectDir/build/detekt-report.xml")
            }
            html {
                enabled = false
            }
            txt {
                enabled = false
            }
        }
    }

    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"
    }

    task allDependencyInsight(type: DependencyInsightReportTask) {}

    configurations {
        all {
            resolutionStrategy {
                // FORCE Gradle to use latest dynamic versions.
                cacheDynamicVersionsFor 0, 'seconds'

                dependencySubstitution {
                    substitute module("antlr:antlr") using module("antlr:antlr.osgi:$antlrVersion")
                    substitute module("org.dom4j:dom4j") using module("org.apache.servicemix.bundles:org.apache.servicemix.bundles.dom4j:$dom4jOsgiVersion")
                }
            }
        }
    }

    allOpen {
        annotations(
            "javax.persistence.Entity",
            "javax.persistence.Embeddable",
            "javax.persistence.MappedSuperclass"
        )
    }
}
