import aQute.bnd.gradle.Bundle

plugins {
    id 'corda.common-library'
    id 'corda.osgi-test-conventions'
    id 'corda.common-publishing'
    id 'org.jetbrains.kotlin.jvm'
}

description 'Corda Sandbox Internals'

configurations {
    cpbs {
        canBeConsumed = false
        transitive = false
    }
}

dependencies {
    compileOnly 'org.osgi:org.osgi.service.component.annotations'
    compileOnly "org.osgi:osgi.annotation"
    compileOnly "org.osgi:osgi.core"
    compileOnly "co.paralleluniverse:quasar-osgi-annotations:$quasarVersion"
    api 'org.jetbrains.kotlin:kotlin-osgi-bundle'
    implementation "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"
    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation project(':libs:crypto:crypto-core')
    implementation project(":libs:packaging:packaging")
    implementation 'net.corda:corda-serialization'
    implementation project(':libs:sandbox')
    runtimeOnly project(':libs:sandbox-hooks')

    testCompileOnly 'org.osgi:osgi.core'
    testImplementation project(":testing:crypto-testkit")
    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    testRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    cpbs project(path: 'sandbox-cpk-one', configuration: 'cordaCPB')
    cpbs project(path: 'sandbox-cpk-three', configuration: 'cordaCPB')
    cpbs project(path: 'sandbox-fragment-cpk', configuration: 'cordaCPB')
    cpbs project(path: 'sandbox-irresolvable-cpk', configuration: 'cordaCPB')
    cpbs project(path: 'sandbox-shadow-cpk', configuration: 'cordaCPB')

    integrationTestImplementation project(':testing:sandboxes')
    integrationTestImplementation "net.corda:corda-application"
    integrationTestRuntimeOnly project(':libs:crypto:cipher-suite-impl')
    integrationTestRuntimeOnly project(':libs:lifecycle:lifecycle-impl')
    integrationTestRuntimeOnly project(':libs:messaging:messaging-impl')
    integrationTestRuntimeOnly project(':libs:messaging:db-message-bus-impl')
}

def integrationTestResources = tasks.named('processIntegrationTestResources', ProcessResources) {
    from(configurations.cpbs) {
        into 'META-INF'
        rename "(.*)-\\Q${version}\\E-package.cpb", "\$1.cpb"
    }
}

tasks.named('testingBundle', Bundle) {
    dependsOn integrationTestResources
}
