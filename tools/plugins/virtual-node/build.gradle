plugins {
    id 'distribution'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
}

group 'net.corda.cli.deployment'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation project(":libs:http-rpc:http-rpc-client")
    implementation project(":libs:virtual-node:virtual-node-endpoints-maintenance")

    compileOnly "net.corda.cli.host:api:${pluginHostVersion}"

    compileOnly "org.pf4j:pf4j:${pf4jVersion}"
    kapt "org.pf4j:pf4j:${pf4jVersion}"

    testImplementation "net.corda.cli.host:api:${pluginHostVersion}"
    testImplementation "org.pf4j:pf4j:${pf4jVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
}

// the plugin task will put the files into a jar file with the correct manifest
def plugin = tasks.register('plugin', Jar) {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveBaseName = "plugin-$pluginId-$version"

    manifest {
        attributes['Plugin-Class'] = pluginClass
        attributes['Plugin-Id'] = pluginId
        attributes['Plugin-Version'] = version
        attributes['Plugin-Provider'] = pluginProvider
        attributes['Plugin-Description'] = pluginDescription
    }

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "module-info.class"
        exclude "META-INF/versions/*/module-info.class"

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

tasks.named("installDist") {
    dependsOn plugin
    def homePath = System.properties['user.home']
    from plugin
    into "$homePath/.corda/cli/plugins"
}

artifacts {
    archives plugin
}
