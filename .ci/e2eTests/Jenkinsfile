// TODO: Change this when the version in gradle.properties had changed
def cordaVersion = '5.0.0-1626712413904-beta'

@Field
String postgresHost = 'localhost'
@Field
String postgresPort = '5432'
@Field
String postgresCredentialsId = 'e2e-postgresql-credentials'
@Field
String postgresDb = "test_${UUID.randomUUID()}"

pipeline {
    agent {
        docker {
            image 'build-zulu-openjdk:11'
            label 'docker'
            registryUrl 'https://engineering-docker.software.r3.com/'
            registryCredentialsId 'artifactory-credentials'
            // Used to mount storage from the host as a volume to persist the cache between builds
            args '-v /tmp:/host_tmp'
            // make sure build image is always fresh
            alwaysPull true
        }
    }

    parameters {
        string(defaultValue: "1623074066759-rc",
            description: 'The corda version suffix - This will be ignored',
            name: 'UPSTREAM_VERSION_SUFFIX')
        string(defaultValue: "",
            description: 'Up String project name',
            name: 'UPSTREAM_PROJECT_NAME')
    }

    environment {
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        CORDA_ARTIFACTORY_USERNAME = "${env.ARTIFACTORY_CREDENTIALS_USR}"
        CORDA_ARTIFACTORY_PASSWORD = "${env.ARTIFACTORY_CREDENTIALS_PSW}"
        CORDA_USE_CACHE = "corda-remotes"
        GRADLE_USER_HOME = "/host_tmp/gradle"
        CORDA_REVISION = "${env.GIT_COMMIT}"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
        timeout(time: 120, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Prepare') {
            steps {
               sh 'mkdir -p "${GRADLE_USER_HOME}"'
            }
        }
        stage('Download Corda maven artifacts') {
            when {
                expression { return !params.UPSTREAM_PROJECT_NAME.isEmpty() }
            }
            steps {
                sh 'mkdir -p /tmp/artifacts/mavenLocal'
                copyArtifacts projectName: params.UPSTREAM_PROJECT_NAME,
                    selector: upstream(),
                    fingerprintArtifacts: true,
                    filter: 'mavenLocal.tar.gz'
                sh 'tar -xvf mavenLocal.tar.gz -C /tmp/artifacts/mavenLocal'
                sh 'rm -rf mavenLocal.tar.gz'
                echo "Before: $cordaVersion"
                script {
                    cordaVersion = sh (script: 'find /tmp/artifacts/mavenLocal/net/corda/corda-base-internal/* -type d | awk -F/ \'{print $NF}\'', returnStdout: true).trim()
                }
                echo "After: $cordaVersion"
            }
        }
        stage('Build') {
            steps {
                sh "./gradlew clean build -Dmaven.repo.local=/tmp/artifacts/mavenLocal -PcordaVersion=${cordaVersion}"
            }
        }
    }
        stage('Create DBs') {
                        when {
                            expression { return config.createPostgresDb }
                        }
                        steps {
                            // port forwarding from K8s
                            withEnv(["PGPORT=${postgresPort}"]) {
                                withCredentials([file(credentialsId: 'e2e-tests-credentials', variable: 'KUBECONFIG')]) {
                                    sh 'kubectl port-forward --namespace postgres svc/postgres-postgresql "${PGPORT}":"${PGPORT}" &'
                                }
                            }
                            // create new DB
                            withEnv([
                                "PGHOST=${postgresHost}",
                                "PGPORT=${postgresPort}",
                                "DATABASE=${postgresDb}"
                            ]) {
                                withCredentials([usernamePassword(credentialsId: postgresCredentialsId,
                                    passwordVariable: 'PGPASSWORD',
                                    usernameVariable: 'PGUSER')]) {
                                    // wait for port-forwarding
                                    sh '''\
                                        maxTries=3
                                        while ! psql --quiet --tuples-only -c 'select 1'
                                        do
                                            maxTries=`expr ${maxTries} - 1`
                                            if [ ${maxTries} -eq 0 ]
                                            then
                                                echo "Waiting for database connection timeout out!!!!" >&2
                                                exit 1
                                            fi
                                            echo "Port forwarding for Postgres has been set up yet, ${maxTries} left"
                                            sleep 5
                                        done
                                    '''.stripIndent()
                                    sh 'createdb -w "${DATABASE}"'
                                }
                            }
                        }
        }
        stage('Tests and Code Quality') {
                        parallel {
                            stage('Unit Tests') {
                                options {
                                    timeout(time: 30, unit: 'MINUTES')
                                }
                                steps {
                                    gradlew('test')
                                }
                            }
                            stage('Integration Tests') {
                                when {
                                    expression { return config.runIntegrationTests == true }
                                }
                                options {
                                    timeout(time: 30, unit: 'MINUTES')
                                }
                                steps {
                                    script {
                                        if (config.createPostgresDb) {
                                            withCredentials([usernamePassword(credentialsId: postgresCredentialsId,
                                                passwordVariable: 'PGPASSWORD',
                                                usernameVariable: 'PGUSER')]) {
                                                gradlew('integrationTest', "-PpostgresHost=${postgresHost}", "-PpostgresPort=${postgresPort}", "-PpostgresDb=${postgresDb}", '-PpostgresUser="${PGUSER}"', '-PpostgresPassword="${PGPASSWORD}"')
                                            }
                                        } else {
                                            gradlew('integrationTest')
                                        }
                                    }
                                }
                            }
    post {
        cleanup {
            junit allowEmptyResults: true, testResults: '**/build/test-results/**/TEST-*.xml'
            archiveArtifacts artifacts: '**/build/test-results/**/TEST-*.xml', fingerprint: true
            recordIssues(
                enabledForFailure: true, aggregatingResults: true,
                tools: [kotlin(), java(), detekt(pattern: '**/build/detekt-report.xml')]
            )
            script {
                                if (config.createPostgresDb) {
                                    withEnv([
                                        "PGHOST=${postgresHost}",
                                        "PGPORT=${postgresPort}",
                                        "DATABASE=${postgresDb}"
                                    ]) {
                                        withCredentials([usernamePassword(credentialsId: postgresCredentialsId,
                                            passwordVariable: 'PGPASSWORD',
                                            usernameVariable: 'PGUSER')]) {
                                            sh 'dropdb -w "${DATABASE}" || true'
                                        }
                                    }
                                }
            }
            jacoco(
                execPattern: '**/build/**/*.exec',
                runAlways: true,
                sourcePattern: '**/src/main/java,**/src/main/kotlin',
                classPattern: "**/build/classes/kotlin/main,**/build/classes/java/main",
                inclusionPattern: "net/corda/**,com/corda/**"
            )
        }
        success {
            sh 'rm -rf **/build/test-results/**/TEST-*.xml'
        }
    }
}
