/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class RBACPermissionApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * This method returns permissions which satisfy supplied query criteria.
     * @param limit The maximum number of results to return. The value must be in the range [1..1000].
     * @param permissiontype The permission type to be returned.
     * @param groupvisibility Optional group visibility for a permission. (optional)
     * @param virtualnode Optional virtual node the permissions apply to. (optional)
     * @param permissionstringprefix Optional permission string prefix for permissions to be located. (optional)
     * @return kotlin.collections.List<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPermission(limit: kotlin.Int, permissiontype: kotlin.String, groupvisibility: kotlin.String? = null, virtualnode: kotlin.String? = null, permissionstringprefix: kotlin.String? = null) : kotlin.collections.List<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType> {
        val localVarResponse = getPermissionWithHttpInfo(limit = limit, permissiontype = permissiontype, groupvisibility = groupvisibility, virtualnode = virtualnode, permissionstringprefix = permissionstringprefix)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns permissions which satisfy supplied query criteria.
     * @param limit The maximum number of results to return. The value must be in the range [1..1000].
     * @param permissiontype The permission type to be returned.
     * @param groupvisibility Optional group visibility for a permission. (optional)
     * @param virtualnode Optional virtual node the permissions apply to. (optional)
     * @param permissionstringprefix Optional permission string prefix for permissions to be located. (optional)
     * @return ApiResponse<kotlin.collections.List<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPermissionWithHttpInfo(limit: kotlin.Int, permissiontype: kotlin.String, groupvisibility: kotlin.String?, virtualnode: kotlin.String?, permissionstringprefix: kotlin.String?) : ApiResponse<kotlin.collections.List<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType>?> {
        val localVariableConfig = getPermissionRequestConfig(limit = limit, permissiontype = permissiontype, groupvisibility = groupvisibility, virtualnode = virtualnode, permissionstringprefix = permissionstringprefix)

        return request<Unit, kotlin.collections.List<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPermission
     *
     * @param limit The maximum number of results to return. The value must be in the range [1..1000].
     * @param permissiontype The permission type to be returned.
     * @param groupvisibility Optional group visibility for a permission. (optional)
     * @param virtualnode Optional virtual node the permissions apply to. (optional)
     * @param permissionstringprefix Optional permission string prefix for permissions to be located. (optional)
     * @return RequestConfig
     */
    fun getPermissionRequestConfig(limit: kotlin.Int, permissiontype: kotlin.String, groupvisibility: kotlin.String?, virtualnode: kotlin.String?, permissionstringprefix: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("limit", listOf(limit.toString()))
                put("permissiontype", listOf(permissiontype.toString()))
                if (groupvisibility != null) {
                    put("groupvisibility", listOf(groupvisibility.toString()))
                }
                if (virtualnode != null) {
                    put("virtualnode", listOf(virtualnode.toString()))
                }
                if (permissionstringprefix != null) {
                    put("permissionstringprefix", listOf(permissionstringprefix.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/permission",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPermissionGetprotocolversion() : kotlin.Int {
        val localVarResponse = getPermissionGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPermissionGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getPermissionGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPermissionGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getPermissionGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/permission/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method returns the permission associated with the specified ID.
     * @param id ID of the permission to be returned.
     * @return net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPermissionId(id: kotlin.String) : net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType {
        val localVarResponse = getPermissionIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method returns the permission associated with the specified ID.
     * @param id ID of the permission to be returned.
     * @return ApiResponse<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPermissionIdWithHttpInfo(id: kotlin.String) : ApiResponse<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType?> {
        val localVariableConfig = getPermissionIdRequestConfig(id = id)

        return request<Unit, net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPermissionId
     *
     * @param id ID of the permission to be returned.
     * @return RequestConfig
     */
    fun getPermissionIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/permission/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method creates a new permission.
     * @param netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType requestBody
     * @return net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postPermission(netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType: net.corda.libs.permissions.endpoints.v1.permission.types.CreatePermissionType) : net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType {
        val localVarResponse = postPermissionWithHttpInfo(netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType = netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method creates a new permission.
     * @param netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType requestBody
     * @return ApiResponse<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postPermissionWithHttpInfo(netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType: net.corda.libs.permissions.endpoints.v1.permission.types.CreatePermissionType) : ApiResponse<net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType?> {
        val localVariableConfig = postPermissionRequestConfig(netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType = netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType)

        return request<net.corda.libs.permissions.endpoints.v1.permission.types.CreatePermissionType, net.corda.libs.permissions.endpoints.v1.permission.types.PermissionResponseType>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postPermission
     *
     * @param netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType requestBody
     * @return RequestConfig
     */
    fun postPermissionRequestConfig(netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType: net.corda.libs.permissions.endpoints.v1.permission.types.CreatePermissionType) : RequestConfig<net.corda.libs.permissions.endpoints.v1.permission.types.CreatePermissionType> {
        val localVariableBody = netCordaLibsPermissionsEndpointsV1PermissionTypesCreatePermissionType
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/permission",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method creates a set of permissions and optionally assigns them to the existing roles.
     * @param netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType requestBody
     * @return net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsResponseType
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postPermissionBulk(netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType: net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsRequestType) : net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsResponseType {
        val localVarResponse = postPermissionBulkWithHttpInfo(netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType = netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsResponseType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method creates a set of permissions and optionally assigns them to the existing roles.
     * @param netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType requestBody
     * @return ApiResponse<net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsResponseType?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postPermissionBulkWithHttpInfo(netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType: net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsRequestType) : ApiResponse<net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsResponseType?> {
        val localVariableConfig = postPermissionBulkRequestConfig(netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType = netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType)

        return request<net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsRequestType, net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsResponseType>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postPermissionBulk
     *
     * @param netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType requestBody
     * @return RequestConfig
     */
    fun postPermissionBulkRequestConfig(netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType: net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsRequestType) : RequestConfig<net.corda.libs.permissions.endpoints.v1.permission.types.BulkCreatePermissionsRequestType> {
        val localVariableBody = netCordaLibsPermissionsEndpointsV1PermissionTypesBulkCreatePermissionsRequestType
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/permission/bulk",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
