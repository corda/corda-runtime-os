import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import static org.gradle.api.JavaVersion.VERSION_11
import io.gitlab.arturbosch.detekt.DetektPlugin

buildscript {
    repositories {
        maven {
            url "$artifactoryContextUrl/corda-releases"
        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.allopen' apply false
    id 'org.jetbrains.kotlin.plugin.noarg' apply false
    id 'io.gitlab.arturbosch.detekt' apply false
    id 'idea'
    id 'application'
    id 'com.jfrog.artifactory'
    id 'maven-publish'
    id 'corda.publish'
    id 'jacoco'
}

wrapper {
    gradleVersion = '6.8.3'
    distributionType = Wrapper.DistributionType.BIN
    distributionUrl="https://gradleproxy:gradleproxy@software.r3.com/artifactory/gradle-proxy/gradle-$gradleVersion-bin.zip"
}


allprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'

    group 'net.corda'
    version flowworkerVersion

    tasks.withType(JavaCompile) {
        sourceCompatibility = VERSION_11
        targetCompatibility = VERSION_11
        options.encoding = 'UTF-8'
        options.compilerArgs += '-XDenableSunApiLintControl'
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            allWarningsAsErrors = true
            languageVersion = '1.4'
            apiVersion = '1.4'
            jvmTarget = VERSION_11
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                    // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                    "-Xskip-runtime-version-check",
                    "-java-parameters"
            ]
        }
    }

    repositories {
        //repo for CI builds,
        maven {
            url = "$artifactoryContextUrl/corda-ent-maven-unstable"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
        //repo for dev builds
        maven {
            url = "$artifactoryContextUrl/corda-ent-maven-dev"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
        //needed for kotlin osgi bundles generated by us
        maven {
            url = "$artifactoryContextUrl/corda-dependencies"
        }
        //needed for C5 binaries
        maven {
            url = "$artifactoryContextUrl/corda-os-maven-unstable"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
        mavenCentral()
        //TODO remove this when we can as its only needed for kotlinx-html-jvm
        jcenter()
        mavenLocal()
    }

    sourceSets {
        integrationTest {
            kotlin {
                srcDirs = [ 'src/integration-test/kotlin' ]
            }
            resources {
                srcDirs = [ 'src/integration-test/resources' ]
            }
        }
    }

    configurations {
        integrationTestApi.extendsFrom testApi
        integrationTestCompileOnly.extendsFrom testCompileOnly
        integrationTestImplementation.extendsFrom testImplementation
    }

    dependencies {
        // Exported as OSGi 'system packages extra' at runtime by the `osgi-framework-bootstrap` module.
        implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
        implementation "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"

        // Test utilities
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    }

    tasks.named("test", Test).configure {
        useJUnitPlatform()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-noarg'
    apply plugin: DetektPlugin
    apply plugin: 'jacoco'

    detekt {
        baseline = file("$projectDir/detekt-baseline.xml")
        config.setFrom(files("$rootDir/detekt-config.yml"))
        parallel = true
        reports {
            xml {
                enabled = true
                destination = file("$projectDir/build/detekt-report.xml")
            }
            html {
                enabled = false
            }
            txt {
                enabled = false
            }
        }
    }

    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"
    }
}

