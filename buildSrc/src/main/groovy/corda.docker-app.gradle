plugins {
    id 'corda.common-app'
}

configurations {
    dockerImage {
        canBeConsumed = false
        transitive = false
    }

    dockerImageJdbc {
        canBeConsumed = false
        transitive = false
    }

    profilerAgent {
        canBeConsumed = false
        visible = false
    }
}

if (enableProfiling.toBoolean()) {
    dependencies {
        // Unzip the Java profiler into the Docker image.
        profilerAgent "com.yourkit.corda:yourkit-agent-linux-x86-64:$profilerVersion@zip"
        dockerImage provider { zipTree(configurations.profilerAgent.singleFile) }
    }
}

tasks.register('publishBuildkitImage' , BuildkitBuild) {
    def buildBaseDir = it.temporaryDir.toString()
    def containerizationDir ="$buildBaseDir/containerization/"
    def driverDir = "$buildBaseDir/jdbc-driver/"
    def containerLocation = '/opt/override/'
    def driverLocation = '/opt/jdbc-driver'
    it.sourceFiles.setFrom(tasks.named('appJar', Jar))
    it.extraSourceFiles.setFrom(configurations.dockerImage)
    it.jdbcDriverFiles.setFrom(configurations.dockerImageJdbc)
    it.useShortName = true
    String containerName = project.name
    String containerTag = ''

    if (project.hasProperty('baseImage')) {
        baseImageName = baseImage
    }

    if(project.hasProperty('Tag')){
        containerTag = Tag
    }

    List<String> javaArgs = new ArrayList<String>(it.arguments.get())
    javaArgs.add("-Dlog4j2.debug=\${ENABLE_LOG4J2_DEBUG:-false}")
    javaArgs.add("-Dlog4j.configurationFile=\${LOG4J_CONFIG_FILE}")

    def baseImageName = "${it.baseImageTag.get().empty ? it.baseImageName.get() : "${it.baseImageName.get()}:${it.baseImageTag.get()}"}"
    def finalName = "${containerTag.isEmpty() ? containerName : "${containerName}:${containerTag}"}"

    String systemCommand
    String systemPrefix
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        systemCommand = 'powershell'
        systemPrefix = '/c'
    } else{
        systemCommand = 'bash'
        systemPrefix = '-c'
    }

    String[] baseCommand = ["buildctl", "--addr tcp://localhost:3476", "build", "--frontend=dockerfile.v0" , "--local context=/" , "--local dockerfile=${project.rootDir.toString() + "/docker"}"]
    String[] opts = ["--opt build-arg:BASE_IMAGE=${baseImageName}" , "--opt build-arg:BUILD_PATH=${containerizationDir}" , "--opt build-arg:JAR_LOCATION=${containerLocation}" , "--opt build-arg:JDBC_PATH=${driverDir}" , "--opt build-arg:JDBC_DRIVER_LOCATION=${driverLocation}" , "--opt build-arg:IMAGE_ENTRYPOINT=\"exec java ${javaArgs.join(" ")} -jar  ${containerLocation}${containerName}.jar\" "]
    String[] commandTail = ["--output type=image,name=docker-js-temp.software.r3.com/corda-os-${finalName},push=true" , "--export-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache" , "--import-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache" ]
    
    String[] buildkitCommand = baseCommand + opts + commandTail
    String command = buildkitCommand.join(" ")

    doLast {
        exec{
            workingDir("${project.rootDir}")
            commandLine systemCommand, systemPrefix, buildkitCommand.join(" ")
        }
    }
}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    it.sourceFiles.setFrom(tasks.named('appJar', Jar))
    it.extraSourceFiles.setFrom(configurations.dockerImage)
    it.jdbcDriverFiles.setFrom(configurations.dockerImageJdbc)
    it.useShortName = true

    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }

    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    if (project.hasProperty('baseImage')) {
        baseImageName = baseImage
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
}
