import aQute.bnd.gradle.Resolve

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'corda.common-publishing'
    id 'corda.common-library'
}

description 'Corda Driver engine components'

configurations {
    cpbs {
        canBeConsumed = false
    }
}

dependencies {
    compileOnly 'org.osgi:osgi.core'
    compileOnly 'org.osgi:org.osgi.service.component.annotations'
    compileOnly "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"
    compileOnly "org.osgi:org.osgi.service.cm:$osgiCmVersion"
    compileOnly "co.paralleluniverse:quasar-osgi-annotations:$quasarVersion"
    compileOnly project(':testing:driver')

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation 'net.corda:corda-avro-schema'
    implementation 'net.corda:corda-config-schema'
    implementation 'net.corda:corda-db-schema'
    implementation 'net.corda:corda-topic-schema'
    implementation project(':components:crypto:crypto-persistence')
    implementation project(':components:crypto:crypto-softhsm-impl')
    implementation project(':components:db:db-connection-manager')
    implementation project(':components:flow:flow-mapper-service')
    implementation project(':components:flow:flow-p2p-filter-service')
    implementation project(':components:flow:flow-service')
    implementation project(':components:ledger:ledger-persistence')
    implementation project(':components:ledger:ledger-verification')
    implementation project(':components:membership:group-policy')
    implementation project(':components:membership:membership-group-read')
    implementation project(':components:persistence:entity-processor-service-impl')
    implementation project(':components:persistence:persistence-service-common')
    implementation project(':components:uniqueness:uniqueness-checker-impl')
    implementation project(':components:virtual-node:cpi-info-read-service')
    implementation project(':components:virtual-node:cpk-read-service')
    implementation project(':components:virtual-node:sandbox-group-context-service')
    implementation project(':components:virtual-node:virtual-node-info-read-service')
    implementation project(':libs:configuration:configuration-core')
    implementation project(':libs:crypto:crypto-impl')
    implementation project(':libs:db:db-admin')
    implementation project(':libs:db:db-core')
    implementation project(':libs:flows:external-event-responses')
    implementation project(':libs:flows:flow-mapper')
    implementation project(':libs:flows:flow-utils')
    implementation project(':libs:layered-property-map')
    implementation project(':libs:messaging:messaging')
    implementation project(':libs:messaging:message-bus')
    implementation project(':libs:platform-info')
    implementation project(':libs:schema-registry:schema-registry')
    implementation project(':libs:serialization:serialization-avro')
    implementation project(':libs:virtual-node:sandbox-group-context')
    implementation project(':testing:packaging-test-utilities')

    runtimeOnly "com.sun.activation:javax.activation:$activationVersion"
    runtimeOnly project(':components:ledger:ledger-consensual-flow')
    runtimeOnly project(':components:ledger:ledger-utxo-flow')
    runtimeOnly project(':components:ledger:notary-worker-selection-impl')
    runtimeOnly project(':components:uniqueness:backing-store-impl')
    runtimeOnly project(':components:uniqueness:uniqueness-checker-client-service-impl')
    runtimeOnly project(':libs:application:application-impl')
    runtimeOnly project(':libs:db:db-admin-impl')
    runtimeOnly project(':libs:db:db-orm-impl')
    runtimeOnly project(':libs:flows:external-event-responses-impl')
    runtimeOnly project(':libs:flows:flow-mapper-impl')
    runtimeOnly project(':libs:flows:session-manager-impl')
    runtimeOnly project(':libs:membership:membership-impl')
    runtimeOnly project(':libs:messaging:messaging-impl')
    runtimeOnly project(':libs:sandbox-internal')
    runtimeOnly project(':libs:schema-registry:schema-registry-impl')
    runtimeOnly project(':libs:serialization:serialization-kryo')

    cpbs project(path: ':notary-plugins:notary-plugin-non-validating:notary-plugin-non-validating-server', configuration: 'cordaCPB')
    runtimeOnly files(configurations.cpbs)

    runtimeOnly "co.paralleluniverse:quasar-core-osgi:$quasarVersion"
    runtimeOnly("co.paralleluniverse:quasar-core-osgi:$quasarVersion:framework-extension") {
        transitive = false
    }
    runtimeOnly "antlr:antlr.osgi:$antlrVersion"
    runtimeOnly "commons-beanutils:commons-beanutils:$beanutilsVersion"
    runtimeOnly "org.ops4j.pax.jdbc:pax-jdbc-hsqldb:$paxJdbcVersion"
    runtimeOnly "org.hsqldb:hsqldb:$hsqldbVersion"

    testRuntimeOnly project(':testing:driver')
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn tasks.named('jar', Jar)
    bundles = files(sourceSets.test.runtimeClasspath, configurations.archives.artifacts.files)
    bndrun = file('test.bndrun')
    outputBndrun = layout.buildDirectory.file('resolved-test.bndrun')
    doFirst {
        //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
        System.setProperty('bnd.home.dir', "$rootDir/bnd")
    }
}

tasks.named('check') {
    dependsOn resolve
}
