{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "HttpRpcContext OpenApiCompatibilityTest",
    "description" : "HttpRpcContext OpenApiCompatibilityTest",
    "version" : "1"
  },
  "servers" : [ {
    "url" : "/api/v1"
  } ],
  "security" : [ {
    "basicAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "CertificatesRpcOps",
    "description" : "Certificates API"
  }, {
    "name" : "ConfigRPCOps",
    "description" : "Cluster configuration management endpoints"
  }, {
    "name" : "CpiUploadRPCOps",
    "description" : "Cpi Upload management endpoints"
  }, {
    "name" : "FlowClassRPCOps",
    "description" : "Startable flow classes endpoint"
  }, {
    "name" : "FlowRPCOps",
    "description" : "Flow management endpoints"
  }, {
    "name" : "Hello RPC Ops",
    "description" : "Hello RPC Ops endpoints"
  }, {
    "name" : "HsmRpcOps",
    "description" : "HSM API"
  }, {
    "name" : "KeysRpcOps",
    "description" : "Keys API"
  }, {
    "name" : "MemberLookupRpcOps",
    "description" : "Membership Lookup APIs"
  }, {
    "name" : "MemberRegistrationRpcOps",
    "description" : "Membership Registration APIs"
  }, {
    "name" : "NetworkRpcOps",
    "description" : "Network API"
  }, {
    "name" : "PermissionEndpoint",
    "description" : "Permissions Management APIs"
  }, {
    "name" : "RoleEndpoint",
    "description" : "Role Management APIs"
  }, {
    "name" : "Stub rpc ops",
    "description" : "Stub rpc ops endpoints"
  }, {
    "name" : "UserEndpoint",
    "description" : "User Management APIs"
  }, {
    "name" : "VirtualNodeMaintenanceRPCOps",
    "description" : "Virtual node maintenance endpoints"
  }, {
    "name" : "VirtualNodeRPCOps",
    "description" : "Virtual node management endpoints"
  } ],
  "paths" : {
    "/certificates/getprotocolversion" : {
      "get" : {
        "tags" : [ "CertificatesRpcOps" ],
        "description" : "",
        "operationId" : "get_certificates_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/certificates/{tenantid}" : {
      "put" : {
        "tags" : [ "CertificatesRpcOps" ],
        "description" : "Import certificate.",
        "operationId" : "put_certificates__tenantid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "alias" : {
                    "type" : "string",
                    "description" : "The certificate alias.",
                    "nullable" : false,
                    "example" : "string"
                  },
                  "certificate" : {
                    "uniqueItems" : false,
                    "type" : "array",
                    "nullable" : false,
                    "items" : {
                      "type" : "string",
                      "description" : "A file to upload.",
                      "format" : "binary",
                      "example" : "No example available for this type"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/certificates/{tenantid}/{keyid}" : {
      "post" : {
        "tags" : [ "CertificatesRpcOps" ],
        "description" : "Generate certificate signing request (CSR).",
        "operationId" : "post_certificates__tenantid___keyid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "The Key ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The Key ID.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateCsrWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config" : {
      "put" : {
        "tags" : [ "ConfigRPCOps" ],
        "description" : "Updates a section of the cluster configuration.",
        "operationId" : "put_config",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateConfigParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated cluster configuration for the specified section.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config/getprotocolversion" : {
      "get" : {
        "tags" : [ "ConfigRPCOps" ],
        "description" : "",
        "operationId" : "get_config_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/config/{section}" : {
      "get" : {
        "tags" : [ "ConfigRPCOps" ],
        "description" : "Get Configuration. Returns the 'active' configuration for the given section, in both the 'raw' format and with defaults applied.",
        "operationId" : "get_config__section_",
        "parameters" : [ {
          "name" : "section",
          "in" : "path",
          "description" : "Section name for the configuration.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Section name for the configuration.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Configuration for the given section.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi" : {
      "get" : {
        "tags" : [ "CpiUploadRPCOps" ],
        "description" : "List all CPIs uploaded to the cluster.",
        "operationId" : "get_cpi",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List details of the all CPIs uploaded to the cluster.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCPIsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "CpiUploadRPCOps" ],
        "description" : "Uploads a CPI",
        "operationId" : "post_cpi",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "upload" : {
                    "type" : "string",
                    "description" : "A file to upload.",
                    "format" : "binary",
                    "nullable" : false,
                    "example" : "No example available for this type"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request Id calculated for a CPI upload request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UploadResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi/getprotocolversion" : {
      "get" : {
        "tags" : [ "CpiUploadRPCOps" ],
        "description" : "",
        "operationId" : "get_cpi_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/cpi/status/{id}" : {
      "get" : {
        "tags" : [ "CpiUploadRPCOps" ],
        "description" : "Check upload status for given requestId",
        "operationId" : "get_cpi_status__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The requestId",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The requestId",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Status"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/getprotocolversion" : {
      "get" : {
        "tags" : [ "FlowRPCOps" ],
        "description" : "",
        "operationId" : "get_flow_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "FlowRPCOps" ],
        "description" : "Get status of all flows for a holding identity. Returns an empty list if there are no flows running.",
        "operationId" : "get_flow__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of the flow.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponses"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "FlowRPCOps" ],
        "description" : "Instructs Corda to start a new instance of the specified flow",
        "operationId" : "post_flow__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StartFlowParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The initial status of the flow, if the flow already exists the status of the existing flow will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flow/{holdingidentityshorthash}/{clientrequestid}" : {
      "get" : {
        "tags" : [ "FlowRPCOps" ],
        "description" : "Gets the current status for a given flow.",
        "operationId" : "get_flow__holdingidentityshorthash___clientrequestid_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "clientrequestid",
          "in" : "path",
          "description" : "Client provided flow identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Client provided flow identifier",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The status of the flow.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FlowStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flowclass/getprotocolversion" : {
      "get" : {
        "tags" : [ "FlowClassRPCOps" ],
        "description" : "",
        "operationId" : "get_flowclass_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/flowclass/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "FlowClassRPCOps" ],
        "description" : "Get all the flows that are startable for this holding identity.",
        "operationId" : "get_flowclass__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "Short hash of the holding identity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Short hash of the holding identity",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The class names of all flows that can be run",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StartableFlowsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hello/getprotocolversion" : {
      "get" : {
        "tags" : [ "Hello RPC Ops" ],
        "description" : "",
        "operationId" : "get_hello_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hello/greet" : {
      "post" : {
        "tags" : [ "Hello RPC Ops" ],
        "description" : "",
        "operationId" : "post_hello_greet",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "addressee" : {
                    "type" : "string",
                    "nullable" : false,
                    "example" : "string"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm" : {
      "get" : {
        "tags" : [ "HsmRpcOps" ],
        "description" : "Get list of available HSMs.",
        "operationId" : "get_hsm",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : false,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/HsmInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/getprotocolversion" : {
      "get" : {
        "tags" : [ "HsmRpcOps" ],
        "description" : "",
        "operationId" : "get_hsm_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/soft/{tenantid}/{category}" : {
      "post" : {
        "tags" : [ "HsmRpcOps" ],
        "description" : "Assign soft HSM",
        "operationId" : "post_hsm_soft__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api' or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api' or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HsmInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/hsm/{tenantid}/{category}" : {
      "get" : {
        "tags" : [ "HsmRpcOps" ],
        "description" : "Get list of assigned HSMs.",
        "operationId" : "get_hsm__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api' or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api' or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "nullable" : true,
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/HsmInfo"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "HsmRpcOps" ],
        "description" : "Assign HSM.",
        "operationId" : "post_hsm__tenantid___category_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api' or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api' or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "path",
          "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Category of the HSM.  E.g. LEDGER, TLS, etc.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HsmInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/getprotocolversion" : {
      "get" : {
        "tags" : [ "KeysRpcOps" ],
        "description" : "",
        "operationId" : "get_keys_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}" : {
      "get" : {
        "tags" : [ "KeysRpcOps" ],
        "description" : "Get list of keys for members.",
        "operationId" : "get_keys__tenantid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "skip",
          "in" : "query",
          "description" : "Index of the first key",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Index of the first key",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }, {
          "name" : "take",
          "in" : "query",
          "description" : "Page size",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Page size",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "How to order the results (one of: none, timestamp, category, scheme_code_name, alias, master_key_alias, external_id, id, timestamp_desc, category_desc, scheme_code_name_desc, alias_desc, master_key_alias_desc, external_id_desc or id_desc)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "How to order the results (one of: none, timestamp, category, scheme_code_name, alias, master_key_alias, external_id, id, timestamp_desc, category_desc, scheme_code_name_desc, alias_desc, master_key_alias_desc, external_id_desc or id_desc)",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "The key category",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key category",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "schemecodename",
          "in" : "query",
          "description" : "The key schema code name",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key schema code name",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "alias",
          "in" : "query",
          "description" : "The key alias",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key alias",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "masterkeyalias",
          "in" : "query",
          "description" : "The key master key alias",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "The key master key alias",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "createdafter",
          "in" : "query",
          "description" : "Only keys that had been created after (for example: 2007-12-03T10:15:30.00Z)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Only keys that had been created after (for example: 2007-12-03T10:15:30.00Z)",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "createdbefore",
          "in" : "query",
          "description" : "Only keys that had been created before (for example: 2007-12-03T10:15:30.00Z)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Only keys that had been created before (for example: 2007-12-03T10:15:30.00Z)",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "ID's of the keys (Will ignore any other parameter)",
          "required" : false,
          "schema" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A map from a tenant key ID to its metadata.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "$ref" : "#/components/schemas/KeyMetaData"
                  },
                  "nullable" : false,
                  "example" : "No example available for this type"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "KeysRpcOps" ],
        "description" : "Generate key pair.",
        "operationId" : "post_keys__tenantid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateKeyPairWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The ID of the newly generated key pair.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/schemes/{hsmcategory}" : {
      "get" : {
        "tags" : [ "KeysRpcOps" ],
        "description" : "Get list of schemes for the cluster.",
        "operationId" : "get_keys__tenantid__schemes__hsmcategory_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "hsmcategory",
          "in" : "path",
          "description" : "The HSM Category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The HSM Category",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of schemes codes which are supported by the associated HSM integration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : false,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "type" : "string",
                    "example" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/keys/{tenantid}/{keyid}" : {
      "get" : {
        "tags" : [ "KeysRpcOps" ],
        "description" : "GET key in PEM format.",
        "operationId" : "get_keys__tenantid___keyid_",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "path",
          "description" : "'p2p', 'rpc-api', or holding identity ID.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "'p2p', 'rpc-api', or holding identity ID.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "The Key ID. Or an error code if not found.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The Key ID. Or an error code if not found.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The public key in PEM format.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/forcecpiupload" : {
      "post" : {
        "tags" : [ "VirtualNodeMaintenanceRPCOps" ],
        "description" : "Uploads a CPI",
        "operationId" : "post_maintenance_virtualnode_forcecpiupload",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "upload" : {
                    "type" : "string",
                    "description" : "A file to upload.",
                    "format" : "binary",
                    "nullable" : false,
                    "example" : "No example available for this type"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request Id calculated for a CPI upload request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UploadResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/maintenance/virtualnode/getprotocolversion" : {
      "get" : {
        "tags" : [ "VirtualNodeMaintenanceRPCOps" ],
        "description" : "",
        "operationId" : "get_maintenance_virtualnode_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/members/getprotocolversion" : {
      "get" : {
        "tags" : [ "MemberLookupRpcOps" ],
        "description" : "",
        "operationId" : "get_members_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/members/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "MemberLookupRpcOps" ],
        "description" : "Lists the active members in the membership group.",
        "operationId" : "get_members__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        }, {
          "name" : "cn",
          "in" : "query",
          "description" : "Common Name (CN) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Common Name (CN) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "o",
          "in" : "query",
          "description" : "Organisation (O) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Organisation (O) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "ou",
          "in" : "query",
          "description" : "Organisation Unit (OU) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Organisation Unit (OU) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "l",
          "in" : "query",
          "description" : "Locality (L) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Locality (L) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "st",
          "in" : "query",
          "description" : "State (ST) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "State (ST) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        }, {
          "name" : "c",
          "in" : "query",
          "description" : "Country (C) attribute of the X.500 name to filter members by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Country (C) attribute of the X.500 name to filter members by",
            "nullable" : true,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RpcMemberInfoList"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/getprotocolversion" : {
      "get" : {
        "tags" : [ "MemberRegistrationRpcOps" ],
        "description" : "",
        "operationId" : "get_membership_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/membership/{holdingidentityshorthash}" : {
      "get" : {
        "tags" : [ "MemberRegistrationRpcOps" ],
        "description" : "Checks the status of the registration request.",
        "operationId" : "get_membership__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRequestProgress"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "MemberRegistrationRpcOps" ],
        "description" : "Start registration process for a virtual node.",
        "operationId" : "post_membership__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to be checked.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to be checked.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberRegistrationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRequestProgress"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/network/getprotocolversion" : {
      "get" : {
        "tags" : [ "NetworkRpcOps" ],
        "description" : "",
        "operationId" : "get_network_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/network/setup/{holdingidentityshorthash}" : {
      "put" : {
        "tags" : [ "NetworkRpcOps" ],
        "description" : "Set up the holding identity on the network.",
        "operationId" : "put_network_setup__holdingidentityshorthash_",
        "parameters" : [ {
          "name" : "holdingidentityshorthash",
          "in" : "path",
          "description" : "ID of the holding identity to set up.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the holding identity to set up.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetupHostedIdentitiesWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission" : {
      "post" : {
        "tags" : [ "PermissionEndpoint" ],
        "description" : "Create a Permission",
        "operationId" : "post_permission",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePermissionType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermissionResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission/getprotocolversion" : {
      "get" : {
        "tags" : [ "PermissionEndpoint" ],
        "description" : "",
        "operationId" : "get_permission_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/permission/{id}" : {
      "get" : {
        "tags" : [ "PermissionEndpoint" ],
        "description" : "Get a Permission by its ID",
        "operationId" : "get_permission__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the permission to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the permission to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermissionResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role" : {
      "get" : {
        "tags" : [ "RoleEndpoint" ],
        "description" : "Get all the roles",
        "operationId" : "get_role",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "nullable" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/RoleResponseType"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "RoleEndpoint" ],
        "description" : "Create a Role",
        "operationId" : "post_role",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateRoleType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/addpermission" : {
      "put" : {
        "tags" : [ "RoleEndpoint" ],
        "description" : "Add a permission to a role",
        "operationId" : "put_role_addpermission",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddPermissionWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/getprotocolversion" : {
      "get" : {
        "tags" : [ "RoleEndpoint" ],
        "description" : "",
        "operationId" : "get_role_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/removepermission" : {
      "put" : {
        "tags" : [ "RoleEndpoint" ],
        "description" : "Removes a permission from a role",
        "operationId" : "put_role_removepermission",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemovePermissionWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/role/{id}" : {
      "get" : {
        "tags" : [ "RoleEndpoint" ],
        "description" : "Get a Role by its ID",
        "operationId" : "get_role__id_",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the role to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "ID of the role to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/stubs/getprotocolversion" : {
      "get" : {
        "tags" : [ "Stub rpc ops" ],
        "description" : "",
        "operationId" : "get_stubs_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/stubs/ping" : {
      "get" : {
        "tags" : [ "Stub rpc ops" ],
        "description" : "",
        "operationId" : "get_stubs_ping",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "nullable" : false,
                  "example" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "UserEndpoint" ],
        "description" : "Get a User by Login Name",
        "operationId" : "get_user",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "query",
          "description" : "Login Name of the user to be returned.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Login Name of the user to be returned.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "UserEndpoint" ],
        "description" : "Create a User",
        "operationId" : "post_user",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateUserType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/addrole" : {
      "put" : {
        "tags" : [ "UserEndpoint" ],
        "description" : "Assign a Role to a User",
        "operationId" : "put_user_addrole",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddRoleWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/getprotocolversion" : {
      "get" : {
        "tags" : [ "UserEndpoint" ],
        "description" : "",
        "operationId" : "get_user_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/permissionsummary/{loginname}" : {
      "get" : {
        "tags" : [ "UserEndpoint" ],
        "description" : "Get a summary of a User's permissions",
        "operationId" : "get_user_permissionsummary__loginname_",
        "parameters" : [ {
          "name" : "loginname",
          "in" : "path",
          "description" : "Login Name of the user.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Login Name of the user.",
            "nullable" : false,
            "example" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPermissionSummaryResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/user/removerole" : {
      "put" : {
        "tags" : [ "UserEndpoint" ],
        "description" : "Un-assign a role from a user",
        "operationId" : "put_user_removerole",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoveRoleWrapperRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponseType"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/virtualnode" : {
      "get" : {
        "tags" : [ "VirtualNodeRPCOps" ],
        "description" : "List all virtual nodes in the cluster.",
        "operationId" : "get_virtualnode",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List details of the all virtual nodes in the cluster.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetVirtualNodesResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "tags" : [ "VirtualNodeRPCOps" ],
        "description" : "Creates a new virtual node.",
        "operationId" : "post_virtualnode",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "requestBody",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateVirtualNodeParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The details of the created virtual node.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateVirtualNodeResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/virtualnode/getprotocolversion" : {
      "get" : {
        "tags" : [ "VirtualNodeRPCOps" ],
        "description" : "",
        "operationId" : "get_virtualnode_getprotocolversion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Integer value specifying the version of the endpoint.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32",
                  "nullable" : false,
                  "example" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AddPermissionWrapperRequest" : {
        "required" : [ "permissionId", "roleId" ],
        "properties" : {
          "permissionId" : {
            "type" : "string",
            "description" : "Identifier for an existing permission",
            "nullable" : false,
            "example" : "string"
          },
          "roleId" : {
            "type" : "string",
            "description" : "Identifier for an existing role",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "AddPermissionWrapperRequest",
        "nullable" : false
      },
      "AddRoleWrapperRequest" : {
        "required" : [ "loginName", "roleId" ],
        "properties" : {
          "loginName" : {
            "type" : "string",
            "description" : "User login name to be changed",
            "nullable" : false,
            "example" : "string"
          },
          "roleId" : {
            "type" : "string",
            "description" : "Id of the role to associate with this user",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "AddRoleWrapperRequest",
        "nullable" : false
      },
      "CpiIdentifier" : {
        "required" : [ "cpiName", "cpiVersion" ],
        "type" : "object",
        "properties" : {
          "cpiName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpiVersion" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "signerSummaryHash" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "CpiMetadata" : {
        "required" : [ "cpiFileChecksum", "cpks", "id", "timestamp" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cpks" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpkMetadata"
            }
          },
          "groupPolicy" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/CpiIdentifier"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "CpkIdentifier" : {
        "required" : [ "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "signerSummaryHash" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "version" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CpkMetadata" : {
        "required" : [ "dependencies", "hash", "id", "libraries", "mainBundle", "timestamp", "type" ],
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpkIdentifier"
            }
          },
          "hash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/CpkIdentifier"
          },
          "libraries" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          },
          "mainBundle" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "CreatePermissionType" : {
        "required" : [ "permissionString", "permissionType" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        },
        "description" : "Details of the permission to be created"
      },
      "CreateRoleType" : {
        "required" : [ "roleName" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "roleName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "Details of the role to be created"
      },
      "CreateUserType" : {
        "required" : [ "enabled", "fullName", "loginName" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "fullName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "initialPassword" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "parentGroup" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "passwordExpiry" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          }
        },
        "description" : "Details of the user to be created"
      },
      "CreateVirtualNodeParameters" : {
        "required" : [ "cpiFileChecksum", "x500Name" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "cryptoDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "cryptoDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDdlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDmlConnection" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "x500Name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "Details of the virtual node to be created"
      },
      "CreateVirtualNodeResponse" : {
        "required" : [ "cpiIdentifier", "cryptoDmlConnectionId", "holdingIdentityShortHash", "mgmGroupId", "vaultDmlConnectionId", "x500Name" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "cpiIdentifier" : {
            "$ref" : "#/components/schemas/CpiIdentifier"
          },
          "cryptoDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "cryptoDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "holdingIdentityShortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "mgmGroupId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "vaultDdlConnectionId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "vaultDmlConnectionId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "x500Name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "FlowStateErrorResponse" : {
        "required" : [ "message", "type" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "type" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "FlowStatusResponse" : {
        "required" : [ "flowStatus", "holdingIdentityShortHash", "timestamp" ],
        "type" : "object",
        "properties" : {
          "clientRequestId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowError" : {
            "$ref" : "#/components/schemas/FlowStateErrorResponse"
          },
          "flowId" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowResult" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "flowStatus" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "holdingIdentityShortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          }
        }
      },
      "FlowStatusResponses" : {
        "required" : [ "flowStatusResponses" ],
        "type" : "object",
        "properties" : {
          "flowStatusResponses" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/FlowStatusResponse"
            }
          }
        }
      },
      "GenerateCsrWrapperRequest" : {
        "required" : [ "certificateRole", "x500name" ],
        "properties" : {
          "certificateRole" : {
            "type" : "string",
            "description" : "Certificate role. For example: TLS, SESSION_INIT, ...",
            "nullable" : false,
            "example" : "string"
          },
          "contextMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "description" : "Context Map. For example: `signatureSpec` to signature spec (SHA512withECDSA, SHA384withRSA...)",
            "nullable" : true,
            "example" : "No example available for this type"
          },
          "subjectAlternativeNames" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          },
          "x500name" : {
            "type" : "string",
            "description" : "The X500 name",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "GenerateCsrWrapperRequest",
        "nullable" : false
      },
      "GenerateKeyPairWrapperRequest" : {
        "required" : [ "alias", "hsmCategory", "scheme" ],
        "properties" : {
          "alias" : {
            "type" : "string",
            "description" : "The key alias",
            "nullable" : false,
            "example" : "string"
          },
          "hsmCategory" : {
            "type" : "string",
            "description" : "The HSM Category",
            "nullable" : false,
            "example" : "string"
          },
          "scheme" : {
            "type" : "string",
            "description" : "The scheme",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "GenerateKeyPairWrapperRequest",
        "nullable" : false
      },
      "GetCPIsResponse" : {
        "required" : [ "cpis" ],
        "type" : "object",
        "properties" : {
          "cpis" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/CpiMetadata"
            }
          }
        }
      },
      "GetConfigResponse" : {
        "required" : [ "configWithDefaults", "schemaVersion", "section", "sourceConfig", "version" ],
        "type" : "object",
        "properties" : {
          "configWithDefaults" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/Version"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "sourceConfig" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "GetVirtualNodesResponse" : {
        "required" : [ "virtualNodes" ],
        "type" : "object",
        "properties" : {
          "virtualNodes" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/VirtualNodeInfo"
            }
          }
        }
      },
      "HoldingIdentity" : {
        "required" : [ "fullHash", "groupId", "shortHash", "x500Name" ],
        "type" : "object",
        "properties" : {
          "fullHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "groupId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "shortHash" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "x500Name" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "HsmInfo" : {
        "required" : [ "attemptTimeout", "createdAt", "id", "masterKeyPolicy", "maxAttempts", "serviceName", "supportedSchemes" ],
        "type" : "object",
        "properties" : {
          "attemptTimeout" : {
            "type" : "string",
            "format" : "duration",
            "nullable" : false,
            "example" : "PT15M"
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true,
            "example" : 0
          },
          "createdAt" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "description" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "masterKeyPolicy" : {
            "$ref" : "#/components/schemas/MasterKeyPolicy"
          },
          "maxAttempts" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          },
          "serviceName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "supportedSchemes" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          },
          "workerLabel" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "KeyMetaData" : {
        "required" : [ "alias", "created", "hsmCategory", "keyId", "scheme" ],
        "type" : "object",
        "properties" : {
          "alias" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "hsmCategory" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "keyId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "masterKeyAlias" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "scheme" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "MasterKeyPolicy" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "MemberInfoSubmitted" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        }
      },
      "MemberRegistrationRequest" : {
        "required" : [ "action", "context" ],
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        },
        "description" : "Data required to initialise the registration process."
      },
      "PermissionAssociationResponseType" : {
        "required" : [ "createdTimestamp", "id" ],
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "PermissionResponseType" : {
        "required" : [ "id", "permissionString", "permissionType", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "PermissionSummaryResponseType" : {
        "required" : [ "id", "permissionString", "permissionType" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionString" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissionType" : {
            "nullable" : false,
            "example" : "DENY",
            "enum" : [ "ALLOW", "DENY" ]
          },
          "virtualNode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          }
        }
      },
      "PropertyResponseType" : {
        "required" : [ "key", "lastChangedTimestamp", "value" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "lastChangedTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "value" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RegistrationRequestProgress" : {
        "required" : [ "memberInfoSubmitted", "registrationStatus" ],
        "type" : "object",
        "properties" : {
          "memberInfoSubmitted" : {
            "$ref" : "#/components/schemas/MemberInfoSubmitted"
          },
          "registrationSent" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "registrationStatus" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RemovePermissionWrapperRequest" : {
        "required" : [ "permissionId", "roleId" ],
        "properties" : {
          "permissionId" : {
            "type" : "string",
            "description" : "Identifier for an existing permission",
            "nullable" : false,
            "example" : "string"
          },
          "roleId" : {
            "type" : "string",
            "description" : "Identifier for an existing role",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "RemovePermissionWrapperRequest",
        "nullable" : false
      },
      "RemoveRoleWrapperRequest" : {
        "required" : [ "loginName", "roleId" ],
        "properties" : {
          "loginName" : {
            "type" : "string",
            "description" : "User login name to be changed",
            "nullable" : false,
            "example" : "string"
          },
          "roleId" : {
            "type" : "string",
            "description" : "Id of the role to un-assign from this user",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "RemoveRoleWrapperRequest",
        "nullable" : false
      },
      "RoleAssociationResponseType" : {
        "required" : [ "createTimestamp", "roleId" ],
        "type" : "object",
        "properties" : {
          "createTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "roleId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "RoleResponseType" : {
        "required" : [ "id", "permissions", "roleName", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "groupVisibility" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissions" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PermissionAssociationResponseType"
            }
          },
          "roleName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "RpcMemberInfo" : {
        "required" : [ "memberContext", "mgmContext" ],
        "type" : "object",
        "properties" : {
          "memberContext" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          },
          "mgmContext" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "example" : "string"
            },
            "nullable" : false,
            "example" : "No example available for this type"
          }
        }
      },
      "RpcMemberInfoList" : {
        "required" : [ "members" ],
        "type" : "object",
        "properties" : {
          "members" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/RpcMemberInfo"
            }
          }
        }
      },
      "SetupHostedIdentitiesWrapperRequest" : {
        "required" : [ "certificateChainAlias" ],
        "properties" : {
          "certificateChainAlias" : {
            "type" : "string",
            "description" : "The certificates chain alias.",
            "nullable" : false,
            "example" : "string"
          },
          "sessionKeyId" : {
            "type" : "string",
            "description" : "The session key ID (will use the first session one by default).",
            "nullable" : true,
            "example" : "string"
          },
          "tlsTenantId" : {
            "type" : "string",
            "description" : "The TLS tenant ID (either 'p2p' or the holdingIdentityShortHash, default to the holdingIdentityShortHash).",
            "nullable" : true,
            "example" : "string"
          }
        },
        "description" : "SetupHostedIdentitiesWrapperRequest",
        "nullable" : false
      },
      "StartFlowParameters" : {
        "required" : [ "clientRequestId", "flowClassName", "requestData" ],
        "type" : "object",
        "properties" : {
          "clientRequestId" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "flowClassName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "requestData" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        },
        "description" : "Information required to start a flow for this holdingId"
      },
      "StartableFlowsResponse" : {
        "required" : [ "flowClassNames" ],
        "type" : "object",
        "properties" : {
          "flowClassNames" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "type" : "string",
              "example" : "string"
            }
          }
        }
      },
      "Status" : {
        "required" : [ "cpiFileChecksum", "status" ],
        "type" : "object",
        "properties" : {
          "cpiFileChecksum" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "status" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "UpdateConfigParameters" : {
        "required" : [ "config", "schemaVersion", "section", "version" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/Version"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        },
        "description" : "Details of the updated configuration"
      },
      "UpdateConfigResponse" : {
        "required" : [ "config", "schemaVersion", "section", "version" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "schemaVersion" : {
            "$ref" : "#/components/schemas/Version"
          },
          "section" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "UploadResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          }
        }
      },
      "UserPermissionSummaryResponseType" : {
        "required" : [ "enabled", "lastUpdateTimestamp", "loginName", "permissions" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "lastUpdateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "permissions" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PermissionSummaryResponseType"
            }
          }
        }
      },
      "UserResponseType" : {
        "required" : [ "enabled", "fullName", "id", "loginName", "properties", "roleAssociations", "ssoAuth", "updateTimestamp", "version" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "fullName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "id" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "loginName" : {
            "type" : "string",
            "nullable" : false,
            "example" : "string"
          },
          "parentGroup" : {
            "type" : "string",
            "nullable" : true,
            "example" : "string"
          },
          "passwordExpiry" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : true,
            "example" : "2022-06-24T10:15:30Z"
          },
          "properties" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/PropertyResponseType"
            }
          },
          "roleAssociations" : {
            "uniqueItems" : false,
            "type" : "array",
            "nullable" : false,
            "items" : {
              "$ref" : "#/components/schemas/RoleAssociationResponseType"
            }
          },
          "ssoAuth" : {
            "type" : "boolean",
            "nullable" : false,
            "example" : true
          },
          "updateTimestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "Version" : {
        "required" : [ "major", "minor" ],
        "type" : "object",
        "properties" : {
          "major" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          },
          "minor" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      },
      "VirtualNodeInfo" : {
        "required" : [ "cpiIdentifier", "cryptoDmlConnectionId", "holdingIdentity", "timestamp", "vaultDmlConnectionId", "version" ],
        "type" : "object",
        "properties" : {
          "cpiIdentifier" : {
            "$ref" : "#/components/schemas/CpiIdentifier"
          },
          "cryptoDdlConnectionId" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true,
            "example" : "No example available for this type"
          },
          "cryptoDmlConnectionId" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : false,
            "example" : "No example available for this type"
          },
          "holdingIdentity" : {
            "$ref" : "#/components/schemas/HoldingIdentity"
          },
          "hsmConnectionId" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true,
            "example" : "No example available for this type"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "datetime",
            "nullable" : false,
            "example" : "2022-06-24T10:15:30Z"
          },
          "vaultDdlConnectionId" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true,
            "example" : "No example available for this type"
          },
          "vaultDmlConnectionId" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : false,
            "example" : "No example available for this type"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false,
            "example" : 0
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}
