import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.TestOSGi
import aQute.bnd.gradle.Resolve



plugins {
    id 'corda.common-library'
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'biz.aQute.bnd.builder'
    id 'org.jetbrains.kotlin.jvm'
}
description 'Corda Sandbox'

configurations {
    cpks {
        canBeConsumed = false
    }
}

repositories {
    // Contains the Antlr OSGi bundle.
    maven {
        url = "https://repository.mulesoft.org/nexus/content/repositories/public/"
    }
}

dependencies {
    compileOnly "org.osgi:osgi.annotation:$osgiVersion"
    compileOnly "org.osgi:osgi.core:$osgiVersion"
    compileOnly "org.osgi:org.osgi.service.component.annotations:$osgiScrAnnotationVersion"

    api "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"
    api "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation "net.corda:corda-packaging:$cordaVersion"
    implementation "net.corda:corda-install:$cordaVersion"
    implementation "net.corda:corda-serialization"

    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    cpks project(path: 'sandbox-cpk-one', configuration: 'cordaCPK')
    cpks project(path: 'sandbox-cpk-two', configuration: 'cordaCPK')
    cpks project(path: 'sandbox-cpk-three', configuration: 'cordaCPK')

    integrationTestImplementation "antlr:antlr.osgi:$antlrOsgiVersion"
    integrationTestImplementation "net.corda:corda-application:$cordaVersion"
    integrationTestImplementation "org.dom4j:com.springsource.org.dom4j:$dom4jVersion"
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    integrationTestImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJUnit5Version"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felixConfigAdminVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

def jar = tasks.named('jar', Jar) {
    archiveBaseName = 'corda-sandbox'
    bnd '''\
Bundle-Name: Corda OSGi Sandbox library
Bundle-SymbolicName: \${project.group}.sandbox
'''
}

def integrationTestResources = tasks.named('processIntegrationTestResources', ProcessResources) {
    from configurations.cpks
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    dependsOn integrationTestResources
    archiveBaseName = 'corda-sandbox'
    archiveClassifier = 'tests'
    from sourceSets.integrationTest.output
    sourceSet = sourceSets.integrationTest
    bnd '''\
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
'''
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(sourceSets.integrationTest.runtimeClasspath, jar, testingBundle)
    bndrun = file('tests.bndrun')
    //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
    System.setProperty("bnd.home.dir", "$rootDir/bnd")
}

tasks.register('integrationTest', Test) {
    dependsOn testOSGi
    enabled = false
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve
    resultsDirectory = file("$testResultsDir/integrationTest")
    bundles = files(sourceSets.integrationTest.runtimeClasspath, jar, testingBundle)
    bndrun = file('tests.bndrun')
}

tasks.named('check') {
    dependsOn testOSGi
}
