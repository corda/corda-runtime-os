apiVersion: v1
kind: Service
metadata:
  name: {{ include "corda.fullname" . }}-crypto
  labels: &id001
    app: {{ include "corda.fullname" . }}-crypto-node
    type: crypto-worker
spec:
  type: NodePort
  selector: *id001
  ports:
  - name: worker-debug
    port: 5005
    targetPort: 5005
  - name: worker-health
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "corda.fullname" . }}-crypto
  labels:
    app: {{ include "corda.fullname" . }}-crypto-node
    family: e2e
    type: crypto-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "corda.fullname" . }}-crypto-node
      family: e2e
      type: crypto-worker
  template:
    metadata:
      labels:
        app: {{ include "corda.fullname" . }}-crypto-node
        family: e2e
        type: crypto-worker
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
      - name: {{ include "corda.fullname" . }}-crypto-volume
        persistentVolumeClaim:
          claimName: {{ include "corda.fullname" . }}-crypto-ebs-claim
      imagePullSecrets:
      - name: docker-registry-cred
      containers:
      - name: {{ include "corda.fullname" . }}-crypto
        image: corda-os-docker.software.r3.com/corda-os-crypto-worker:{{ .Values.imageTagOverride }}
        imagePullPolicy: Always
        volumeMounts:
        - name: {{ include "corda.fullname" . }}-crypto-volume
          mountPath: /logs
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
        args:
        - -mkafka.common.bootstrap.servers=prereqs-kafka:9092
        ports:
        - name: worker-debug
          containerPort: 5005
        - name: worker-health
          containerPort: 7000
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 1
        startupProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 5
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "corda.fullname" . }}-dbw
  labels: &id002
    app: {{ include "corda.fullname" . }}-dbw-node
    type: database-worker
spec:
  type: NodePort
  selector: *id002
  ports:
  - name: worker-debug
    port: 5005
    targetPort: 5005
  - name: worker-health
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "corda.fullname" . }}-dbw
  labels:
    app: {{ include "corda.fullname" . }}-dbw-node
    family: e2e
    type: database-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "corda.fullname" . }}-dbw-node
      family: e2e
      type: database-worker
  template:
    metadata:
      labels:
        app: {{ include "corda.fullname" . }}-dbw-node
        family: e2e
        type: database-worker
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
      - name: {{ include "corda.fullname" . }}-dbw-volume
        persistentVolumeClaim:
          claimName: {{ include "corda.fullname" . }}-dbw-ebs-claim
      imagePullSecrets:
      - name: docker-registry-cred
      containers:
      - name: {{ include "corda.fullname" . }}-dbw
        image: corda-os-docker.software.r3.com/corda-os-db-worker:{{ .Values.imageTagOverride }}
        imagePullPolicy: Always
        volumeMounts:
        - name: {{ include "corda.fullname" . }}-dbw-volume
          mountPath: /logs
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
        args:
        - -mkafka.common.bootstrap.servers=prereqs-kafka:9092
        - -spassphrase=bad passphrase
        - -ssalt=not so random
        - -ddatabase.user=user
        - -ddatabase.pass.configSecret.encryptedSecret=4LNuCvt+NhGIBwL7gRRhvAZh3k6JRN9NHv0aG3pi1xM=
        - -ddatabase.jdbc.url=jdbc:postgresql://prereqs-postgresql:5432/cordacluster
        ports:
        - name: worker-debug
          containerPort: 5005
        - name: worker-health
          containerPort: 7000
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 1
        startupProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 5
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "corda.fullname" . }}-flow
  labels: &id003
    app: {{ include "corda.fullname" . }}-flow-node
    type: flow-worker
spec:
  type: NodePort
  selector: *id003
  ports:
  - name: worker-debug
    port: 5005
    targetPort: 5005
  - name: worker-health
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "corda.fullname" . }}-flow
  labels:
    app: {{ include "corda.fullname" . }}-flow-node
    family: e2e
    type: flow-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "corda.fullname" . }}-flow-node
      family: e2e
      type: flow-worker
  template:
    metadata:
      labels:
        app: {{ include "corda.fullname" . }}-flow-node
        family: e2e
        type: flow-worker
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
      - name: {{ include "corda.fullname" . }}-flow-volume
        persistentVolumeClaim:
          claimName: {{ include "corda.fullname" . }}-flow-ebs-claim
      imagePullSecrets:
      - name: docker-registry-cred
      containers:
      - name: {{ include "corda.fullname" . }}-flow
        image: corda-os-docker.software.r3.com/corda-os-flow-worker:{{ .Values.imageTagOverride }}
        imagePullPolicy: Always
        volumeMounts:
        - name: {{ include "corda.fullname" . }}-flow-volume
          mountPath: /logs
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
        args:
        - -mkafka.common.bootstrap.servers=prereqs-kafka:9092
        ports:
        - name: worker-debug
          containerPort: 5005
        - name: worker-health
          containerPort: 7000
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 1
        startupProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 5
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "corda.fullname" . }}-rpc
  labels: &id004
    app: {{ include "corda.fullname" . }}-rpc-node
    type: rpc-worker
spec:
  type: NodePort
  selector: *id004
  ports:
  - name: node-rpc
    port: 443
    targetPort: 8888
  - name: worker-debug
    port: 5005
    targetPort: 5005
  - name: worker-health
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "corda.fullname" . }}-rpc
  labels:
    app: {{ include "corda.fullname" . }}-rpc-node
    family: e2e
    type: rpc-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "corda.fullname" . }}-rpc-node
      family: e2e
      type: rpc-worker
  template:
    metadata:
      labels:
        app: {{ include "corda.fullname" . }}-rpc-node
        family: e2e
        type: rpc-worker
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
      - name: {{ include "corda.fullname" . }}-rpc-volume
        persistentVolumeClaim:
          claimName: {{ include "corda.fullname" . }}-rpc-ebs-claim
      imagePullSecrets:
      - name: docker-registry-cred
      containers:
      - name: {{ include "corda.fullname" . }}-rpc
        image: corda-os-docker.software.r3.com/corda-os-rpc-worker:{{ .Values.imageTagOverride }}
        imagePullPolicy: Always
        volumeMounts:
        - name: {{ include "corda.fullname" . }}-rpc-volume
          mountPath: /logs
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
        args:
        - -mkafka.common.bootstrap.servers=prereqs-kafka:9092
        ports:
        - name: node-rpc
          containerPort: 8888
        - name: worker-debug
          containerPort: 5005
        - name: worker-health
          containerPort: 7000
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 1
        startupProbe:
          httpGet:
            path: /isHealthy
            port: 7000
            scheme: HTTP
          periodSeconds: 5
          failureThreshold: 5
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "corda.fullname" . }}-crypto-ebs-claim
  labels:
    app: {{ include "corda.fullname" . }}-crypto-node
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: corda-sc
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "corda.fullname" . }}-dbw-ebs-claim
  labels:
    app: {{ include "corda.fullname" . }}-dbw-node
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: corda-sc
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "corda.fullname" . }}-flow-ebs-claim
  labels:
    app: {{ include "corda.fullname" . }}-flow-node
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: corda-sc
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "corda.fullname" . }}-rpc-ebs-claim
  labels:
    app: {{ include "corda.fullname" . }}-rpc-node
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: corda-sc
  resources:
    requests:
      storage: 5Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-topics
  labels: &id012
    app: create-topics
spec:
  template:
    metadata:
      labels: *id012
    spec:
      containers:
      - name: create-topics
        image: bitnami/kafka:2.8.1-debian-10-r99
        imagePullPolicy: Always
        command:
        - /bin/sh
        - -c
        args:
        - echo -e 'Creating kafka topics';kafka-topics.sh --bootstrap-server prereqs-kafka:9092
          --partitions 1 --replication-factor 1 --create --topic config.management.request;kafka-topics.sh
          --bootstrap-server prereqs-kafka:9092 --partitions 1 --replication-factor 1
          --create --topic config.management.request.resp;kafka-topics.sh --bootstrap-server
          prereqs-kafka:9092 --partitions 1 --replication-factor 1 --create --topic config.topic
          --config 'cleanup.policy=compact';kafka-topics.sh --bootstrap-server prereqs-kafka:9092
          --partitions 1 --replication-factor 1 --create --topic virtual.node.creation.request;kafka-topics.sh
          --bootstrap-server prereqs-kafka:9092 --partitions 1 --replication-factor 1
          --create --topic virtual.node.creation.request.resp;kafka-topics.sh --bootstrap-server
          prereqs-kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.management;kafka-topics.sh
          --bootstrap-server prereqs-kafka:9092 --partitions 1 --replication-factor 1
          --create --topic rpc.permissions.management.resp;kafka-topics.sh --bootstrap-server
          prereqs-kafka:9092 --partitions 1 --replication-factor 1 --create --topic rpc.permissions.user
          --config 'cleanup.policy=compact';kafka-topics.sh --bootstrap-server prereqs-kafka:9092
          --partitions 1 --replication-factor 1 --create --topic rpc.permissions.group
          --config 'cleanup.policy=compact';kafka-topics.sh --bootstrap-server prereqs-kafka:9092
          --partitions 1 --replication-factor 1 --create --topic rpc.permissions.role
          --config 'cleanup.policy=compact';kafka-topics.sh --bootstrap-server prereqs-kafka:9092
          --partitions 1 --replication-factor 1 --create --topic rpc.permissions.permission
          --config 'cleanup.policy=compact';kafka-topics.sh --bootstrap-server prereqs-kafka:9092--partitions
          1 --replication-factor 1 --create --topic permissions.user.summary --config
          'cleanup.policy=compact';echo -e 'Successfully created the following topics:';kafka-topics.sh
          --bootstrap-server prereqs-kafka:9092 --list;
      restartPolicy: OnFailure
  backoffLimit: 10

