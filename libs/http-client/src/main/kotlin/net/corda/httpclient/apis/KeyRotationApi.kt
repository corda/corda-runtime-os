/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.httpclient.apis

import net.corda.httpclient.models.KeyRotationResponse
import net.corda.httpclient.models.KeyRotationStatusResponse

import net.corda.httpclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class KeyRotationApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getWrappingkeyGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/wrappingkey/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method gets the status of the latest key rotation for [tenantId].
         * @param tenantid Can either be a holding identity ID, the value &#39;master&#39; for master wrapping key or one of the values &#39;rest&#39;, &#39;crypto&#39; for corresponding cluster-level services.  NOTE: the &#39;p2p&#39; tenant ID does not support key rotation and should not be used. 
         * @return KeyRotationStatusResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getWrappingkeyRotationTenantid(tenantid: kotlin.String): HttpResponse<KeyRotationStatusResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/wrappingkey/rotation/{tenantid}".replace("{" + "tenantid" + "}", "$tenantid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method enables to rotate master wrapping key or all wrapping keys for tenantId (holding identity ID or cluster-level tenant).
         * @param tenantid Can either be a holding identity ID, the value &#39;master&#39; for master wrapping key or one of the values &#39;rest&#39;, &#39;crypto&#39; for corresponding cluster-level services.  NOTE: the &#39;p2p&#39; tenant ID does not support key rotation and should not be used. 
         * @return KeyRotationResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postWrappingkeyRotationTenantid(tenantid: kotlin.String): HttpResponse<KeyRotationResponse> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/wrappingkey/rotation/{tenantid}".replace("{" + "tenantid" + "}", "$tenantid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
