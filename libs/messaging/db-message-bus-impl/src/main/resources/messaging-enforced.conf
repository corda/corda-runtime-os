# Enforced DB properties. Settings in this file are effectively hardcoded, and attempts by the user to change these
# properties will be ignored.

# Properties that should be enforced for all consumers and producers.
common {
}

# Properties that should be enforced for all consumers.
consumer = ${common} {
    # Consumer group ID. This requires the topic name and group name to be set at the top level before attempting to
    # resolve this file. The consumer group identifier for this consumer.
    group.id = ${group}
    # Consumer client ID. This requires the topic name, group name and client ID to be set at the top level
    # before attempting to resolve this file. Primarily used for logging.
    client.id = ${group}-consumer-${clientId}
    # This ensures a default where connection with no offset for a consumer group does not result in an exception.
    auto.offset.reset = earliest

    max.poll.records = 100
}

# Properties that should be enforced for all producers.
producer = ${common} {
    client.id = ${clientId}-producer
}

# Roles that particular consumers or producers could be taking. By tying consumers and producers to the roles they are
# performing in the patterns, each can be configured properly to reflect the job they are supposed to do.
roles {
    pubsub {
        consumer = ${consumer} {
            # Pubsub consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
        }
    }
    compacted {
        consumer = ${consumer}
    }
    durable {
        consumer = ${consumer}
        producer = ${producer}
    }
    stateAndEvent {
        stateConsumer = ${consumer} {
            # Need to be able to distinguish between the state and event consumers for this pattern.
            client.id = ${group}-stateConsumer-${clientId}
        }
        eventConsumer = ${consumer} {
            # Need to be able to distinguish between the state and event consumers for this pattern.
            client.id = ${group}-eventConsumer-${clientId}
        }
        producer = ${producer}
    }
    eventLog {
        consumer = ${consumer}
        producer = ${producer}
    }
    rpcSender {
        consumer = ${consumer} {
            # RPC pattern consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
        }
        producer = ${producer}
    }
    rpcResponder {
        consumer = ${consumer} {
            # RPC pattern consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
        }
        producer = ${producer}
    }
    publisher {
        producer = ${producer}
    }
}

