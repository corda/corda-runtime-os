
group 'net.corda.cli.deployment'

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    def sourceTasks = subprojects.collect { it.tasks.named("plugin").get() }
    def cordaCliIncluded = gradle.includedBuilds.collect { it.name == "corda-cli-plugin-host" }.contains(true)
    dependsOn(sourceTasks)

    if (cordaCliIncluded) {
        logger.lifecycle("corda-cli-plugin-host project detected in composite build logic, building base image from include project")
        dependsOn gradle.includedBuild("corda-cli-plugin-host").task(':app:publishOSGiImage')
    }
    it.sourceTasks = sourceTasks
    it.subDir = "plugins/"
    it.setEntry = false
    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }

    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    // Has to be different as jenkins will always try use zulu
    if (project.hasProperty('cliBaseImage')) {
        baseImageName = cliBaseImage
    } else {
        // cater for local composite build
        baseImageName = (cordaCliIncluded) ? "corda-os-docker-dev.software.r3.com/corda-os-cli" : "corda-os-docker.software.r3.com/corda-os-cli"
    }

    if (project.hasProperty('baseTag')) {
        baseImageTag = baseTag
    } else {
        it.baseImageTag = (cordaCliIncluded) ? "latest-local" : "unstable"
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
}
