plugins {
    id 'corda.common-publishing'
    id 'java'
}

ext {
    releasable = true
}

group 'net.corda.cli.deployment'

configurations {
    cliHostDist
}

dependencies {
    cliHostDist "net.corda.cli.host:corda-cli:${pluginHostVersion}"
}

tasks.register('copyCliFiles') {
    copy {
        from configurations.named('cliHostDist')
        into "$buildDir/cli"
        rename ('.*.jar', 'corda-cli.jar')
    }
    copy {
        from subprojects.collect { it.tasks.named('cliPluginTask') }
        into "$buildDir/cli/plugins"
    }
    copy {
        from "$projectDir/installScripts"
        into "$buildDir/cli"
    }
}

tasks.register("cliInstallArchive", Zip) {
    dependsOn tasks.named('copyCliFiles')
    from "$buildDir/cli"
    include '*'
    include '*/*'
    archiveName 'corda-cli-dist.zip'
    destinationDir(file("$buildDir/zip"))
}

tasks.register("cleanDir", Delete) {
    description 'Removes any previously generated scripts'
    delete 'build/generatedScripts'
}

tasks.register("cliInstallScriptsS3", Copy) {
    dependsOn cleanDir
    description 'Copy corda-cli install scripts to a location in build dir and update to use correct version'
    if (project.hasProperty('maven.repo.s3')) {
        def s3Url = project.findProperty("maven.repo.s3").replace('s3://','https://')+ "/" +
                project.group.replace('.','/') + "/corda-cli-installer/$version/corda-cli-installer-$version"
        from 'templateScripts'
        into 'build/generatedScripts'
        filter {
            String line -> line.replaceAll("TEMPLATE_URL", s3Url)
        }
    }
    else {
        logger.info("parameter 'maven.repo.s3' is required! e.g. -Pmaven.repo.s3=https://demo.s3.com/example/bucket, Taking no action for :cliInstallScriptsS3")
    }
}


tasks.named('jar').configure {
    finalizedBy cliInstallArchive
    if (project.hasProperty('maven.repo.s3')) {
        finalizedBy cliInstallScriptsS3
    }
}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    def sourceTasks = subprojects.collect { it.tasks.named("cliPluginTask").get() }
    def cordaCliIncluded = gradle.includedBuilds.collect { it.name == "corda-cli-plugin-host" }.contains(true)

    if (cordaCliIncluded) {
        logger.lifecycle("corda-cli-plugin-host project detected in composite build logic, building base image from include project")
        dependsOn gradle.includedBuild("corda-cli-plugin-host").task(':app:publishOSGiImage')
    }
    it.sourceFiles.setFrom(sourceTasks)
    it.subDir = "plugins/"
    it.setEntry = false
    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }

    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    // Has to be different as jenkins will always try use zulu
    if (project.hasProperty('cliBaseImage')) {
        baseImageName = cliBaseImage
    } else {
        // cater for local composite build
        baseImageName = (cordaCliIncluded) ? "corda-os-docker-dev.software.r3.com/corda-os-cli" : "corda-os-docker.software.r3.com/corda-os-cli"
    }

    if (project.hasProperty('cliBaseTag')) {
        baseImageTag = cliBaseTag
    } else {
        it.baseImageTag = (cordaCliIncluded) ? "latest-local" : "unstable"
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
}

def s3Script = null

if (project.hasProperty('maven.repo.s3')) {
    s3Script = artifacts.add('archives', file("$project.buildDir/generatedScripts/corda-cli-installer-script.sh")) {
        builtBy('cliInstallScriptsS3')
    }
    artifacts {
        cliInstallArchive
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId "corda-cli-installer"
            groupId project.group
            artifact cliInstallArchive
        }
        if (project.hasProperty('maven.repo.s3') && s3Script != null) {
            maven(MavenPublication) {
                artifactId "corda-cli-installer-script"
                groupId project.group
                artifact s3Script
            }
        }
    }
    if (project.hasProperty('maven.repo.s3') && project.hasProperty('releasable')) {
        publishing {
            repositories {
                maven {
                    url = project.findProperty('maven.repo.s3')
                    credentials(AwsCredentials) {
                        accessKey "${System.getenv('AWS_ACCESS_KEY_ID')}"
                        secretKey "${System.getenv('AWS_SECRET_ACCESS_KEY')}"
                        sessionToken "${System.getenv('AWS_SESSION_TOKEN')}"
                    }
                }
            }
        }
    }
}
