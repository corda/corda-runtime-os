import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.TestOSGi
import aQute.bnd.gradle.Resolve

plugins {
    id "biz.aQute.bnd.builder"
}

configurations {
    all {
        resolutionStrategy.dependencySubstitution {
            substitute module("antlr:antlr") using module("antlr:antlr.osgi:$antlrVersion")
            substitute module("org.dom4j:dom4j") using module("org.apache.servicemix.bundles:org.apache.servicemix.bundles.dom4j:$dom4jOsgiVersion")
        }
    }
    cpks
}

dependencies {
    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation project(":libs:class-info")
    implementation project(":libs:install")
    implementation "net.corda:corda-packaging"
    implementation project(":libs:sandbox")
    implementation "net.corda:corda-serialization"
    implementation project(":libs:serialization:serialization-amqp")

    cpks project(path: ':libs:serialization:serialization-amqp:osgi-integration-tests:test-serializable-1', configuration: 'cordaCPK')
    cpks project(path: ':libs:serialization:serialization-amqp:osgi-integration-tests:test-serializable-2', configuration: 'cordaCPK')
    cpks project(path: ':libs:serialization:serialization-amqp:osgi-integration-tests:test-serializable-3', configuration: 'cordaCPK')
    cpks project(path: ':libs:serialization:serialization-amqp:osgi-integration-tests:test-serializable-4', configuration: 'cordaCPK')

    integrationTestCompileOnly 'org.osgi:org.osgi.service.component.annotations'
    integrationTestCompileOnly 'org.osgi:osgi.annotation'
    integrationTestCompileOnly "org.osgi:org.osgi.service.cm:$osgiCmVersion"
    integrationTestCompileOnly 'org.osgi:osgi.core'

    integrationTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felixConfigAdminVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    integrationTestRuntimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.bundle:$ariesDynamicBundleVersion"
    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    integrationTestImplementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi"
    integrationTestImplementation "org.slf4j:slf4j-api"
    integrationTestImplementation "org.assertj:assertj-core:$assertjVersion"
    integrationTestImplementation "org.apache.qpid:proton-j:$protonjVersion"
}

def integrationTestResources = tasks.named("processIntegrationTestResources", ProcessResources) {
    from configurations.cpks
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    dependsOn integrationTestResources
    archiveBaseName="amqp-osgi-tests"
    from sourceSets.integrationTest.output
    sourceSet = sourceSets.integrationTest
    bnd """\
Bundle-Name: amqp-osgi-tests
Bundle-SymbolicName: amqp-osgi-tests
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
"""
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(sourceSets.integrationTest.runtimeClasspath, testingBundle)
    bndrun = file('tests.bndrun')
    //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
    System.setProperty("bnd.home.dir", "$rootDir/bnd")
}

tasks.register('integrationTest', Test) {
    dependsOn testOSGi
    enabled = false
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve
    resultsDirectory = file("$testResultsDir/integrationTest")
    bundles = files(sourceSets.integrationTest.runtimeClasspath, testingBundle)
    bndrun = file('tests.bndrun')
}

tasks.named('check') {
    dependsOn testOSGi
}