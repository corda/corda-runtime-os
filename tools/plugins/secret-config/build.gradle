plugins {
    id 'distribution'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
}

group 'net.corda.cli.deployment'

dependencies {
    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation 'net.corda.kotlin:kotlin-stdlib-jdk8-osgi'

    compileOnly "org.pf4j:pf4j:$pf4jVersion"
    compileOnly "net.corda.cli.host:api:$pluginHostVersion"
    kapt "org.pf4j:pf4j:$pf4jVersion"
    kapt "info.picocli:picocli-codegen:$picocliVersion"

    implementation project(":libs:configuration:configuration-core")

    testImplementation "org.pf4j:pf4j:$pf4jVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testImplementation "com.github.stefanbirkner:system-lambda:$systemLambdaVersion"
    testImplementation "net.corda.cli.host:api:$pluginHostVersion"
}

def pluginJar = tasks.named('jar', Jar)  {
    manifest {
        attributes['Plugin-Class'] = pluginClass
        attributes['Plugin-Id'] = pluginId
        attributes['Plugin-Version'] = version
        attributes['Plugin-Provider'] = pluginProvider
        attributes['Plugin-Description'] = pluginDescription
    }
}

// the plugin task will put the files into a zip file
def plugin = tasks.register('plugin', Zip) {
    archiveBaseName = "plugin-$pluginId-$version"
    archiveExtension = 'zip'

    // first taking the classes generated by the jar task
    into('classes') {
        from zipTree(pluginJar.map { it.outputs.files.singleFile })
    }
    // and then we also need to include any libraries that are needed by the plugin
    dependsOn configurations.runtimeClasspath.buildDependencies
    into('lib') {
        from configurations.runtimeClasspath.filter { it.name.endsWith('jar')}
    }
}

tasks.register('movePlugin', Copy) {
    from plugin
    into layout.buildDirectory.dir('plugin')
}

tasks.named('assemble') {
    dependsOn movePlugin
}

artifacts {
    archives plugin
}
