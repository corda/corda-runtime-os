// NOTE: this is pretty much a subset of the regular build pipeline, and quite general, so maybe this needs to move to
//   the common library.
pipeline {
    agent {
        docker {
            image 'build-zulu-openjdk:11'
            label 'docker'
            registryUrl 'https://engineering-docker.software.r3.com/'
            registryCredentialsId 'artifactory-credentials'
            // Used to mount storage from the host as a volume to persist the cache between builds
            args '-v /tmp:/host_tmp'
            // make sure build image is always fresh
            alwaysPull true
        }
    }

    parameters {
        string(defaultValue: "",
            description: 'Up String project name',
            name: 'UPSTREAM_PROJECT_NAME')
    }

    environment {
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        CORDA_ARTIFACTORY_USERNAME = "${env.ARTIFACTORY_CREDENTIALS_USR}"
        CORDA_ARTIFACTORY_PASSWORD = "${env.ARTIFACTORY_CREDENTIALS_PSW}"
        CORDA_USE_CACHE = "corda-remotes"
        GRADLE_USER_HOME = "/host_tmp/gradle"
        CORDA_REVISION = "${env.GIT_COMMIT}"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
        timeout(time: 120, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Prepare') {
            steps {
               sh 'mkdir -p "${GRADLE_USER_HOME}"'
            }
        }
        stage('Download Corda maven artifacts') {
            when {
                expression { return !params.UPSTREAM_PROJECT_NAME.isEmpty() }
            }
            steps {
                sh 'mkdir -p /tmp/artifacts/mavenLocal'
                copyArtifacts projectName: params.UPSTREAM_PROJECT_NAME,
                    selector: upstream(),
                    fingerprintArtifacts: true,
                    filter: 'mavenLocal.tar.gz'
                sh 'tar -xvf mavenLocal.tar.gz -C /tmp/artifacts/mavenLocal'
                sh 'rm -rf mavenLocal.tar.gz'
                script {
                    cordaVersion = sh (script: 'find /tmp/artifacts/mavenLocal/net/corda/corda-base/* -type d | awk -F/ \'{print $NF}\'', returnStdout: true).trim()
                }
                echo "Downloaded from downstream build: $cordaVersion"
            }
        }
        stage('Build') {
            steps {
                sh "./gradlew clean build -Dmaven.repo.local=/tmp/artifacts/mavenLocal"
                // TODO: this is a bit of a hack, but we'd like to know which dependencies where used
                //  and the dependency task only works per module.
                sh "./gradlew :applications:examples:demo-app:dependencies"
            }
        }
    }
    post {
        cleanup {
            junit allowEmptyResults: true, testResults: '**/build/test-results/**/TEST-*.xml'
            archiveArtifacts artifacts: '**/build/test-results/**/TEST-*.xml', fingerprint: true
            recordIssues(
                enabledForFailure: true, aggregatingResults: true,
                tools: [kotlin(), java(), detekt(pattern: '**/build/detekt-report.xml')]
            )
        }
        success {
            sh 'rm -rf **/build/test-results/**/TEST-*.xml'
        }
    }
}
