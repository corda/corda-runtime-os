package net.corda.v5.crypto

import net.corda.coretesting.internal.createTestSerializationEnv
import net.corda.crypto.SigningService
import net.corda.crypto.sha256
import net.corda.crypto.testkit.CryptoMocks
import net.corda.v5.crypto.CompositeKey.NodeAndWeight
import net.corda.internal.base.declaredField
import net.corda.v5.application.services.serialization.SerializationService
import net.corda.v5.base.types.OpaqueBytes
import net.corda.v5.cipher.suite.CipherSchemeMetadata
import net.corda.v5.cipher.suite.SchemeTemplates.Companion.ECDSA_SECP256K1_SHA256_CODE_NAME
import net.corda.v5.cipher.suite.SchemeTemplates.Companion.ECDSA_SECP256R1_SHA256_CODE_NAME
import net.corda.v5.cipher.suite.SchemeTemplates.Companion.EDDSA_ED25519_SHA512_CODE_NAME
import net.corda.v5.cipher.suite.SchemeTemplates.Companion.RSA_SHA256_CODE_NAME
import net.corda.v5.cipher.suite.SchemeTemplates.Companion.SPHINCS256_SHA256_CODE_NAME
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Timeout
import java.lang.UnsupportedOperationException
import java.security.PublicKey
import java.util.UUID
import kotlin.test.assertEquals
import kotlin.test.assertFailsWith
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class CompositeKeyTests {
    companion object {
        private val message = OpaqueBytes("Transaction".toByteArray())
        private val secureHash = message.bytes.sha256()
        private lateinit var serializer: SerializationService
        private lateinit var signer: SigningService
        private lateinit var schemeMetadata: CipherSchemeMetadata

        @BeforeAll
        @JvmStatic
        fun setup() {
            val cryptoMocks = CryptoMocks()
            serializer = createTestSerializationEnv().p2pSerialization
            signer = cryptoMocks.signingService()
            schemeMetadata = cryptoMocks.schemeMetadata()
        }
    }

    private lateinit var alicePublicKey: PublicKey
    private lateinit var bobPublicKey: PublicKey
    private lateinit var charliePublicKey: PublicKey
    private lateinit var aliceSignature: DigitalSignatureAndMeta
    private lateinit var bobSignature: DigitalSignatureAndMeta
    private lateinit var charlieSignature: DigitalSignatureAndMeta

    @BeforeEach
    fun setupEach() {
        alicePublicKey = generateKeys()
        bobPublicKey = generateKeys()
        charliePublicKey = generateKeys()

        aliceSignature = sign(alicePublicKey, SignableData(secureHash, SignatureMetadata(1)))
        bobSignature = sign(bobPublicKey, SignableData(secureHash, SignatureMetadata(1)))
        charlieSignature = sign(charliePublicKey, SignableData(secureHash, SignatureMetadata(1)))
    }

    @Test
    @Timeout(30)
	fun `(Alice) fulfilled by Alice signature`() {
        assertTrue { alicePublicKey.isFulfilledBy(aliceSignature.by) }
        assertFalse { alicePublicKey.isFulfilledBy(charlieSignature.by) }
    }

    @Test
    @Timeout(30)
	fun `(Alice or Bob) fulfilled by either signature`() {
        val aliceOrBob = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build(threshold = 1)
        assertTrue { aliceOrBob.isFulfilledBy(aliceSignature.by) }
        assertTrue { aliceOrBob.isFulfilledBy(bobSignature.by) }
        assertTrue { aliceOrBob.isFulfilledBy(listOf(aliceSignature.by, bobSignature.by)) }
        assertFalse { aliceOrBob.isFulfilledBy(charlieSignature.by) }
    }

    @Test
    @Timeout(30)
	fun `(Alice and Bob) fulfilled by Alice, Bob signatures`() {
        val aliceAndBob = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build()
        val signatures = listOf(aliceSignature, bobSignature)
        assertTrue { aliceAndBob.isFulfilledBy(signatures.byKeys()) }
    }

    @Test
    @Timeout(30)
	fun `(Alice and Bob) requires both signatures to fulfil`() {
        val aliceAndBob = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build()
        assertFalse { aliceAndBob.isFulfilledBy(listOf(aliceSignature).byKeys()) }
        assertFalse { aliceAndBob.isFulfilledBy(listOf(bobSignature).byKeys()) }
        assertTrue { aliceAndBob.isFulfilledBy(listOf(aliceSignature, bobSignature).byKeys()) }
    }

    @Test
    @Timeout(30)
	fun `((Alice and Bob) or Charlie) signature verifies`() {
        // TODO: Look into a DSL for building multi-level composite keys if that becomes a common use case
        val aliceAndBob = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build()
        val aliceAndBobOrCharlie = CompositeKey.Builder().addKeys(aliceAndBob, charliePublicKey).build(threshold = 1)

        val signatures = listOf(aliceSignature, bobSignature)

        assertTrue { aliceAndBobOrCharlie.isFulfilledBy(signatures.byKeys()) }
    }

    @Test
    @Timeout(30)
	fun `tree canonical form`() {
        assertEquals(CompositeKey.Builder().addKeys(alicePublicKey).build(), alicePublicKey)
        val node1 = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build(1) // threshold = 1
        val node2 = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build(2) // threshold = 2
        assertFalse(node2.isFulfilledBy(alicePublicKey))
        // Ordering by weight.
        val tree1 = CompositeKey.Builder().addKey(node1, 13).addKey(node2, 27).build()
        val tree2 = CompositeKey.Builder().addKey(node2, 27).addKey(node1, 13).build()
        assertEquals(tree1, tree2)
        assertEquals(tree1.hashCode(), tree2.hashCode())

        // Ordering by node, weights the same.
        val tree3 = CompositeKey.Builder().addKeys(node1, node2).build()
        val tree4 = CompositeKey.Builder().addKeys(node2, node1).build()
        assertEquals(tree3, tree4)
        assertEquals(tree3.hashCode(), tree4.hashCode())

        // Duplicate node cases.
        val tree5 = CompositeKey.Builder().addKey(node1, 3).addKey(node1, 14).build()
        val tree6 = CompositeKey.Builder().addKey(node1, 14).addKey(node1, 3).build()
        assertEquals(tree5, tree6)

        // Chain of single nodes should throw.
        assertEquals(CompositeKey.Builder().addKeys(tree1).build(), tree1)
    }

    /**
     * Check that verifying a composite signature using the [CompositeSignature] engine works.
     */
    @Test
    @Timeout(30)
	fun `composite TransactionSignature verification `() {
        val twoOfThree = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey, charliePublicKey).build(threshold = 2)

        val engine = CompositeSignature()
        engine.initVerify(twoOfThree)
        engine.update(secureHash.bytes)

        // CRYPTO-14 as part of the refactoring crom core to crypto Composite signature has no engineVerify yet.
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            {engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(aliceSignature))).bytes)}
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(aliceSignature))).bytes) }
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(bobSignature))).bytes) }
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(charlieSignature))).bytes) }
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(aliceSignature, bobSignature))).bytes) }
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(aliceSignature, charlieSignature))).bytes) }
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(bobSignature, charlieSignature))).bytes) }
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(aliceSignature, bobSignature, charlieSignature))).bytes) }

        // Check the underlying signature is validated
        val brokenBobSignature = DigitalSignatureAndMeta(aliceSignature.bytes, bobSignature.by, SignatureMetadata(1))
        assertFailsWith<UnsupportedOperationException>("CompositeSignature.engineVerify unimplemented")
            { engine.verify(serializer.serialize(CompositeSignaturesWithKeys(listOf(aliceSignature, brokenBobSignature))).bytes) }
    }

    @Test
    @Timeout(30)
    fun `composite key constraints`() {
        // Zero weight.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKey(alicePublicKey, 0)
        }
        // Negative weight.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKey(alicePublicKey, -1)
        }
        // Zero threshold.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKey(alicePublicKey).build(0)
        }
        // Negative threshold.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKey(alicePublicKey).build(-1)
        }
        // Threshold > Total-weight.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKey(alicePublicKey, 2).addKey(bobPublicKey, 2).build(5)
        }
        // Threshold value different than weight of single child node.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKey(alicePublicKey, 3).build(2)
        }
        // Aggregated weight integer overflow.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKey(alicePublicKey, Int.MAX_VALUE).addKey(bobPublicKey, Int.MAX_VALUE).build()
        }
        // Duplicated children.
        assertFailsWith(IllegalArgumentException::class) {
            CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey, alicePublicKey).build()
        }
        // Duplicated composite key children.
        assertFailsWith(IllegalArgumentException::class) {
            val compositeKey1 = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build()
            val compositeKey2 = CompositeKey.Builder().addKeys(bobPublicKey, alicePublicKey).build()
            CompositeKey.Builder().addKeys(compositeKey1, compositeKey2).build()
        }
    }


    @Test
    @Timeout(30)
    fun `composite key validation`() {
        val key1 = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build() as CompositeKey
        val key2 = CompositeKey.Builder().addKeys(alicePublicKey, key1).build() as CompositeKey
        val key3 = CompositeKey.Builder().addKeys(alicePublicKey, key2).build() as CompositeKey
        val key4 = CompositeKey.Builder().addKeys(alicePublicKey, key3).build() as CompositeKey
        val key5 = CompositeKey.Builder().addKeys(alicePublicKey, key4).build() as CompositeKey
        val key6 = CompositeKey.Builder().addKeys(alicePublicKey, key5, key2).build() as CompositeKey

        // Initially, there is no any graph cycle.
        key1.checkValidity()
        key2.checkValidity()
        key3.checkValidity()
        key4.checkValidity()
        key5.checkValidity()
        // The fact that key6 has a direct reference to key2 and an indirect (via path key5->key4->key3->key2)
        // does not imply a cycle, as expected (independent paths).
        key6.checkValidity()
    }

    @Test
    @Timeout(30)
    fun `composite key validation with graph cycle detection`() {
        val key1 = CompositeKey.Builder().addKeys(alicePublicKey, bobPublicKey).build() as CompositeKey
        val key2 = CompositeKey.Builder().addKeys(alicePublicKey, key1).build() as CompositeKey
        val key3 = CompositeKey.Builder().addKeys(alicePublicKey, key2).build() as CompositeKey
        val key4 = CompositeKey.Builder().addKeys(alicePublicKey, key3).build() as CompositeKey
        val key5 = CompositeKey.Builder().addKeys(alicePublicKey, key4).build() as CompositeKey
        val key6 = CompositeKey.Builder().addKeys(alicePublicKey, key5, key2).build() as CompositeKey

        // We will create a graph cycle between key5 and key3. Key5 has already a reference to key3 (via key4).
        // To create a cycle, we add a reference (child) from key3 to key5.
        // Children list is immutable, so reflection is used to inject key5 as an extra NodeAndWeight child of key3.
        key3.declaredField<List<NodeAndWeight>>("children").value = key3.children + NodeAndWeight(key5, 1)

        /* A view of the example graph cycle.
         *
         *               key6
         *              /    \
         *            key5   key2
         *            /
         *         key4
         *         /
         *       key3
         *      /   \
         *    key2  key5
         *    /
         *  key1
         *
         */

        // Detect the graph cycle starting from key3.
        assertFailsWith(IllegalArgumentException::class) {
            key3.checkValidity()
        }

        // Detect the graph cycle starting from key4.
        assertFailsWith(IllegalArgumentException::class) {
            key4.checkValidity()
        }

        // Detect the graph cycle starting from key5.
        assertFailsWith(IllegalArgumentException::class) {
            key5.checkValidity()
        }

        // Detect the graph cycle starting from key6.
        // Typically, one needs to test on the root tree-node only (thus, a validity check on key6 would be enough).
        assertFailsWith(IllegalArgumentException::class) {
            key6.checkValidity()
        }

        // Key2 (and all paths below it, i.e. key1) are outside the graph cycle and thus, there is no impact on them.
        key2.checkValidity()
        key1.checkValidity()
    }

    @Test
    @Timeout(30)
	fun `CompositeKey from multiple signature schemes and signature verification`() {
        val publicKeyRSA = generateKeys(schemeMetadata.findScheme(RSA_SHA256_CODE_NAME))
        val publicKeyK1 = generateKeys(schemeMetadata.findScheme(ECDSA_SECP256K1_SHA256_CODE_NAME))
        val publicKeyR1 = generateKeys(schemeMetadata.findScheme(ECDSA_SECP256R1_SHA256_CODE_NAME))
        val publicKeyEd = generateKeys(schemeMetadata.findScheme(EDDSA_ED25519_SHA512_CODE_NAME))
        val publicKeySP = generateKeys(schemeMetadata.findScheme(SPHINCS256_SHA256_CODE_NAME))

        val RSASignature = sign(publicKeyRSA, SignableData(secureHash, SignatureMetadata(1)))
        val K1Signature = sign(publicKeyK1, SignableData(secureHash, SignatureMetadata(1)))
        val R1Signature = sign(publicKeyR1, SignableData(secureHash, SignatureMetadata(1)))
        val EdSignature = sign(publicKeyEd, SignableData(secureHash, SignatureMetadata(1)))
        val SPSignature = sign(publicKeySP, SignableData(secureHash, SignatureMetadata(1)))

        val compositeKey = CompositeKey.Builder().addKeys(publicKeyRSA, publicKeyK1, publicKeyR1, publicKeyEd, publicKeySP).build() as CompositeKey

        val signatures = listOf(RSASignature, K1Signature, R1Signature, EdSignature, SPSignature)
        assertTrue { compositeKey.isFulfilledBy(signatures.byKeys()) }

        // One signature is missing.
        val signaturesWithoutRSA = listOf(K1Signature, R1Signature, EdSignature, SPSignature)
        assertFalse { compositeKey.isFulfilledBy(signaturesWithoutRSA.byKeys()) }
    }

    @Test
    @Timeout(30)
	fun `CompositeKey deterministic children sorting`() {
        val pub1 = generateKeys(schemeMetadata.findScheme(EDDSA_ED25519_SHA512_CODE_NAME))
        val pub2 = generateKeys(schemeMetadata.findScheme(ECDSA_SECP256K1_SHA256_CODE_NAME))
        val pub3 = generateKeys(schemeMetadata.findScheme(RSA_SHA256_CODE_NAME))
        val pub4 = generateKeys(schemeMetadata.findScheme(EDDSA_ED25519_SHA512_CODE_NAME))
        val pub5 = generateKeys(schemeMetadata.findScheme(ECDSA_SECP256R1_SHA256_CODE_NAME))
        val pub6 = generateKeys(schemeMetadata.findScheme(SPHINCS256_SHA256_CODE_NAME))
        val pub7 = generateKeys(schemeMetadata.findScheme(ECDSA_SECP256K1_SHA256_CODE_NAME))

        // Using default weight = 1, thus all weights are equal.
        val composite1 = CompositeKey.Builder().addKeys(pub1, pub2, pub3, pub4, pub5, pub6, pub7).build() as CompositeKey
        // Store in reverse order.
        val composite2 = CompositeKey.Builder().addKeys(pub7, pub6, pub5, pub4, pub3, pub2, pub1).build() as CompositeKey
        // There are 7! = 5040 permutations, but as sorting is deterministic the following should never fail.
        assertEquals(composite1.children, composite2.children)
    }

    private fun generateKeys(scheme: SignatureScheme = schemeMetadata.findScheme(EDDSA_ED25519_SHA512_CODE_NAME)) =
            signer.generateKeyPair(UUID.randomUUID().toString(), scheme)

    private fun sign(publicKey: PublicKey, signableData: SignableData): DigitalSignatureAndMeta {
        val signature = signer.sign(publicKey, serializer.serialize(signableData).bytes)
        return DigitalSignatureAndMeta(signature.bytes, signature.by, signableData.signatureMetadata)
    }
}
