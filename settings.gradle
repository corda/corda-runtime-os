pluginManagement {
    repositories {
        mavenLocal()
        def cordaUseCache = System.getenv("CORDA_USE_CACHE")
        if (cordaUseCache != null) {
            maven {
                url = "${artifactoryContextUrl}/${cordaUseCache}"
                name = "R3 Maven remote repositories"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = settings.ext.find('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = settings.ext.find('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            maven {
                url "${artifactoryContextUrl}/corda-releases"
                content {
                    includeGroupByRegex 'net\\.corda\\.plugins(\\..*)?'
                }
            }
            maven {
                url "${artifactoryContextUrl}/corda-os-maven"
                content {
                    includeGroupByRegex 'net\\.corda\\.cordapp(\\..*)?'
                }
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = settings.ext.find('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = settings.ext.find('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
            gradlePluginPortal()
            maven {
                url "${artifactoryContextUrl}/engineering-tools-maven"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = settings.ext.find('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = settings.ext.find('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        }
    }
    plugins {
        id 'net.corda.cordapp.cordapp-configuration' version cordaApiVersion
        id 'org.jetbrains.kotlin.jvm' version kotlinVersion
        id 'org.jetbrains.kotlin.plugin.allopen' version kotlinVersion
        id 'org.jetbrains.kotlin.plugin.jpa' version kotlinVersion
        id 'net.corda.plugins.cordapp-cpk' version cordaGradlePluginsVersion
        id 'net.corda.plugins.cordapp-cpb' version cordaGradlePluginsVersion
        id 'net.corda.plugins.quasar-utils' version cordaGradlePluginsVersion
        id 'com.r3.internal.gradle.plugins.r3ArtifactoryPublish' version internalPublishVersion
        id 'com.r3.internal.gradle.plugins.r3Publish' version internalPublishVersion
        id 'io.gitlab.arturbosch.detekt' version detektPluginVersion
    }
}

dependencyResolutionManagement {
    repositories {
        mavenCentral()
    }
}

rootProject.name = 'corda-runtime-os'
include 'applications:examples:demo-app'
include 'applications:examples:demo-publisher'
include 'applications:examples:goodbyeworld'
include 'applications:examples:persistence:persistence-config'
include 'applications:examples:persistence:persistence-demo'
include 'applications:examples:persistence:persistence-demo-publisher'
include 'applications:examples:hello-quasar'
include 'applications:tools:kafka-reader'
include 'applications:tools:kafka-setup'
include 'applications:p2p-gateway'
include 'components:crypto:crypto-client'
include 'components:crypto:crypto-component-base'
include 'components:crypto:crypto-service'
include 'applications:tools:p2p-test:app-simulator'
include 'applications:tools:p2p-test:cryptoservice-key-creator'
include 'applications:tools:p2p-test:network-map-creator'
include 'applications:http-rpc-gateway'
include 'components:configuration:configuration-read-service'
include 'components:configuration:configuration-read-service-impl'
include 'components:flow-service'
include 'components:gateway'
include 'components:kafka-config-read'
include 'components:kafka-config-write'
include 'components:kafka-topic-admin'
include 'components:gateway'
include 'components:install:install'
include 'components:install:test-resources:contract-cpk'
include 'components:install:test-resources:workflow-cpk'
include 'components:install:file-based-install-service'
include 'components:install:install-legacy'
include 'components:install:install-legacy:split-packages-one'
include 'components:install:install-legacy:split-packages-one:library-one'
include 'components:install:install-legacy:split-packages-two'
include 'components:install:install-legacy:split-packages-two:library-two'
include 'components:link-manager'
include 'components:domino-logic'
include 'components:membership:membership-impl'
include 'components:membership:membership-internal'
include 'components:http-rpc-gateway-comp'
include 'components:examples:config-reader'
include 'components:examples:durable-sub'
include 'components:examples:persistence:cluster-admin'
include 'components:examples:persistence:config-admin'
include 'components:examples:publisher'
include 'components:examples:pubsub-sub'
include 'components:examples:state-plus-event-sub'
include 'libs:configuration:configuration-core'
include 'libs:configuration:configuration-read'
include 'libs:configuration:configuration-schema:p2p'
include 'libs:configuration:configuration-read-impl'
include 'libs:configuration:configuration-write'
include 'libs:configuration:configuration-write-impl'
include 'libs:configuration:file-configuration-read-impl'
include 'libs:crypto:crypto-internal'
include 'libs:crypto:crypto-impl'
include 'libs:db:db-admin'
include 'libs:db:db-admin-impl'
include 'libs:db:db-core'
include 'libs:db:db-orm'
include 'libs:db:db-orm-impl'
include 'libs:db:osgi-integration-tests'
include 'libs:examples:helloworld'
include 'libs:examples:helloworld-impl'
include 'libs:flows:dependency-injection'
include 'libs:flows:dependency-injection-impl'
include 'libs:flows:flow-manager'
include 'libs:flows:flow-manager-impl'
include 'libs:flows:statemachine'
include 'libs:flows:statemachine-impl'
include 'libs:http-rpc:http-rpc'
include 'libs:http-rpc:http-rpc-security-read'
include 'libs:http-rpc:http-rpc-tools'
include 'libs:http-rpc:json-serialization'
include 'libs:http-rpc:http-rpc-server'
include 'libs:http-rpc:http-rpc-server-impl'
include 'libs:http-rpc:http-rpc-stubs-impl'
include 'libs:http-rpc:ssl-cert-read'
include 'libs:http-rpc:http-rpc-common'
include 'libs:http-rpc:http-rpc-client'
include 'libs:http-rpc:http-rpc-test-common'
include 'libs:kafka-utils:topic-admin'
include 'libs:kafka-utils:topic-admin-impl'
include 'libs:kotlin-reflection'
include 'libs:kotlin-reflection:kotlin-reflection-test-api'
include 'libs:kotlin-reflection:kotlin-reflection-test-example'
include 'libs:lifecycle:lifecycle'
include 'libs:lifecycle:lifecycle-impl'
include 'libs:lifecycle:registry'
include 'libs:messaging:messaging'
include 'libs:messaging:db-messaging-impl'
include 'libs:messaging:kafka-messaging-impl'
include 'libs:messaging:inmemory-messaging-impl'
include 'libs:p2p-crypto'
include 'libs:sandbox'
include 'libs:sandbox:sandbox-cpk-library'
include 'libs:sandbox:sandbox-cpk-one'
include 'libs:sandbox:sandbox-cpk-two'
include 'libs:sandbox:sandbox-cpk-three'
include 'libs:sandbox:sandbox-irresolvable-cpk'
include 'libs:sandbox-hooks'
include 'libs:schema-registry:schema-registry'
include 'libs:schema-registry:schema-registry-impl'
include 'libs:security-manager'
include 'libs:serialization:checkpoint-serialization-api'
include 'libs:serialization:kryo-serializers'
include 'libs:serialization:serialization-amqp'
include 'libs:serialization:serialization-amqp:serializable-cpk-one'
include 'libs:serialization:serialization-amqp:serializable-cpk-two'
include 'libs:serialization:serialization-amqp:serializable-cpk-three'
include 'libs:serialization:serialization-amqp:serializable-cpk-four'
include 'libs:serialization:serialization-encoding'
include 'libs:serialization:serialization-kryo'
include 'libs:serialization:serialization-kryo:src:integrationTest:cpks:serializable-cpk-one'
include 'libs:serialization:serialization-kryo:src:integrationTest:cpks:serializable-cpk-two'
include 'libs:utilities'
include 'libs:virtual-node:virtual-node-cache'
include 'libs:virtual-node:virtual-node-cache-impl'
include 'osgi-framework-api'
include 'osgi-framework-bootstrap'
include 'testing:apps:test-app'
include 'testing:crypto-testkit'
include 'testing:bundles:testing-cats'
include 'testing:bundles:testing-dogs'
include 'testing:message-patterns'
include 'testing:test-utilities'

// The following logic dictates if we use the composite build gradle functionality,
// If this evaluates to true local source code will be used in place of binary dependencies.
// This is intended for local use only. The checks in place should prevent this from being triggered on a Jenkins server where we would always want to use the Binaries.

if ("${compositeBuild}".toBoolean() && file("${cordaApiLocation}").exists()) {
    includeBuild('../corda-api') {
        dependencySubstitution {
            substitute module('net.corda:corda-application') using project(':application')
            substitute module('net.corda:corda-base') using project(':base')
            substitute module('net.corda:corda-cipher-suite') using project(':cipher-suite')
            substitute module('net.corda:corda-api') using project(':corda-api')
            substitute module('net.corda:corda-crypto') using project(':crypto')
            substitute module('net.corda:corda-avro-schema') using project(':data:avro-schema')
            substitute module('net.corda:corda-topic-schema') using project(':data:topic-schema')
            substitute module('net.corda:corda-ledger') using project(':ledger')
            substitute module('net.corda:corda-membership') using project(':membership')
            substitute module('net.corda:corda-membership-identity') using project(':membership-identity')
            substitute module('net.corda:corda-packaging') using project(':packaging')
            substitute module('net.corda:corda-persistence') using project(':persistence')
            substitute module('net.corda:corda-serialization') using project(':serialization')
        }
    }
}
