/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.p2p.crypto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GatewayToLinkManagerMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4105012023621656731L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GatewayToLinkManagerMessage\",\"namespace\":\"net.corda.p2p.crypto\",\"fields\":[{\"name\":\"payload\",\"type\":[{\"type\":\"record\",\"name\":\"AuthenticatedDataMessage\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"CommonHeader\",\"fields\":[{\"name\":\"messageType\",\"type\":{\"type\":\"enum\",\"name\":\"MessageType\",\"symbols\":[\"INITIATOR_HELLO\",\"RESPONDER_HELLO\",\"INITIATOR_HANDSHAKE\",\"RESPONDER_HANDSHAKE\",\"DATA\"]}},{\"name\":\"protocolVersion\",\"type\":\"int\"},{\"name\":\"sessionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sequenceNo\",\"type\":\"long\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}},{\"name\":\"payload\",\"type\":\"bytes\"},{\"name\":\"authTag\",\"type\":\"bytes\"}]},{\"type\":\"record\",\"name\":\"InitiatorHelloMessage\",\"fields\":[{\"name\":\"header\",\"type\":\"CommonHeader\"},{\"name\":\"initiatorPublicKey\",\"type\":\"bytes\"},{\"name\":\"supportedModes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"ProtocolMode\",\"symbols\":[\"AUTHENTICATION_ONLY\",\"AUTHENTICATED_ENCRYPTION\"]}}}]},{\"type\":\"record\",\"name\":\"InitiatorHandshakeMessage\",\"fields\":[{\"name\":\"header\",\"type\":\"CommonHeader\"},{\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"name\":\"authTag\",\"type\":\"bytes\"}]},{\"type\":\"record\",\"name\":\"ResponderHelloMessage\",\"fields\":[{\"name\":\"header\",\"type\":\"CommonHeader\"},{\"name\":\"responderPublicKey\",\"type\":\"bytes\"},{\"name\":\"selectedMode\",\"type\":\"ProtocolMode\"}]},{\"type\":\"record\",\"name\":\"ResponderHandshakeMessage\",\"fields\":[{\"name\":\"header\",\"type\":\"CommonHeader\"},{\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"name\":\"authTag\",\"type\":\"bytes\"}]},{\"type\":\"record\",\"name\":\"Step2Message\",\"fields\":[{\"name\":\"initiatorHello\",\"type\":\"InitiatorHelloMessage\"},{\"name\":\"responderHello\",\"type\":\"ResponderHelloMessage\"},{\"name\":\"privateKey\",\"type\":\"bytes\"},{\"name\":\"publicKey\",\"type\":\"bytes\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GatewayToLinkManagerMessage> ENCODER =
      new BinaryMessageEncoder<GatewayToLinkManagerMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GatewayToLinkManagerMessage> DECODER =
      new BinaryMessageDecoder<GatewayToLinkManagerMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GatewayToLinkManagerMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GatewayToLinkManagerMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GatewayToLinkManagerMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GatewayToLinkManagerMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GatewayToLinkManagerMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GatewayToLinkManagerMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GatewayToLinkManagerMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GatewayToLinkManagerMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Object payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GatewayToLinkManagerMessage() {}

  /**
   * All-args constructor.
   * @param payload The new value for payload
   */
  public GatewayToLinkManagerMessage(java.lang.Object payload) {
    this.payload = payload;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payload;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payload = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.lang.Object getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.Object value) {
    this.payload = value;
  }

  /**
   * Creates a new GatewayToLinkManagerMessage RecordBuilder.
   * @return A new GatewayToLinkManagerMessage RecordBuilder
   */
  public static net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder newBuilder() {
    return new net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder();
  }

  /**
   * Creates a new GatewayToLinkManagerMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GatewayToLinkManagerMessage RecordBuilder
   */
  public static net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder newBuilder(net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder other) {
    if (other == null) {
      return new net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder();
    } else {
      return new net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder(other);
    }
  }

  /**
   * Creates a new GatewayToLinkManagerMessage RecordBuilder by copying an existing GatewayToLinkManagerMessage instance.
   * @param other The existing instance to copy.
   * @return A new GatewayToLinkManagerMessage RecordBuilder
   */
  public static net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder newBuilder(net.corda.p2p.crypto.GatewayToLinkManagerMessage other) {
    if (other == null) {
      return new net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder();
    } else {
      return new net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for GatewayToLinkManagerMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GatewayToLinkManagerMessage>
    implements org.apache.avro.data.RecordBuilder<GatewayToLinkManagerMessage> {

    private java.lang.Object payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing GatewayToLinkManagerMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.p2p.crypto.GatewayToLinkManagerMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.lang.Object getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder setPayload(java.lang.Object value) {
      validate(fields()[0], value);
      this.payload = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.GatewayToLinkManagerMessage.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GatewayToLinkManagerMessage build() {
      try {
        GatewayToLinkManagerMessage record = new GatewayToLinkManagerMessage();
        record.payload = fieldSetFlags()[0] ? this.payload :  defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GatewayToLinkManagerMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<GatewayToLinkManagerMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GatewayToLinkManagerMessage>
    READER$ = (org.apache.avro.io.DatumReader<GatewayToLinkManagerMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










