import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

import static com.gradle.enterprise.gradleplugin.test.JUnitXmlDialect.GENERIC
import com.gradle.enterprise.gradleplugin.test.ImportJUnitXmlReports

import static org.gradle.jvm.toolchain.JavaLanguageVersion.of

plugins {
    id 'corda.common-library'
    id 'corda.common-publishing'
}

description 'Messaging Patterns Test'

configurations {
    kafkaIntegrationTestRuntimeOnly.extendsFrom integrationTestRuntimeOnly

    dbIntegrationTestRuntimeOnly.extendsFrom integrationTestRuntimeClasspath
}

dependencies {
    integrationTestCompileOnly 'org.osgi:osgi.core'
    integrationTestCompileOnly 'org.osgi:org.osgi.service.component.annotations'
    integrationTestImplementation 'org.jetbrains.kotlin:kotlin-osgi-bundle'

    integrationTestImplementation project(":components:kafka-topic-admin")

    integrationTestImplementation project(":libs:configuration:configuration-core")
    integrationTestImplementation project(":libs:lifecycle:lifecycle")
    integrationTestImplementation project(":libs:messaging:messaging")
    integrationTestImplementation project(":libs:messaging:messaging-impl")
    integrationTestImplementation project(":libs:messaging:topic-admin")
    integrationTestImplementation project(":libs:schema-registry:schema-registry")
    integrationTestImplementation project(":testing:test-utilities")

    integrationTestImplementation platform("net.corda:corda-api:$cordaApiVersion")
    integrationTestImplementation "net.corda:corda-avro-schema"
    integrationTestImplementation "net.corda:corda-base"
    integrationTestImplementation 'net.corda:corda-config-schema'
    integrationTestImplementation 'net.corda:corda-topic-schema'

    integrationTestImplementation "com.typesafe:config:$typeSafeConfigVersion"
    integrationTestImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"
    integrationTestImplementation "javax.persistence:javax.persistence-api"
    integrationTestImplementation "org.apache.servicemix.bundles:org.apache.servicemix.bundles.kafka-clients:$kafkaClientVersion"

    integrationTestImplementation project(":components:kafka-topic-admin")
    integrationTestImplementation 'net.corda:corda-db-schema'
    integrationTestImplementation project(":libs:db:db-core")
    integrationTestImplementation project(":libs:db:db-admin")
    integrationTestImplementation project(":libs:db:db-admin-impl")
    integrationTestImplementation project(":libs:db:db-orm")
    integrationTestImplementation project(":libs:messaging:db-message-bus-datamodel")
    integrationTestImplementation project(":libs:messaging:topic-admin")
    integrationTestImplementation project(":testing:db-message-bus-testkit")

    //runtime implementation dependencies
    integrationTestRuntimeOnly project(':libs:crypto:cipher-suite-impl')
    integrationTestRuntimeOnly project(":libs:schema-registry:schema-registry-impl")
    integrationTestRuntimeOnly project(":libs:lifecycle:lifecycle-impl")
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
    integrationTestRuntimeOnly "com.sun.activation:javax.activation:$activationVersion"
    integrationTestRuntimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.framework.extension:$ariesDynamicFrameworkExtensionVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"

    kafkaIntegrationTestRuntimeOnly project(":libs:messaging:kafka-topic-admin-impl")
    kafkaIntegrationTestRuntimeOnly project(":libs:messaging:kafka-message-bus-impl")

    dbIntegrationTestRuntimeOnly project(":libs:messaging:db-topic-admin-impl")
    dbIntegrationTestRuntimeOnly project(":libs:messaging:db-message-bus-impl")
    dbIntegrationTestRuntimeOnly "org.ops4j.pax.jdbc:pax-jdbc-hsqldb:$paxJdbcVersion"
    dbIntegrationTestRuntimeOnly "org.hsqldb:hsqldb:$hsqldbVersion"
    dbIntegrationTestRuntimeOnly "org.postgresql:postgresql:$postgresDriverVersion"
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.integrationTest.output

    bundle {
        sourceSet = sourceSets.integrationTest
        classpath = sourceSets.integrationTest.compileClasspath
        bnd """\
Bundle-SymbolicName: \${task.archiveBaseName}-\${task.archiveClassifier}
    Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
"""
    }
}

def dbResolve = tasks.register('dbResolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(configurations.integrationTestRuntimeClasspath, configurations.dbIntegrationTestRuntimeOnly, configurations.archives.artifacts.files)
    bndrun = file('test.db.bndrun')
    outputBndrun = layout.buildDirectory.file('resolved-test.db.bndrun')
    doFirst {
        //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
        System.setProperty('bnd.home.dir', "$rootDir/bnd/")
    }
}

def kafkaResolve = tasks.register('kafkaResolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(configurations.integrationTestRuntimeClasspath, configurations.kafkaIntegrationTestRuntimeOnly, configurations.archives.artifacts.files)
    bndrun = file('test.kafka.bndrun')
    outputBndrun = layout.buildDirectory.file('resolved-test.kafka.bndrun')
    doFirst {
        //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
        System.setProperty('bnd.home.dir', "$rootDir/bnd/")
    }
}

tasks.register('kafkaIntegrationTest', TestOSGi) {
    description = "Runs Kafka OSGi integration tests."
    group = "verification"
    resultsDirectory = file("$testResultsDir/kafkaIntegrationTest")
    bundles = files(configurations.integrationTestRuntimeClasspath, configurations.kafkaIntegrationTestRuntimeOnly, configurations.archives.artifacts.files)
    bndrun = kafkaResolve.flatMap { it.outputBndrun }
}

tasks.register('dbIntegrationTest', TestOSGi) {
    description = "Runs DB Message Bus OSGi integration tests."
    group = "verification"
    resultsDirectory = file("$testResultsDir/dbIntegrationTest")
    bundles = files(configurations.integrationTestRuntimeClasspath, configurations.dbIntegrationTestRuntimeOnly, configurations.archives.artifacts.files)
    bndrun = dbResolve.flatMap { it.outputBndrun }
}

// Gradle enterprise does not pick up OSGI tests by default as they they are of type TestOSGi rather than standard
// Test task this ensures test results are captured
def importTask = tasks.register("importOSGiJUnitXml", ImportJUnitXmlReports) {
    dialect = GENERIC
    reports.from(fileTree("$testResultsDir/dbIntegrationTest").matching {
        include '**/TEST-*.xml'
    })
}

tasks.named('integrationTest') {
    // By default this is expected to run against the in-memory db, effectively
    // running an in-mem version of the message pattern tests
    dependsOn dbIntegrationTest

    enabled = false
}


artifacts {
    archives testingBundle
}
