/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.httpclient.apis

import net.corda.httpclient.models.BulkCreatePermissionsRequestType
import net.corda.httpclient.models.BulkCreatePermissionsResponseType
import net.corda.httpclient.models.CreatePermissionType
import net.corda.httpclient.models.PermissionResponseType

import net.corda.httpclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class RBACPermissionApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * This method returns permissions which satisfy supplied query criteria.
         * @param limit The maximum number of results to return. The value must be in the range [1..1000]. 
         * @param permissiontype The permission type to be returned. 
         * @param groupvisibility Optional group visibility for a permission. (optional)
         * @param virtualnode Optional virtual node the permissions apply to. (optional)
         * @param permissionstringprefix Optional permission string prefix for permissions to be located. (optional)
         * @return kotlin.collections.List<PermissionResponseType>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPermission(limit: kotlin.Int, permissiontype: kotlin.String, groupvisibility: kotlin.String?, virtualnode: kotlin.String?, permissionstringprefix: kotlin.String?): HttpResponse<kotlin.collections.List<PermissionResponseType>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            permissiontype?.apply { localVariableQuery["permissiontype"] = listOf("$permissiontype") }
            groupvisibility?.apply { localVariableQuery["groupvisibility"] = listOf("$groupvisibility") }
            virtualnode?.apply { localVariableQuery["virtualnode"] = listOf("$virtualnode") }
            permissionstringprefix?.apply { localVariableQuery["permissionstringprefix"] = listOf("$permissionstringprefix") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/permission",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPermissionGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/permission/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns the permission associated with the specified ID.
         * @param id ID of the permission to be returned. 
         * @return PermissionResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPermissionId(id: kotlin.String): HttpResponse<PermissionResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/permission/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method creates a new permission.
         * @param createPermissionType requestBody 
         * @return PermissionResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postPermission(createPermissionType: CreatePermissionType): HttpResponse<PermissionResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = createPermissionType

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/permission",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method creates a set of permissions and optionally assigns them to the existing roles.
         * @param bulkCreatePermissionsRequestType requestBody 
         * @return BulkCreatePermissionsResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postPermissionBulk(bulkCreatePermissionsRequestType: BulkCreatePermissionsRequestType): HttpResponse<BulkCreatePermissionsResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = bulkCreatePermissionsRequestType

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/permission/bulk",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
