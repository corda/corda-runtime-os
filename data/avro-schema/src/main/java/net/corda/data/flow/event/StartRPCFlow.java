/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.data.flow.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StartRPCFlow extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8904246809063514838L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StartRPCFlow\",\"namespace\":\"net.corda.data.flow.event\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"flowName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rpcUsername\",\"type\":{\"type\":\"record\",\"name\":\"HoldingIdentity\",\"namespace\":\"net.corda.data.identity\",\"fields\":[{\"name\":\"x500Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"args\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"bytes\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<StartRPCFlow> ENCODER =
      new BinaryMessageEncoder<StartRPCFlow>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StartRPCFlow> DECODER =
      new BinaryMessageDecoder<StartRPCFlow>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StartRPCFlow> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StartRPCFlow> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StartRPCFlow> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StartRPCFlow>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StartRPCFlow to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StartRPCFlow from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StartRPCFlow instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StartRPCFlow fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String clientId;
   private java.lang.String flowName;
   private net.corda.data.identity.HoldingIdentity rpcUsername;
   private java.time.Instant timestamp;
   private java.util.List<java.nio.ByteBuffer> args;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StartRPCFlow() {}

  /**
   * All-args constructor.
   * @param clientId The new value for clientId
   * @param flowName The new value for flowName
   * @param rpcUsername The new value for rpcUsername
   * @param timestamp The new value for timestamp
   * @param args The new value for args
   */
  public StartRPCFlow(java.lang.String clientId, java.lang.String flowName, net.corda.data.identity.HoldingIdentity rpcUsername, java.time.Instant timestamp, java.util.List<java.nio.ByteBuffer> args) {
    this.clientId = clientId;
    this.flowName = flowName;
    this.rpcUsername = rpcUsername;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.args = args;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientId;
    case 1: return flowName;
    case 2: return rpcUsername;
    case 3: return timestamp;
    case 4: return args;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientId = value$ != null ? value$.toString() : null; break;
    case 1: flowName = value$ != null ? value$.toString() : null; break;
    case 2: rpcUsername = (net.corda.data.identity.HoldingIdentity)value$; break;
    case 3: timestamp = (java.time.Instant)value$; break;
    case 4: args = (java.util.List<java.nio.ByteBuffer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return The value of the 'clientId' field.
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Sets the value of the 'clientId' field.
   * @param value the value to set.
   */
  public void setClientId(java.lang.String value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'flowName' field.
   * @return The value of the 'flowName' field.
   */
  public java.lang.String getFlowName() {
    return flowName;
  }


  /**
   * Sets the value of the 'flowName' field.
   * @param value the value to set.
   */
  public void setFlowName(java.lang.String value) {
    this.flowName = value;
  }

  /**
   * Gets the value of the 'rpcUsername' field.
   * @return The value of the 'rpcUsername' field.
   */
  public net.corda.data.identity.HoldingIdentity getRpcUsername() {
    return rpcUsername;
  }


  /**
   * Sets the value of the 'rpcUsername' field.
   * @param value the value to set.
   */
  public void setRpcUsername(net.corda.data.identity.HoldingIdentity value) {
    this.rpcUsername = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'args' field.
   * @return The value of the 'args' field.
   */
  public java.util.List<java.nio.ByteBuffer> getArgs() {
    return args;
  }


  /**
   * Sets the value of the 'args' field.
   * @param value the value to set.
   */
  public void setArgs(java.util.List<java.nio.ByteBuffer> value) {
    this.args = value;
  }

  /**
   * Creates a new StartRPCFlow RecordBuilder.
   * @return A new StartRPCFlow RecordBuilder
   */
  public static net.corda.data.flow.event.StartRPCFlow.Builder newBuilder() {
    return new net.corda.data.flow.event.StartRPCFlow.Builder();
  }

  /**
   * Creates a new StartRPCFlow RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StartRPCFlow RecordBuilder
   */
  public static net.corda.data.flow.event.StartRPCFlow.Builder newBuilder(net.corda.data.flow.event.StartRPCFlow.Builder other) {
    if (other == null) {
      return new net.corda.data.flow.event.StartRPCFlow.Builder();
    } else {
      return new net.corda.data.flow.event.StartRPCFlow.Builder(other);
    }
  }

  /**
   * Creates a new StartRPCFlow RecordBuilder by copying an existing StartRPCFlow instance.
   * @param other The existing instance to copy.
   * @return A new StartRPCFlow RecordBuilder
   */
  public static net.corda.data.flow.event.StartRPCFlow.Builder newBuilder(net.corda.data.flow.event.StartRPCFlow other) {
    if (other == null) {
      return new net.corda.data.flow.event.StartRPCFlow.Builder();
    } else {
      return new net.corda.data.flow.event.StartRPCFlow.Builder(other);
    }
  }

  /**
   * RecordBuilder for StartRPCFlow instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StartRPCFlow>
    implements org.apache.avro.data.RecordBuilder<StartRPCFlow> {

    private java.lang.String clientId;
    private java.lang.String flowName;
    private net.corda.data.identity.HoldingIdentity rpcUsername;
    private net.corda.data.identity.HoldingIdentity.Builder rpcUsernameBuilder;
    private java.time.Instant timestamp;
    private java.util.List<java.nio.ByteBuffer> args;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.data.flow.event.StartRPCFlow.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.flowName)) {
        this.flowName = data().deepCopy(fields()[1].schema(), other.flowName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.rpcUsername)) {
        this.rpcUsername = data().deepCopy(fields()[2].schema(), other.rpcUsername);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasRpcUsernameBuilder()) {
        this.rpcUsernameBuilder = net.corda.data.identity.HoldingIdentity.newBuilder(other.getRpcUsernameBuilder());
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.args)) {
        this.args = data().deepCopy(fields()[4].schema(), other.args);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing StartRPCFlow instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.data.flow.event.StartRPCFlow other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.flowName)) {
        this.flowName = data().deepCopy(fields()[1].schema(), other.flowName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rpcUsername)) {
        this.rpcUsername = data().deepCopy(fields()[2].schema(), other.rpcUsername);
        fieldSetFlags()[2] = true;
      }
      this.rpcUsernameBuilder = null;
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.args)) {
        this.args = data().deepCopy(fields()[4].schema(), other.args);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'clientId' field.
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder setClientId(java.lang.String value) {
      validate(fields()[0], value);
      this.clientId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'clientId' field.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'flowName' field.
      * @return The value.
      */
    public java.lang.String getFlowName() {
      return flowName;
    }


    /**
      * Sets the value of the 'flowName' field.
      * @param value The value of 'flowName'.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder setFlowName(java.lang.String value) {
      validate(fields()[1], value);
      this.flowName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'flowName' field has been set.
      * @return True if the 'flowName' field has been set, false otherwise.
      */
    public boolean hasFlowName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'flowName' field.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder clearFlowName() {
      flowName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rpcUsername' field.
      * @return The value.
      */
    public net.corda.data.identity.HoldingIdentity getRpcUsername() {
      return rpcUsername;
    }


    /**
      * Sets the value of the 'rpcUsername' field.
      * @param value The value of 'rpcUsername'.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder setRpcUsername(net.corda.data.identity.HoldingIdentity value) {
      validate(fields()[2], value);
      this.rpcUsernameBuilder = null;
      this.rpcUsername = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rpcUsername' field has been set.
      * @return True if the 'rpcUsername' field has been set, false otherwise.
      */
    public boolean hasRpcUsername() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'rpcUsername' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.data.identity.HoldingIdentity.Builder getRpcUsernameBuilder() {
      if (rpcUsernameBuilder == null) {
        if (hasRpcUsername()) {
          setRpcUsernameBuilder(net.corda.data.identity.HoldingIdentity.newBuilder(rpcUsername));
        } else {
          setRpcUsernameBuilder(net.corda.data.identity.HoldingIdentity.newBuilder());
        }
      }
      return rpcUsernameBuilder;
    }

    /**
     * Sets the Builder instance for the 'rpcUsername' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.data.flow.event.StartRPCFlow.Builder setRpcUsernameBuilder(net.corda.data.identity.HoldingIdentity.Builder value) {
      clearRpcUsername();
      rpcUsernameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'rpcUsername' field has an active Builder instance
     * @return True if the 'rpcUsername' field has an active Builder instance
     */
    public boolean hasRpcUsernameBuilder() {
      return rpcUsernameBuilder != null;
    }

    /**
      * Clears the value of the 'rpcUsername' field.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder clearRpcUsername() {
      rpcUsername = null;
      rpcUsernameBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[3], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'args' field.
      * @return The value.
      */
    public java.util.List<java.nio.ByteBuffer> getArgs() {
      return args;
    }


    /**
      * Sets the value of the 'args' field.
      * @param value The value of 'args'.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder setArgs(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[4], value);
      this.args = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'args' field has been set.
      * @return True if the 'args' field has been set, false otherwise.
      */
    public boolean hasArgs() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'args' field.
      * @return This builder.
      */
    public net.corda.data.flow.event.StartRPCFlow.Builder clearArgs() {
      args = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StartRPCFlow build() {
      try {
        StartRPCFlow record = new StartRPCFlow();
        record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.String) defaultValue(fields()[0]);
        record.flowName = fieldSetFlags()[1] ? this.flowName : (java.lang.String) defaultValue(fields()[1]);
        if (rpcUsernameBuilder != null) {
          try {
            record.rpcUsername = this.rpcUsernameBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("rpcUsername"));
            throw e;
          }
        } else {
          record.rpcUsername = fieldSetFlags()[2] ? this.rpcUsername : (net.corda.data.identity.HoldingIdentity) defaultValue(fields()[2]);
        }
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.time.Instant) defaultValue(fields()[3]);
        record.args = fieldSetFlags()[4] ? this.args : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StartRPCFlow>
    WRITER$ = (org.apache.avro.io.DatumWriter<StartRPCFlow>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StartRPCFlow>
    READER$ = (org.apache.avro.io.DatumReader<StartRPCFlow>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










