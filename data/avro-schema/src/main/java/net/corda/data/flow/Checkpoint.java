/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.data.flow;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Checkpoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5383797374001053008L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Checkpoint\",\"namespace\":\"net.corda.data.flow\",\"fields\":[{\"name\":\"flowKey\",\"type\":{\"type\":\"record\",\"name\":\"FlowKey\",\"fields\":[{\"name\":\"flowId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"identity\",\"type\":{\"type\":\"record\",\"name\":\"HoldingIdentity\",\"namespace\":\"net.corda.data.identity\",\"fields\":[{\"name\":\"x500Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}},{\"name\":\"fiber\",\"type\":\"bytes\"},{\"name\":\"flowState\",\"type\":{\"type\":\"record\",\"name\":\"StateMachineState\",\"fields\":[{\"name\":\"suspendCount\",\"type\":\"int\"},{\"name\":\"isKilled\",\"type\":\"boolean\"},{\"name\":\"initiatedBy\",\"type\":\"bytes\"},{\"name\":\"eventQueue\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FlowEvent\",\"namespace\":\"net.corda.data.flow.event\",\"fields\":[{\"name\":\"flowKey\",\"type\":\"net.corda.data.flow.FlowKey\"},{\"name\":\"payload\",\"type\":[{\"type\":\"record\",\"name\":\"FlowSessionMessage\",\"fields\":[{\"name\":\"flowName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"source\",\"type\":\"net.corda.data.identity.HoldingIdentity\"},{\"name\":\"destination\",\"type\":\"net.corda.data.identity.HoldingIdentity\"},{\"name\":\"sessionId\",\"type\":\"bytes\"},{\"name\":\"sequenceNo\",\"type\":\"int\"},{\"name\":\"message\",\"type\":\"bytes\"}]},{\"type\":\"record\",\"name\":\"RemoteFlowError\",\"fields\":[{\"name\":\"flowName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"source\",\"type\":\"net.corda.data.identity.HoldingIdentity\"},{\"name\":\"destination\",\"type\":\"net.corda.data.identity.HoldingIdentity\"},{\"name\":\"sessionId\",\"type\":\"bytes\"},{\"name\":\"errorMessage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"type\":\"record\",\"name\":\"StartRemotelyInitiatedFlow\",\"fields\":[{\"name\":\"message\",\"type\":\"FlowSessionMessage\"}]},{\"type\":\"record\",\"name\":\"StartRPCFlow\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"flowName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rpcUsername\",\"type\":\"net.corda.data.identity.HoldingIdentity\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"args\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"bytes\"]}}]},{\"type\":\"record\",\"name\":\"Wakeup\",\"fields\":[]}]}]}}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Checkpoint> ENCODER =
      new BinaryMessageEncoder<Checkpoint>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Checkpoint> DECODER =
      new BinaryMessageDecoder<Checkpoint>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Checkpoint> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Checkpoint> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Checkpoint> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Checkpoint>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Checkpoint to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Checkpoint from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Checkpoint instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Checkpoint fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private net.corda.data.flow.FlowKey flowKey;
   private java.nio.ByteBuffer fiber;
   private net.corda.data.flow.StateMachineState flowState;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Checkpoint() {}

  /**
   * All-args constructor.
   * @param flowKey The new value for flowKey
   * @param fiber The new value for fiber
   * @param flowState The new value for flowState
   */
  public Checkpoint(net.corda.data.flow.FlowKey flowKey, java.nio.ByteBuffer fiber, net.corda.data.flow.StateMachineState flowState) {
    this.flowKey = flowKey;
    this.fiber = fiber;
    this.flowState = flowState;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flowKey;
    case 1: return fiber;
    case 2: return flowState;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flowKey = (net.corda.data.flow.FlowKey)value$; break;
    case 1: fiber = (java.nio.ByteBuffer)value$; break;
    case 2: flowState = (net.corda.data.flow.StateMachineState)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'flowKey' field.
   * @return The value of the 'flowKey' field.
   */
  public net.corda.data.flow.FlowKey getFlowKey() {
    return flowKey;
  }


  /**
   * Sets the value of the 'flowKey' field.
   * @param value the value to set.
   */
  public void setFlowKey(net.corda.data.flow.FlowKey value) {
    this.flowKey = value;
  }

  /**
   * Gets the value of the 'fiber' field.
   * @return The value of the 'fiber' field.
   */
  public java.nio.ByteBuffer getFiber() {
    return fiber;
  }


  /**
   * Sets the value of the 'fiber' field.
   * @param value the value to set.
   */
  public void setFiber(java.nio.ByteBuffer value) {
    this.fiber = value;
  }

  /**
   * Gets the value of the 'flowState' field.
   * @return The value of the 'flowState' field.
   */
  public net.corda.data.flow.StateMachineState getFlowState() {
    return flowState;
  }


  /**
   * Sets the value of the 'flowState' field.
   * @param value the value to set.
   */
  public void setFlowState(net.corda.data.flow.StateMachineState value) {
    this.flowState = value;
  }

  /**
   * Creates a new Checkpoint RecordBuilder.
   * @return A new Checkpoint RecordBuilder
   */
  public static net.corda.data.flow.Checkpoint.Builder newBuilder() {
    return new net.corda.data.flow.Checkpoint.Builder();
  }

  /**
   * Creates a new Checkpoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Checkpoint RecordBuilder
   */
  public static net.corda.data.flow.Checkpoint.Builder newBuilder(net.corda.data.flow.Checkpoint.Builder other) {
    if (other == null) {
      return new net.corda.data.flow.Checkpoint.Builder();
    } else {
      return new net.corda.data.flow.Checkpoint.Builder(other);
    }
  }

  /**
   * Creates a new Checkpoint RecordBuilder by copying an existing Checkpoint instance.
   * @param other The existing instance to copy.
   * @return A new Checkpoint RecordBuilder
   */
  public static net.corda.data.flow.Checkpoint.Builder newBuilder(net.corda.data.flow.Checkpoint other) {
    if (other == null) {
      return new net.corda.data.flow.Checkpoint.Builder();
    } else {
      return new net.corda.data.flow.Checkpoint.Builder(other);
    }
  }

  /**
   * RecordBuilder for Checkpoint instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Checkpoint>
    implements org.apache.avro.data.RecordBuilder<Checkpoint> {

    private net.corda.data.flow.FlowKey flowKey;
    private net.corda.data.flow.FlowKey.Builder flowKeyBuilder;
    private java.nio.ByteBuffer fiber;
    private net.corda.data.flow.StateMachineState flowState;
    private net.corda.data.flow.StateMachineState.Builder flowStateBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.data.flow.Checkpoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flowKey)) {
        this.flowKey = data().deepCopy(fields()[0].schema(), other.flowKey);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasFlowKeyBuilder()) {
        this.flowKeyBuilder = net.corda.data.flow.FlowKey.newBuilder(other.getFlowKeyBuilder());
      }
      if (isValidValue(fields()[1], other.fiber)) {
        this.fiber = data().deepCopy(fields()[1].schema(), other.fiber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.flowState)) {
        this.flowState = data().deepCopy(fields()[2].schema(), other.flowState);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasFlowStateBuilder()) {
        this.flowStateBuilder = net.corda.data.flow.StateMachineState.newBuilder(other.getFlowStateBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Checkpoint instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.data.flow.Checkpoint other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.flowKey)) {
        this.flowKey = data().deepCopy(fields()[0].schema(), other.flowKey);
        fieldSetFlags()[0] = true;
      }
      this.flowKeyBuilder = null;
      if (isValidValue(fields()[1], other.fiber)) {
        this.fiber = data().deepCopy(fields()[1].schema(), other.fiber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.flowState)) {
        this.flowState = data().deepCopy(fields()[2].schema(), other.flowState);
        fieldSetFlags()[2] = true;
      }
      this.flowStateBuilder = null;
    }

    /**
      * Gets the value of the 'flowKey' field.
      * @return The value.
      */
    public net.corda.data.flow.FlowKey getFlowKey() {
      return flowKey;
    }


    /**
      * Sets the value of the 'flowKey' field.
      * @param value The value of 'flowKey'.
      * @return This builder.
      */
    public net.corda.data.flow.Checkpoint.Builder setFlowKey(net.corda.data.flow.FlowKey value) {
      validate(fields()[0], value);
      this.flowKeyBuilder = null;
      this.flowKey = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flowKey' field has been set.
      * @return True if the 'flowKey' field has been set, false otherwise.
      */
    public boolean hasFlowKey() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'flowKey' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.data.flow.FlowKey.Builder getFlowKeyBuilder() {
      if (flowKeyBuilder == null) {
        if (hasFlowKey()) {
          setFlowKeyBuilder(net.corda.data.flow.FlowKey.newBuilder(flowKey));
        } else {
          setFlowKeyBuilder(net.corda.data.flow.FlowKey.newBuilder());
        }
      }
      return flowKeyBuilder;
    }

    /**
     * Sets the Builder instance for the 'flowKey' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.data.flow.Checkpoint.Builder setFlowKeyBuilder(net.corda.data.flow.FlowKey.Builder value) {
      clearFlowKey();
      flowKeyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'flowKey' field has an active Builder instance
     * @return True if the 'flowKey' field has an active Builder instance
     */
    public boolean hasFlowKeyBuilder() {
      return flowKeyBuilder != null;
    }

    /**
      * Clears the value of the 'flowKey' field.
      * @return This builder.
      */
    public net.corda.data.flow.Checkpoint.Builder clearFlowKey() {
      flowKey = null;
      flowKeyBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fiber' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFiber() {
      return fiber;
    }


    /**
      * Sets the value of the 'fiber' field.
      * @param value The value of 'fiber'.
      * @return This builder.
      */
    public net.corda.data.flow.Checkpoint.Builder setFiber(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.fiber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fiber' field has been set.
      * @return True if the 'fiber' field has been set, false otherwise.
      */
    public boolean hasFiber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fiber' field.
      * @return This builder.
      */
    public net.corda.data.flow.Checkpoint.Builder clearFiber() {
      fiber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'flowState' field.
      * @return The value.
      */
    public net.corda.data.flow.StateMachineState getFlowState() {
      return flowState;
    }


    /**
      * Sets the value of the 'flowState' field.
      * @param value The value of 'flowState'.
      * @return This builder.
      */
    public net.corda.data.flow.Checkpoint.Builder setFlowState(net.corda.data.flow.StateMachineState value) {
      validate(fields()[2], value);
      this.flowStateBuilder = null;
      this.flowState = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'flowState' field has been set.
      * @return True if the 'flowState' field has been set, false otherwise.
      */
    public boolean hasFlowState() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'flowState' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.data.flow.StateMachineState.Builder getFlowStateBuilder() {
      if (flowStateBuilder == null) {
        if (hasFlowState()) {
          setFlowStateBuilder(net.corda.data.flow.StateMachineState.newBuilder(flowState));
        } else {
          setFlowStateBuilder(net.corda.data.flow.StateMachineState.newBuilder());
        }
      }
      return flowStateBuilder;
    }

    /**
     * Sets the Builder instance for the 'flowState' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.data.flow.Checkpoint.Builder setFlowStateBuilder(net.corda.data.flow.StateMachineState.Builder value) {
      clearFlowState();
      flowStateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'flowState' field has an active Builder instance
     * @return True if the 'flowState' field has an active Builder instance
     */
    public boolean hasFlowStateBuilder() {
      return flowStateBuilder != null;
    }

    /**
      * Clears the value of the 'flowState' field.
      * @return This builder.
      */
    public net.corda.data.flow.Checkpoint.Builder clearFlowState() {
      flowState = null;
      flowStateBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Checkpoint build() {
      try {
        Checkpoint record = new Checkpoint();
        if (flowKeyBuilder != null) {
          try {
            record.flowKey = this.flowKeyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("flowKey"));
            throw e;
          }
        } else {
          record.flowKey = fieldSetFlags()[0] ? this.flowKey : (net.corda.data.flow.FlowKey) defaultValue(fields()[0]);
        }
        record.fiber = fieldSetFlags()[1] ? this.fiber : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        if (flowStateBuilder != null) {
          try {
            record.flowState = this.flowStateBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("flowState"));
            throw e;
          }
        } else {
          record.flowState = fieldSetFlags()[2] ? this.flowState : (net.corda.data.flow.StateMachineState) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Checkpoint>
    WRITER$ = (org.apache.avro.io.DatumWriter<Checkpoint>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Checkpoint>
    READER$ = (org.apache.avro.io.DatumReader<Checkpoint>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










