---
# Source: corda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: corda-rest-tls
  annotations:
    certificate/altNames: "corda-rest-worker.default,corda-rest-worker.default.svc"
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURoekNDQW0rZ0F3SUJBZ0lRVE5lWXI2R2g4cUNZbVU3OEVDa3dtREFOQmdrcWhraUc5dzBCQVFzRkFEQTYKTVRnd05nWURWUVFERXk5U1JWTlVJRmR2Y210bGNpQlRaV3htTFZOcFoyNWxaQ0JEWlhKMGFXWnBZMkYwYVc5dQpJRUYxZEdodmNtbDBlVEFlRncweU16QTNNVEF4TWpNMk1UQmFGdzB5TkRBM01Ea3hNak0yTVRCYU1Cd3hHakFZCkJnTlZCQU1URVdOdmNtUmhMWEpsYzNRdGQyOXlhMlZ5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBdUcrOXJBN2xwSXF0WnZGSFVrQzhJMGpFd3NhQUprckJtLytqRWRNcldyb3dLVkZwbHJNRApzajFaSEk4L2RPRlVnYTFLNXlZVm5wVERyWDZaZnVSYndUUlY3ZUZjNUErVGZXQzh0QW02WDRTOVhYZ1hycFlvClRJWWZiaDVXK3d4aGtab3d4OXJGM3BLOVE4eS9oT0pKSU5SbkdCeG42VlZ3UnNHbUVvelMrRll0U2RRK0p3WUgKNFlRV0dkUkxsQ0wrS0VwY1NxUXNJbzhkYTNjclVEVVNJUVhiK1FMcXppclFKbDJ3amRHb21pYUpta2p5YlBEZwp1RFg3eVdRS2F3aks5SFViL1Zrd1JYTjRNSHF5NmZXQ1Q5NXFIbGRYVFlIdXl4NWNjdXRMMjFjQmYwc3RTUGhUCkV6MmZDekpUS3drVUtqVHgxUUttMktmZnRGL1dYY2w3UlFJREFRQUJvNEdtTUlHak1BNEdBMVVkRHdFQi93UUUKQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJdwpBREFmQmdOVkhTTUVHREFXZ0JTZVcxQlp3M1pyejEwejZJVlNoc25LRkJNWlJEQkRCZ05WSFJFRVBEQTZnaGxqCmIzSmtZUzF5WlhOMExYZHZjbXRsY2k1a1pXWmhkV3gwZ2gxamIzSmtZUzF5WlhOMExYZHZjbXRsY2k1a1pXWmgKZFd4MExuTjJZekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBcUpzbnFmVTd1SDNsRzBPbnBCR2NMWGxnY2hMegp1SG9jZktaOEhCb0xBamMxN2NOaFJ4WGhOald1UllUTUZrV1dOMUlhVjVDSitERi9VZFgyZmhQQk5oanRhSmJvClNFcjlQelJjMkE5UFhJWHNQOXZVME4xbzAxVDR6T1I3dTc0YlNjRXRkcVBqL1JkLzRsbDFJd01NTGtFcTdRMVYKQVRoWTh0SlpZNGdSdzVlcFZqRllVMHZMVi9LSVVuKy9ZMXVORXpnYVRBRzk0cGx1ZEo1eko5NzR1ejl6NGpNMwo4RkpVWjFvVUpkL3BoOCtCa05qWEliM2NoRHRaRE1VNkRLNU9PM0liNVJlUlFvbUhROHcrZXQxSHpTeGhsQkZ0CnZCSlh6ay9oaEQ0VzJhcko3cUdiL3JTMGt6RXdhN1JERkxNNktsdU5qQ1NiMU9oT0NQdUM4Ym1pNmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdUcrOXJBN2xwSXF0WnZGSFVrQzhJMGpFd3NhQUprckJtLytqRWRNcldyb3dLVkZwCmxyTURzajFaSEk4L2RPRlVnYTFLNXlZVm5wVERyWDZaZnVSYndUUlY3ZUZjNUErVGZXQzh0QW02WDRTOVhYZ1gKcnBZb1RJWWZiaDVXK3d4aGtab3d4OXJGM3BLOVE4eS9oT0pKSU5SbkdCeG42VlZ3UnNHbUVvelMrRll0U2RRKwpKd1lINFlRV0dkUkxsQ0wrS0VwY1NxUXNJbzhkYTNjclVEVVNJUVhiK1FMcXppclFKbDJ3amRHb21pYUpta2p5CmJQRGd1RFg3eVdRS2F3aks5SFViL1Zrd1JYTjRNSHF5NmZXQ1Q5NXFIbGRYVFlIdXl4NWNjdXRMMjFjQmYwc3QKU1BoVEV6MmZDekpUS3drVUtqVHgxUUttMktmZnRGL1dYY2w3UlFJREFRQUJBb0lCQUh4c1JaU3hhQktjeTJaTApGMFpTRFpud0dXMGM1STd3bDdSWnZQVGxkTFg4TFVseWRyMEhmMUxiT0NhZ0xMcjQyRDJ6WG5pWnBMUWF2L2RuCkZMNFo2QnhxNWgxWWo0WDdUQkNsRmlpTzk0QkEyRThhR1QvYVpNMWJIaEQzdnM0V0NDeGx6TXJHdC8zekdHT0kKMlJzWVhTVWNwWUFLaWI5THVEYkRwUG1Xcnl5QU1FZXZ0aGFoT0R2RVg2RzBMakkwL0FmZklSb1dJcGt2N281NwpxMHJ4b1dvOFh6cG9MdndXZzVYOEVoSEhxR1N4a1EzVUtLWE9BOVloZHF6WFpJSGQ5S3lkeERuSDFLc2szdkRoCmgxZHFqQldsRUVFY0hQaFQrSTdjbUphK3dwRHkzZVNuR0J3Y1FGSndDTEN1ZVdpQnJSMFlZZTFQU3dGRndESkMKRGFKZWkvRUNnWUVBN0pUR09DNVNtbmF5TE1ndG4ycXZNUW5CaUo0WXlndFV5UERKTEdTSWVHS2F6WmpDUzVGbQo3STFnTndnMnkxb09hcFMyUlZPS0tNakpqaVYyS2lrdC9JV3RGdmIrNlVGSTFsYVVEYkE5WWRzRDIwalRiY1g4ClNkZmJDbnZvQ3VBdytQWTBYRjQ1TnBXaktJMDJ6OTlIOVEyUHVRdEVBdy9PTVh4WW1iKzVocWNDZ1lFQXg1TkQKUXErNVl1dG9OUjBCeEF6bVFDZlpvV0pYTW5teHdCSmxOcFczeVFvbERnTXh4SVowaW5oL1B3ZUJkNUlxZWxPUwpsNlFCVlN6aXV3Myt4cHhPemtka3JUazh3WVY5U0VEM0hKZXNTMW1LUlQwUkMwdTI3UlN0aEdQM2FURENIM2ZDClJnWTJxcU5hbk5mQ2hqNUhwN2t1emZ0Mjdsd3ljdHRZK1Jtc0dETUNnWUFyS09rUWpzTGJFeFJtUHc2enFvN1QKYjJnek9FUmxkN084Qk5GdW05aVp2Y05vQnBwTGx2Y2o2SmJJODJLcnJuNDZ5MjZGTHp4aFBHQW80b1N3SkZzVApXbis5Vk1va1c1aWlJYUZZN2ZJRXpDUGorV0U1QVltSkh5d0N1YUFYZTlielZGY3hFcTkxV2M4dU1yVHhMMWE5ClNnQVNUZy9XVHlmYXQwaWlvK3VBdVFLQmdGZmJvWW1TK0didXdVSllrYlZ3QkZFTCtnZk0xaHczYktQa3RUL3gKYXlZSzNFTXQ3dFBZYVNlb1lrUXFGcm0vMUFsa0R5M0ltbm1YdC95bTdaa2JxS213emtaZjR6cENmT081RGRBOQppVERtcXpOTjdkbnVMQXAweHVwNFk2dWdObVZLQUhGNVBNbWovamo3MXZ2b0lQMWFUWnVLYjFJQnJvZlh2blJ5Cjg4cjNBb0dBVmYvTFlodVZ0djFpR2dmcGJzS1NKNjR4SVhFTk1aTnZNendCN24raWJaaGRuelVtbDdLR05SeGEKKzJSbENxckxiamJXMGt1ODBlNkJLeVBhQS9MemZUUDRMaCtmMFprbkRMMWdFT2hYK2tibkxqdTZJSEtBZGR1OQpvU1BWa1k2RkU4djRyaEx1QUFxUW9FTmdxQlNyd2orL3IxR1l3T1RmckxyeXR0bWo1VlU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURYekNDQWtlZ0F3SUJBZ0lRZTNGSkt3a1F2bjhDWnR2NWZvYWVNekFOQmdrcWhraUc5dzBCQVFzRkFEQTYKTVRnd05nWURWUVFERXk5U1JWTlVJRmR2Y210bGNpQlRaV3htTFZOcFoyNWxaQ0JEWlhKMGFXWnBZMkYwYVc5dQpJRUYxZEdodmNtbDBlVEFlRncweU16QTNNVEF4TWpNMk1UQmFGdzB5TmpBME1EVXhNak0yTVRCYU1Eb3hPREEyCkJnTlZCQU1UTDFKRlUxUWdWMjl5YTJWeUlGTmxiR1l0VTJsbmJtVmtJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjAKYUc5eWFYUjVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTVLcEkyUWEvbkJOMwpiN3RUcmFCZmVHRERDa2ZMeG9sd2xxR3BJRkd6QXpNNXE1STcvTnF6TTA0T3F0Zlo5UHgrUXN0VlhKZGlRVlFuCmhhVmlXMFp1MnRYQW1oQ21ROXAvdWJtVFNwQkV1RTh5aGxDenRKdHM0T0xwdkFnbGV5TERMTjltb2J4REFPaTcKUEYxV2laQWRIbWlGOEZCd1g3anpTUktUYVdpcGZyOWpXZWUwRTNvYVV4cVE0UGJUcHExQTFhWnFJejVOOCtkdQpHUEJKOU13NHN3MTYzMGh1NTFiUk1iaFRJcXJiKzBZcEhCdGhzTUpWSjBJa0hBTWs0U1kyZXpnUy92ZFFtS2ZvCmNtN01ibmhJMjhOSFRIekFLeE01MGFUV2FJcEUyNngvSTFhM0FxRVBSOEVFMFF3WkJDUXdObzd6UUcyYnA5eDIKd1ZISWkwYUJwd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQgpCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKNWJVRm5ECmRtdlBYVFBvaFZLR3ljb1VFeGxFTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDcmpURlAzaHloVXdiL1hvTGgKK1VXdDBCaWhiMC9uMmlSblAzU0MyMmpiaTkwT3U1dWhNOVZEbURxQ09OM1p0UWxQdGZ0em9QeFhPNzRFSTgyeQpxQ1l6QXNIY0Qwc2Y4Yld1Ni9WRjNtR2dCaG5ySkpQWU1mMjEwNy93by8rZnExNy9mSnBEYVB4WFhyU2k2NlAxCmZFNGg0c3d4RDA4TEQ2TjNpZE96YU1LckZjRThOM3I0dCtWZU9rS2hSMU9RN0JpNmttQnFBak15dE8ycUZ6YkcKeGxLbUd5R1pBcVA5SUNuR21FMDh4L2E4Q0lNMUtsektuVFNIaXhVY21vb0Y1V21MUzRtTmRjdjhNaklNRW5jeQo2c2h1dC9xbkE5OHFYOWlYbmtpOHNndEZnRkNHdURzZElhWkZHVTQ2VTUvMGVWZzEyWGY1SGtWYXZPSDZvOGpUCnZSRmEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: corda/templates/workers.yaml
apiVersion: v1
kind: Service
metadata:
  name: "corda-p2p-gateway-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: p2pGateway-worker
spec:
  type: 
  selector:
    
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/component: p2pGateway-worker
  ports:
  - name: http
    port: 8080
    targetPort: http
---
# Source: corda/templates/workers.yaml
apiVersion: v1
kind: Service
metadata:
  name: "corda-rest-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: rest-worker
spec:
  type: ClusterIP
  selector:
    
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/component: rest-worker
  ports:
  - name: http
    port: 443
    targetPort: http
---
# Source: corda/templates/workers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "corda-crypto-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: crypto-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: corda
      app.kubernetes.io/instance: corda
      app.kubernetes.io/component: crypto-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "7000"
      labels:
        
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
        app.kubernetes.io/component: crypto-worker
    spec:
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      
      
      affinity:
        nodeAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - jason
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - name: "corda-crypto-worker"
        image: "corda-os-docker-dev.software.r3.com/corda-os-crypto-worker:latest-local-5.1.0"
        imagePullPolicy:  IfNotPresent
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10002
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - "ALL"
        resources:
          requests:
          limits:
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_TOOL_OPTIONS
            value:
              -XX:MaxRAMPercentage=75
          - name: LOG4J_CONFIG_FILE
            value: "/etc/log4j/log4j2.xml"
          - name: CONSOLE_LOG_FORMAT
            value: "text"
          - name: CONSOLE_LOG_LEVEL
            value: "info"
          - name: SASL_USERNAME
            value: admin
          - name: SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-kafka"
                key: "admin-password"
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "salt"
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "passphrase"
          - name: DB_CLUSTER_USERNAME
            valueFrom:
              secretKeyRef:
                name: "corda-cluster-db"
                key: "username"
          - name: DB_CLUSTER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-postgres"
                key: "corda-password"
        args:
          - "--workspace-dir=/work"
          - "--temp-dir=/tmp"
          - "-mbootstrap.servers=prereqs-kafka:9092"
          - "-msasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(SASL_USERNAME)\" password=\"$(SASL_PASSWORD)\";"
          - "--topic-prefix="
          - "-msecurity.protocol=SASL_SSL"
          - "-msasl.mechanism=PLAIN"
          - "-mssl.truststore.location=/certs/ca.crt"
          - "-mssl.truststore.type=PEM"
          - "-spassphrase=$(PASSPHRASE)"
          - "-ssalt=$(SALT)"
          - "-ddatabase.user=$(DB_CLUSTER_USERNAME)"
          - "-ddatabase.pass=$(DB_CLUSTER_PASSWORD)"
          - "-ddatabase.jdbc.url=jdbc:postgresql://prereqs-postgres:5432/cordacluster?currentSchema=CONFIG"
          - "-ddatabase.jdbc.directory=/opt/jdbc-driver"
          - "-ddatabase.pool.max_size=5"
          - "-ddatabase.pool.idleTimeoutSeconds=120"
          - "-ddatabase.pool.maxLifetimeSeconds=1800"
          - "-ddatabase.pool.keepaliveTimeSeconds=0"
          - "-ddatabase.pool.validationTimeoutSeconds=5"
          - "--trace-samples-per-second=1"
          - "--hsm-id=SOFT"
        volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"
            readOnly: false
          - mountPath: "/work"
            name: "work"
            readOnly: false
          - mountPath: "/certs"
            name: "certs"
            readOnly: true
          - name: log4j
            mountPath: /etc/log4j
        ports:
          - name: monitor
            containerPort: 7000
        readinessProbe:
          httpGet:
            path: /status
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 5
          failureThreshold: 20
          timeoutSeconds: 5
      volumes:
        - name: tmp
          emptyDir: {}
        - name: work
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: "ca.crt"
        - name: log4j
          configMap:
            name: corda-log4j
---
# Source: corda/templates/workers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "corda-db-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: db-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: corda
      app.kubernetes.io/instance: corda
      app.kubernetes.io/component: db-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "7000"
      labels:
        
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
        app.kubernetes.io/component: db-worker
    spec:
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      
      
      affinity:
        nodeAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - jason
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: kubernetes.io/hostname
            weight: 1
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - db-worker
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - name: "corda-db-worker"
        image: "corda-os-docker-dev.software.r3.com/corda-os-db-worker:latest-local-5.1.0"
        imagePullPolicy:  IfNotPresent
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10002
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - "ALL"
        resources:
          requests:
          limits:
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_TOOL_OPTIONS
            value:
              -XX:MaxRAMPercentage=75
          - name: LOG4J_CONFIG_FILE
            value: "/etc/log4j/log4j2.xml"
          - name: CONSOLE_LOG_FORMAT
            value: "text"
          - name: CONSOLE_LOG_LEVEL
            value: "info"
          - name: SASL_USERNAME
            value: admin
          - name: SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-kafka"
                key: "admin-password"
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "salt"
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "passphrase"
          - name: DB_CLUSTER_USERNAME
            valueFrom:
              secretKeyRef:
                name: "corda-cluster-db"
                key: "username"
          - name: DB_CLUSTER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-postgres"
                key: "corda-password"
        args:
          - "--workspace-dir=/work"
          - "--temp-dir=/tmp"
          - "-mbootstrap.servers=prereqs-kafka:9092"
          - "-msasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(SASL_USERNAME)\" password=\"$(SASL_PASSWORD)\";"
          - "--topic-prefix="
          - "-msecurity.protocol=SASL_SSL"
          - "-msasl.mechanism=PLAIN"
          - "-mssl.truststore.location=/certs/ca.crt"
          - "-mssl.truststore.type=PEM"
          - "-spassphrase=$(PASSPHRASE)"
          - "-ssalt=$(SALT)"
          - "-ddatabase.user=$(DB_CLUSTER_USERNAME)"
          - "-ddatabase.pass=$(DB_CLUSTER_PASSWORD)"
          - "-ddatabase.jdbc.url=jdbc:postgresql://prereqs-postgres:5432/cordacluster?currentSchema=CONFIG"
          - "-ddatabase.jdbc.directory=/opt/jdbc-driver"
          - "-ddatabase.pool.max_size=5"
          - "-ddatabase.pool.idleTimeoutSeconds=120"
          - "-ddatabase.pool.maxLifetimeSeconds=1800"
          - "-ddatabase.pool.keepaliveTimeSeconds=0"
          - "-ddatabase.pool.validationTimeoutSeconds=5"
          - "--trace-samples-per-second=1"
        volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"
            readOnly: false
          - mountPath: "/work"
            name: "work"
            readOnly: false
          - mountPath: "/certs"
            name: "certs"
            readOnly: true
          - name: log4j
            mountPath: /etc/log4j
        ports:
          - name: monitor
            containerPort: 7000
        readinessProbe:
          httpGet:
            path: /status
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 5
          failureThreshold: 20
          timeoutSeconds: 5
      volumes:
        - name: tmp
          emptyDir: {}
        - name: work
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: "ca.crt"
        - name: log4j
          configMap:
            name: corda-log4j
---
# Source: corda/templates/workers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "corda-flow-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: flow-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: corda
      app.kubernetes.io/instance: corda
      app.kubernetes.io/component: flow-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "7000"
      labels:
        
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
        app.kubernetes.io/component: flow-worker
    spec:
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      
      
      affinity:
        nodeAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - jason
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: kubernetes.io/hostname
            weight: 1
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - db-worker
              topologyKey: kubernetes.io/hostname
            weight: 2
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - flow-worker
              topologyKey: kubernetes.io/hostname
            weight: 3
      containers:
      - name: "corda-flow-worker"
        image: "corda-os-docker-dev.software.r3.com/corda-os-flow-worker:latest-local-5.1.0"
        imagePullPolicy:  IfNotPresent
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10002
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - "ALL"
        resources:
          requests:
          limits:
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_TOOL_OPTIONS
            value:
              -XX:MaxRAMPercentage=75
          - name: LOG4J_CONFIG_FILE
            value: "/etc/log4j/log4j2.xml"
          - name: CONSOLE_LOG_FORMAT
            value: "text"
          - name: CONSOLE_LOG_LEVEL
            value: "info"
          - name: SASL_USERNAME
            value: admin
          - name: SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-kafka"
                key: "admin-password"
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "salt"
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "passphrase"
        args:
          - "--workspace-dir=/work"
          - "--temp-dir=/tmp"
          - "-mbootstrap.servers=prereqs-kafka:9092"
          - "-msasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(SASL_USERNAME)\" password=\"$(SASL_PASSWORD)\";"
          - "--topic-prefix="
          - "-msecurity.protocol=SASL_SSL"
          - "-msasl.mechanism=PLAIN"
          - "-mssl.truststore.location=/certs/ca.crt"
          - "-mssl.truststore.type=PEM"
          - "-spassphrase=$(PASSPHRASE)"
          - "-ssalt=$(SALT)"
          - "--trace-samples-per-second=1"
        volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"
            readOnly: false
          - mountPath: "/work"
            name: "work"
            readOnly: false
          - mountPath: "/certs"
            name: "certs"
            readOnly: true
          - name: log4j
            mountPath: /etc/log4j
        ports:
          - name: monitor
            containerPort: 7000
        readinessProbe:
          httpGet:
            path: /status
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 5
          failureThreshold: 20
          timeoutSeconds: 5
      volumes:
        - name: tmp
          emptyDir: {}
        - name: work
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: "ca.crt"
        - name: log4j
          configMap:
            name: corda-log4j
---
# Source: corda/templates/workers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "corda-membership-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: membership-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: corda
      app.kubernetes.io/instance: corda
      app.kubernetes.io/component: membership-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "7000"
      labels:
        
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
        app.kubernetes.io/component: membership-worker
    spec:
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      
      
      affinity:
        nodeAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - jason
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: kubernetes.io/hostname
            weight: 1
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - db-worker
              topologyKey: kubernetes.io/hostname
            weight: 2
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - flow-worker
              topologyKey: kubernetes.io/hostname
            weight: 3
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - membership-worker
              topologyKey: kubernetes.io/hostname
            weight: 4
      containers:
      - name: "corda-membership-worker"
        image: "corda-os-docker-dev.software.r3.com/corda-os-member-worker:latest-local-5.1.0"
        imagePullPolicy:  IfNotPresent
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10002
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - "ALL"
        resources:
          requests:
          limits:
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_TOOL_OPTIONS
            value:
              -XX:MaxRAMPercentage=75
          - name: LOG4J_CONFIG_FILE
            value: "/etc/log4j/log4j2.xml"
          - name: CONSOLE_LOG_FORMAT
            value: "text"
          - name: CONSOLE_LOG_LEVEL
            value: "info"
          - name: SASL_USERNAME
            value: admin
          - name: SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-kafka"
                key: "admin-password"
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "salt"
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "passphrase"
        args:
          - "--workspace-dir=/work"
          - "--temp-dir=/tmp"
          - "-mbootstrap.servers=prereqs-kafka:9092"
          - "-msasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(SASL_USERNAME)\" password=\"$(SASL_PASSWORD)\";"
          - "--topic-prefix="
          - "-msecurity.protocol=SASL_SSL"
          - "-msasl.mechanism=PLAIN"
          - "-mssl.truststore.location=/certs/ca.crt"
          - "-mssl.truststore.type=PEM"
          - "-spassphrase=$(PASSPHRASE)"
          - "-ssalt=$(SALT)"
          - "--trace-samples-per-second=1"
        volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"
            readOnly: false
          - mountPath: "/work"
            name: "work"
            readOnly: false
          - mountPath: "/certs"
            name: "certs"
            readOnly: true
          - name: log4j
            mountPath: /etc/log4j
        ports:
          - name: monitor
            containerPort: 7000
        readinessProbe:
          httpGet:
            path: /status
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 5
          failureThreshold: 20
          timeoutSeconds: 5
      volumes:
        - name: tmp
          emptyDir: {}
        - name: work
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: "ca.crt"
        - name: log4j
          configMap:
            name: corda-log4j
---
# Source: corda/templates/workers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "corda-p2p-gateway-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: p2pGateway-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: corda
      app.kubernetes.io/instance: corda
      app.kubernetes.io/component: p2pGateway-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "7000"
      labels:
        
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
        app.kubernetes.io/component: p2pGateway-worker
    spec:
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      
      
      affinity:
        nodeAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - jason
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: kubernetes.io/hostname
            weight: 1
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - db-worker
              topologyKey: kubernetes.io/hostname
            weight: 2
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - flow-worker
              topologyKey: kubernetes.io/hostname
            weight: 3
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - membership-worker
              topologyKey: kubernetes.io/hostname
            weight: 4
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - p2pGateway-worker
              topologyKey: kubernetes.io/hostname
            weight: 5
      containers:
      - name: "corda-p2p-gateway-worker"
        image: "corda-os-docker-dev.software.r3.com/corda-os-p2p-gateway-worker:latest-local-5.1.0"
        imagePullPolicy:  IfNotPresent
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10002
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - "ALL"
        resources:
          requests:
          limits:
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_TOOL_OPTIONS
            value:
              -XX:MaxRAMPercentage=75
          - name: LOG4J_CONFIG_FILE
            value: "/etc/log4j/log4j2.xml"
          - name: CONSOLE_LOG_FORMAT
            value: "text"
          - name: CONSOLE_LOG_LEVEL
            value: "info"
          - name: SASL_USERNAME
            value: admin
          - name: SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-kafka"
                key: "admin-password"
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "salt"
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "passphrase"
        args:
          - "--workspace-dir=/work"
          - "--temp-dir=/tmp"
          - "-mbootstrap.servers=prereqs-kafka:9092"
          - "-msasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(SASL_USERNAME)\" password=\"$(SASL_PASSWORD)\";"
          - "--topic-prefix="
          - "-msecurity.protocol=SASL_SSL"
          - "-msasl.mechanism=PLAIN"
          - "-mssl.truststore.location=/certs/ca.crt"
          - "-mssl.truststore.type=PEM"
          - "-spassphrase=$(PASSPHRASE)"
          - "-ssalt=$(SALT)"
          - "--trace-samples-per-second=1"
        volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"
            readOnly: false
          - mountPath: "/work"
            name: "work"
            readOnly: false
          - mountPath: "/certs"
            name: "certs"
            readOnly: true
          - name: log4j
            mountPath: /etc/log4j
        ports:
          - name: http
            containerPort: 8080
          - name: monitor
            containerPort: 7000
        readinessProbe:
          httpGet:
            path: /status
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 5
          failureThreshold: 20
          timeoutSeconds: 5
      volumes:
        - name: tmp
          emptyDir: {}
        - name: work
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: "ca.crt"
        - name: log4j
          configMap:
            name: corda-log4j
---
# Source: corda/templates/workers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "corda-p2p-link-manager-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: p2pLinkManager-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: corda
      app.kubernetes.io/instance: corda
      app.kubernetes.io/component: p2pLinkManager-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "7000"
      labels:
        
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
        app.kubernetes.io/component: p2pLinkManager-worker
    spec:
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      
      
      affinity:
        nodeAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - jason
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: kubernetes.io/hostname
            weight: 1
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - db-worker
              topologyKey: kubernetes.io/hostname
            weight: 2
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - flow-worker
              topologyKey: kubernetes.io/hostname
            weight: 3
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - membership-worker
              topologyKey: kubernetes.io/hostname
            weight: 4
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - p2pGateway-worker
              topologyKey: kubernetes.io/hostname
            weight: 5
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - p2pLinkManager-worker
              topologyKey: kubernetes.io/hostname
            weight: 6
      containers:
      - name: "corda-p2p-link-manager-worker"
        image: "corda-os-docker-dev.software.r3.com/corda-os-p2p-link-manager-worker:latest-local-5.1.0"
        imagePullPolicy:  IfNotPresent
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10002
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - "ALL"
        resources:
          requests:
          limits:
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_TOOL_OPTIONS
            value:
              -XX:MaxRAMPercentage=75
          - name: LOG4J_CONFIG_FILE
            value: "/etc/log4j/log4j2.xml"
          - name: CONSOLE_LOG_FORMAT
            value: "text"
          - name: CONSOLE_LOG_LEVEL
            value: "info"
          - name: SASL_USERNAME
            value: admin
          - name: SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-kafka"
                key: "admin-password"
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "salt"
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "passphrase"
        args:
          - "--workspace-dir=/work"
          - "--temp-dir=/tmp"
          - "-mbootstrap.servers=prereqs-kafka:9092"
          - "-msasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(SASL_USERNAME)\" password=\"$(SASL_PASSWORD)\";"
          - "--topic-prefix="
          - "-msecurity.protocol=SASL_SSL"
          - "-msasl.mechanism=PLAIN"
          - "-mssl.truststore.location=/certs/ca.crt"
          - "-mssl.truststore.type=PEM"
          - "-spassphrase=$(PASSPHRASE)"
          - "-ssalt=$(SALT)"
          - "--trace-samples-per-second=1"
        volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"
            readOnly: false
          - mountPath: "/work"
            name: "work"
            readOnly: false
          - mountPath: "/certs"
            name: "certs"
            readOnly: true
          - name: log4j
            mountPath: /etc/log4j
        ports:
          - name: monitor
            containerPort: 7000
        readinessProbe:
          httpGet:
            path: /status
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 5
          failureThreshold: 20
          timeoutSeconds: 5
      volumes:
        - name: tmp
          emptyDir: {}
        - name: work
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: "ca.crt"
        - name: log4j
          configMap:
            name: corda-log4j
---
# Source: corda/templates/workers.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "corda-rest-worker"
  labels:
    
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
    app.kubernetes.io/component: rest-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: corda
      app.kubernetes.io/instance: corda
      app.kubernetes.io/component: rest-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "7000"
      labels:
        
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
        app.kubernetes.io/component: rest-worker
    spec:
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      
      
      affinity:
        nodeAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - jason
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - crypto-worker
              topologyKey: kubernetes.io/hostname
            weight: 1
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - db-worker
              topologyKey: kubernetes.io/hostname
            weight: 2
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - flow-worker
              topologyKey: kubernetes.io/hostname
            weight: 3
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - membership-worker
              topologyKey: kubernetes.io/hostname
            weight: 4
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - p2pGateway-worker
              topologyKey: kubernetes.io/hostname
            weight: 5
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - p2pLinkManager-worker
              topologyKey: kubernetes.io/hostname
            weight: 6
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - rest-worker
              topologyKey: kubernetes.io/hostname
            weight: 7
      containers:
      - name: "corda-rest-worker"
        image: "corda-os-docker-dev.software.r3.com/corda-os-rest-worker:latest-local-5.1.0"
        imagePullPolicy:  IfNotPresent
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10002
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - "ALL"
        resources:
          requests:
          limits:
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_TOOL_OPTIONS
            value:
              -XX:MaxRAMPercentage=75
          - name: LOG4J_CONFIG_FILE
            value: "/etc/log4j/log4j2.xml"
          - name: CONSOLE_LOG_FORMAT
            value: "text"
          - name: CONSOLE_LOG_LEVEL
            value: "info"
          - name: SASL_USERNAME
            value: admin
          - name: SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "prereqs-kafka"
                key: "admin-password"
          - name: SALT
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "salt"
          - name: PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: "corda-config"
                key: "passphrase"
        args:
          - "--workspace-dir=/work"
          - "--temp-dir=/tmp"
          - "-mbootstrap.servers=prereqs-kafka:9092"
          - "-msasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(SASL_USERNAME)\" password=\"$(SASL_PASSWORD)\";"
          - "--topic-prefix="
          - "-msecurity.protocol=SASL_SSL"
          - "-msasl.mechanism=PLAIN"
          - "-mssl.truststore.location=/certs/ca.crt"
          - "-mssl.truststore.type=PEM"
          - "-spassphrase=$(PASSPHRASE)"
          - "-ssalt=$(SALT)"
          - "--trace-samples-per-second=1"
          - "-rtls.crt.path=/tls/tls.crt"
          - "-rtls.key.path=/tls/tls.key"
          - "-rtls.ca.crt.path=/tls/ca.crt"
        volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"
            readOnly: false
          - mountPath: "/work"
            name: "work"
            readOnly: false
          - mountPath: "/certs"
            name: "certs"
            readOnly: true
          - mountPath: "/tls"
            name: "tlsmount"
            readOnly: true
          - name: log4j
            mountPath: /etc/log4j
        ports:
          - name: http
            containerPort: 8888
          - name: monitor
            containerPort: 7000
        readinessProbe:
          httpGet:
            path: /status
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /isHealthy
            port: monitor
          periodSeconds: 5
          failureThreshold: 20
          timeoutSeconds: 5
      volumes:
        - name: tmp
          emptyDir: {}
        - name: work
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: "ca.crt"
        - name: tlsmount
          secret:
            secretName: "corda-rest-tls"
            items:
              - key: "tls.crt"
                path: "tls.crt"
              - key: "tls.key"
                path: "tls.key"
              - key: "ca.crt"
                path: "ca.crt"
        - name: log4j
          configMap:
            name: corda-log4j
---
# Source: corda/templates/bootstrap.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-4"
  name: corda-preinstall-service-account
---
# Source: corda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: corda-bootstrap-cluster-db
  annotations:
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": pre-install   
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
type: Opaque
data:
  username: "cG9zdGdyZXM="
---
# Source: corda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: corda-cluster-db
  annotations:
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": pre-install
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
type: Opaque
data:
  username: "Y29yZGE="
---
# Source: corda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: corda-config
  annotations:
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": pre-install
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
type: Opaque
data:
  passphrase: "eGxLc1o4eHZ2Q3ZYMVFnMllDOVhSNXp3b2phR2ZtYkU="
  salt: "OXVibXVLTnpqQ2hTa3pha29OMnl4dWlOVzB1cVhvekw="
---
# Source: corda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: corda-crypto-db
  annotations:
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": pre-install   
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
type: Opaque
data:
  password: "b3B4YzZwalVkUEdk"
  username: "Y3J5cHRvX3VzZXI="
---
# Source: corda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: corda-rbac-db
  annotations:
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": pre-install   
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
type: Opaque
data:
  password: "RnNlNUNwNmlWSWxq"
  username: "cmJhY191c2Vy"
---
# Source: corda/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: corda-rest-api-admin
  annotations:
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": pre-install
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
type: Opaque
data:
  password: "YWRtaW4="
  username: "YWRtaW4="
---
# Source: corda/templates/config-maps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: corda-log4j
  annotations:
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": pre-install
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
data:
  log4j2.xml: | 
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="INFO">
        <Appenders>
            <Console name="json" target="SYSTEM_OUT">
                <JsonTemplateLayout eventTemplateUri="classpath:JsonLayout.json"/>
            </Console>
            <Console name="text" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} %X - %msg%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <logger name="Console">
                <AppenderRef ref="${env:CONSOLE_LOG_FORMAT:-json}" level="info"/>
            </logger>
    
            <!-- log warn only for these 3rd party libs -->
            <Logger name="com.zaxxer.hikari" level="warn" />
            <Logger name="io.javalin.Javalin" level="warn" />
            <Logger name="org.apache.aries.spifly" level="warn" />
            <Logger name="org.apache.kafka" level="warn" />
            <Logger name="org.eclipse.jetty" level="warn" />
            <Logger name="org.hibernate" level="warn" />
            <Logger name="org.pf4j" level="warn" />
    
            <!-- default to warn only for OSGi logging -->
            <Logger name="net.corda.osgi.framework.OSGiFrameworkWrap" level="warn" />
    
            <root level="${env:CONSOLE_LOG_LEVEL:-info}">
                <AppenderRef ref="${env:CONSOLE_LOG_FORMAT:-json}" level="${env:CONSOLE_LOG_LEVEL:-info}"/>
            </root>
        </Loggers>
    </Configuration>
---
# Source: corda/templates/bootstrap.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-3"
  name: corda-preinstall-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
---
# Source: corda/templates/bootstrap.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-2"
  name: corda-preinstall-role-binding
subjects:
- kind: ServiceAccount
  name: corda-preinstall-service-account
roleRef:
  kind: Role
  name: corda-preinstall-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: corda/templates/bootstrap.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: corda-preinstall-checks
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
    spec:
      
      
      serviceAccountName: corda-preinstall-service-account
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      containers:
        - name: preinstall-checks
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          
          resources:
            requests:
            limits:
          args: ['preinstall', 'run-all', '/tmp/values.yaml']
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
      initContainers:
        - name: create-preinstall-values
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command:
            - /bin/bash
            - -c
          args:
            - |
                echo -e "affinity:\n  nodeAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - jason\n        topologyKey: kubernetes.io/hostname\n      weight: 1\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - crypto-worker\n        topologyKey: kubernetes.io/hostname\n      weight: 1\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - db-worker\n        topologyKey: kubernetes.io/hostname\n      weight: 2\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - flow-worker\n        topologyKey: kubernetes.io/hostname\n      weight: 3\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - membership-worker\n        topologyKey: kubernetes.io/hostname\n      weight: 4\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - p2pGateway-worker\n        topologyKey: kubernetes.io/hostname\n      weight: 5\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - p2pLinkManager-worker\n        topologyKey: kubernetes.io/hostname\n      weight: 6\n    - podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: In\n            values:\n            - rest-worker\n        topologyKey: kubernetes.io/hostname\n      weight: 7\nannotations: {}\nbootstrap:\n  db:\n    clientImage:\n      registry: \"\"\n      repository: postgres\n      tag: \"14.4\"\n    cluster:\n      password:\n        value: \"\"\n        valueFrom:\n          secretKeyRef:\n            key: postgres-password\n            name: prereqs-postgres\n      username:\n        value: postgres\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n    crypto:\n      dbConnectionPool:\n        idleTimeoutSeconds: 120\n        keepaliveTimeSeconds: 0\n        maxLifetimeSeconds: 1800\n        maxSize: 5\n        minSize: null\n        validationTimeoutSeconds: 5\n      password:\n        value: \"\"\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n      schema: CRYPTO\n      username:\n        value: crypto_user\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n    enabled: true\n    rbac:\n      dbConnectionPool:\n        idleTimeoutSeconds: 120\n        keepaliveTimeSeconds: 0\n        maxLifetimeSeconds: 1800\n        maxSize: 5\n        minSize: null\n        validationTimeoutSeconds: 5\n      password:\n        value: \"\"\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n      schema: RBAC\n      username:\n        value: rbac_user\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n  image:\n    registry: \"\"\n    repository: corda-os-plugins\n    tag: \"\"\n  kafka:\n    cleanup: false\n    enabled: true\n    partitions: 10\n    replicas: 1\n    sasl:\n      password:\n        value: \"\"\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n      username:\n        value: \"\"\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n  nodeSelector: {}\n  preinstallCheck:\n    enabled: true\n  rbac:\n    enabled: true\n  resources:\n    limits: {}\n    requests: {}\n  restApiAdmin:\n    password:\n      value: admin\n      valueFrom:\n        secretKeyRef:\n          key: \"\"\n          name: \"\"\n    username:\n      value: admin\n      valueFrom:\n        secretKeyRef:\n          key: \"\"\n          name: \"\"\n  serviceAccount:\n    name: \"\"\nconfig:\n  encryption:\n    passphrase:\n      value: \"\"\n      valueFrom:\n        secretKeyRef:\n          key: \"\"\n          name: \"\"\n    salt:\n      value: \"\"\n      valueFrom:\n        secretKeyRef:\n          key: \"\"\n          name: \"\"\ncorda-lib:\n  global: {}\ndb:\n  cluster:\n    database: cordacluster\n    host: prereqs-postgres\n    password:\n      value: \"\"\n      valueFrom:\n        secretKeyRef:\n          key: corda-password\n          name: prereqs-postgres\n    port: 5432\n    schema: CONFIG\n    type: postgresql\n    username:\n      value: corda\n      valueFrom:\n        secretKeyRef:\n          key: \"\"\n          name: \"\"\ndumpHostPath: \"\"\nfullnameOverride: \"\"\nheapDumpOnOutOfMemoryError: false\nimage:\n  registry: corda-os-docker-dev.software.r3.com\n  tag: latest-local-5.1.0\nimagePullPolicy: IfNotPresent\nimagePullSecrets: []\nkafka:\n  bootstrapServers: prereqs-kafka:9092\n  sasl:\n    enabled: true\n    mechanism: PLAIN\n    password:\n      value: \"\"\n      valueFrom:\n        secretKeyRef:\n          key: admin-password\n          name: prereqs-kafka\n    username:\n      value: admin\n      valueFrom:\n        secretKeyRef:\n          key: \"\"\n          name: \"\"\n  tls:\n    enabled: true\n    truststore:\n      password:\n        value: \"\"\n        valueFrom:\n          secretKeyRef:\n            key: \"\"\n            name: \"\"\n      type: PEM\n      valueFrom:\n        secretKeyRef:\n          key: ca.crt\n          name: prereqs-kafka\n  topicPrefix: \"\"\nlabels:\n  jason: test\nlogging:\n  format: text\n  level: info\nmetrics:\n  podMonitor:\n    enabled: false\n    labels: {}\n  scrape: true\nnameOverride: \"\"\nnodeSelector: {}\nresources:\n  limits: {}\n  requests: {}\nserviceAccount:\n  name: \"\"\ntolerations: []\ntracing:\n  endpoint: \"\"\n  samplesPerSecond: \"1\"\nworkers:\n  crypto:\n    annotations: {}\n    clusterDbConnectionPool:\n      idleTimeoutSeconds: 120\n      keepaliveTimeSeconds: 0\n      maxLifetimeSeconds: 1800\n      maxSize: 5\n      minSize: null\n      validationTimeoutSeconds: 5\n    debug:\n      enabled: false\n      suspend: false\n    image:\n      registry: \"\"\n      repository: corda-os-crypto-worker\n      tag: \"\"\n    javaOptions: -XX:MaxRAMPercentage=75\n    kafka:\n      sasl:\n        password:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n        username:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n    logging:\n      level: null\n      override: \"\"\n    profiling:\n      enabled: false\n    replicaCount: 1\n    resources:\n      limits: {}\n      requests: {}\n  db:\n    annotations: {}\n    clusterDbConnectionPool:\n      idleTimeoutSeconds: 120\n      keepaliveTimeSeconds: 0\n      maxLifetimeSeconds: 1800\n      maxSize: 5\n      minSize: null\n      validationTimeoutSeconds: 5\n    debug:\n      enabled: false\n      suspend: false\n    image:\n      registry: \"\"\n      repository: corda-os-db-worker\n      tag: \"\"\n    javaOptions: -XX:MaxRAMPercentage=75\n    kafka:\n      sasl:\n        password:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n        username:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n    logging:\n      level: null\n      override: \"\"\n    profiling:\n      enabled: false\n    replicaCount: 1\n    resources:\n      limits: {}\n      requests: {}\n  flow:\n    annotations: {}\n    debug:\n      enabled: false\n      suspend: false\n    image:\n      registry: \"\"\n      repository: corda-os-flow-worker\n      tag: \"\"\n    javaOptions: -XX:MaxRAMPercentage=75\n    kafka:\n      sasl:\n        password:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n        username:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n    logging:\n      level: null\n      override: \"\"\n    profiling:\n      enabled: false\n    replicaCount: 1\n    resources:\n      limits: {}\n      requests: {}\n    verifyInstrumentation: false\n  membership:\n    annotations: {}\n    debug:\n      enabled: false\n      suspend: false\n    image:\n      registry: \"\"\n      repository: corda-os-member-worker\n      tag: \"\"\n    javaOptions: -XX:MaxRAMPercentage=75\n    kafka:\n      sasl:\n        password:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n        username:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n    logging:\n      level: null\n      override: \"\"\n    profiling:\n      enabled: false\n    replicaCount: 1\n    resources:\n      limits: {}\n      requests: {}\n  p2pGateway:\n    annotations: {}\n    debug:\n      enabled: false\n      suspend: false\n    image:\n      registry: \"\"\n      repository: corda-os-p2p-gateway-worker\n      tag: \"\"\n    javaOptions: -XX:MaxRAMPercentage=75\n    kafka:\n      sasl:\n        password:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n        username:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n    logging:\n      level: null\n      override: \"\"\n    profiling:\n      enabled: false\n    replicaCount: 1\n    resources:\n      limits: {}\n      requests: {}\n    service:\n      port: 8080\n  p2pLinkManager:\n    annotations: {}\n    debug:\n      enabled: false\n      suspend: false\n    image:\n      registry: \"\"\n      repository: corda-os-p2p-link-manager-worker\n      tag: \"\"\n    javaOptions: -XX:MaxRAMPercentage=75\n    kafka:\n      sasl:\n        password:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n        username:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n    logging:\n      level: null\n      override: \"\"\n    profiling:\n      enabled: false\n    replicaCount: 1\n    resources:\n      limits: {}\n      requests: {}\n  rest:\n    annotations: {}\n    debug:\n      enabled: false\n      suspend: false\n    image:\n      registry: \"\"\n      repository: corda-os-rest-worker\n      tag: \"\"\n    ingress:\n      annotations: {}\n      className: \"\"\n      hosts: []\n    javaOptions: -XX:MaxRAMPercentage=75\n    kafka:\n      sasl:\n        password:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n        username:\n          value: \"\"\n          valueFrom:\n            secretKeyRef:\n              key: \"\"\n              name: \"\"\n    logging:\n      level: null\n      override: \"\"\n    profiling:\n      enabled: false\n    replicaCount: 1\n    resources:\n      limits: {}\n      requests: {}\n    service:\n      annotations: {}\n      externalTrafficPolicy: \"\"\n      loadBalancerSourceRanges: []\n      port: 443\n      type: ClusterIP\n    tls:\n      ca:\n        secretKey: ca.crt\n      crt:\n        secretKey: tls.crt\n      generation:\n        altNames: []\n      key:\n        secretKey: tls.key\n      secretName: \"\"" > /tmp/values.yaml
          volumeMounts:
            - mountPath: /tmp
              name: temp
      volumes:
        - name: temp
          emptyDir: {}
        
        - name: log4j
          configMap:
            name: corda-log4j
      restartPolicy: Never
      
  backoffLimit: 0
---
# Source: corda/templates/bootstrap.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: corda-setup-db
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
  annotations:
    "helm.sh/hook": pre-install
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
    spec:
      
      
      
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      containers:
        - name: fin
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command:
            - /bin/bash
            - -e
            - -c
          args: ["echo", "'DB Bootstrapped'"]
          workingDir: /tmp
          volumeMounts:
            - mountPath: /tmp
              name: temp
      initContainers:
        - name: 01-create-db
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: [ 'database', 'spec', '-g', 'config:CONFIG,rbac:RBAC,crypto:CRYPTO', '-c', '-l', '/tmp', '--jdbc-url', 'jdbc:postgresql://prereqs-postgres:5432/cordacluster', '-u', $(PGUSER), '-p', $(PGPASSWORD) ]
          workingDir: /tmp
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
        - name: 02-apply-db
          image: "postgres:14.4"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command: [ 'sh', '-c', '-e', 'for f in /tmp/*.sql; do psql -v ON_ERROR_STOP=1 -h prereqs-postgres -p 5432 -f "$f" --dbname cordacluster; done' ]
          volumeMounts:
            - mountPath: /tmp
              name: temp
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
        - name: 03-create-rbac
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: [ 'initial-config', 'create-db-config', '-u', '$(RBAC_DB_USER_USERNAME)', '-p', '$(RBAC_DB_USER_PASSWORD)', '--name', 'corda-rbac', '--jdbc-url', 'jdbc:postgresql://prereqs-postgres:5432/cordacluster?currentSchema=RBAC', '--jdbc-pool-max-size', "5", '--idle-timeout', "120", '--max-lifetime', "1800", '--keepalive-time', "0", '--validation-timeout', "5", '--salt', "$(SALT)", '--passphrase', "$(PASSPHRASE)", '-l', '/tmp']
          workingDir: /tmp
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "salt"
            - name: PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "passphrase"
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
            
            - name: RBAC_DB_USER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "corda-rbac-db"
                  key: "username"
            - name: RBAC_DB_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "corda-rbac-db"
                  key: "password"
        - name: 04-apply-rbac
          image: "postgres:14.4"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command: [ 'sh', '-c', '-e', 'psql -v ON_ERROR_STOP=1 -h prereqs-postgres -p 5432 -f /tmp/db-config.sql --dbname "dbname=cordacluster options=--search_path=CONFIG"' ]
          volumeMounts:
            - mountPath: /tmp
              name: temp
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
        - name: 05-create-vnodes
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: [ 'initial-config', 'create-db-config', '-a','-u', '$(DB_CLUSTER_USERNAME)', '-p', '$(DB_CLUSTER_PASSWORD)', '--name', 'corda-virtual-nodes', '--jdbc-url', 'jdbc:postgresql://prereqs-postgres:5432/cordacluster', '--jdbc-pool-max-size', "5", '--idle-timeout', "120", '--max-lifetime', "1800", '--keepalive-time', "0", '--validation-timeout', "5", '--salt', "$(SALT)", '--passphrase', "$(PASSPHRASE)", '-l', '/tmp']
          workingDir: /tmp
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "salt"
            - name: PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "passphrase"
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
            
            - name: RBAC_DB_USER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "corda-rbac-db"
                  key: "username"
            - name: RBAC_DB_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "corda-rbac-db"
                  key: "password"
            - name: DB_CLUSTER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "corda-cluster-db"
                  key: "username"
            - name: DB_CLUSTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "corda-password"
        - name: 06-apply-vnodes
          image: "postgres:14.4"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command: [ 'sh', '-c', '-e', 'psql -v ON_ERROR_STOP=1 -h prereqs-postgres -p 5432 -f /tmp/db-config.sql --dbname "dbname=cordacluster options=--search_path=CONFIG"' ]
          volumeMounts:
            - mountPath: /tmp
              name: temp
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
        - name: 07-create-crypto
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: [ 'initial-config', 'create-db-config', '-u', '$(CRYPTO_DB_USER_USERNAME)', '-p', '$(CRYPTO_DB_USER_PASSWORD)', '--name', 'corda-crypto', '--jdbc-url', 'jdbc:postgresql://prereqs-postgres:5432/cordacluster?currentSchema=CRYPTO', '--jdbc-pool-max-size', "5", '--idle-timeout', "120", '--max-lifetime', "1800", '--keepalive-time', "0", '--validation-timeout', "5", '--salt', "$(SALT)", '--passphrase', "$(PASSPHRASE)", '-l', '/tmp']
          workingDir: /tmp
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "salt"
            - name: PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "passphrase"
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
            - name: CRYPTO_DB_USER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "corda-crypto-db"
                  key: "username"
            - name: CRYPTO_DB_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "corda-crypto-db"
                  key: "password"
        - name: 08-apply-crypto
          image: "postgres:14.4"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command: [ 'sh', '-c', '-e', 'psql -v ON_ERROR_STOP=1 -h prereqs-postgres -p 5432 -f /tmp/db-config.sql --dbname "dbname=cordacluster options=--search_path=CONFIG"' ]
          volumeMounts:
            - mountPath: /tmp
              name: temp
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
        - name: 09-create-rest
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: [ 'initial-config', 'create-user-config', '-u', '$(REST_API_ADMIN_USERNAME)', '-p', '$(REST_API_ADMIN_PASSWORD)', '-l', '/tmp']
          workingDir: /tmp
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
            - name: REST_API_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: username
            - name: REST_API_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: password
        - name: 10-apply-rest
          image: "postgres:14.4"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command: [ 'sh', '-c', '-e', 'psql -v ON_ERROR_STOP=1 -h prereqs-postgres -p 5432 -f /tmp/rbac-config.sql --dbname "dbname=cordacluster options=--search_path=RBAC"' ]
          volumeMounts:
            - mountPath: /tmp
              name: temp
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
        - name: 11-create-db-users-and-grant
          image: "postgres:14.4"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command: [ '/bin/bash', '-e', '-c' ]
          args:
            - |
              psql -v ON_ERROR_STOP=1 -h prereqs-postgres -p 5432 cordacluster << SQL
                GRANT USAGE ON SCHEMA CONFIG TO "$DB_CLUSTER_USERNAME";
                GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA CONFIG TO "$DB_CLUSTER_USERNAME";
                GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA CONFIG TO "$DB_CLUSTER_USERNAME";
                DO \$\$ BEGIN IF EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$RBAC_DB_USER_USERNAME') THEN RAISE NOTICE 'Role "$RBAC_DB_USER_USERNAME" already exists'; ELSE CREATE USER "$RBAC_DB_USER_USERNAME" WITH ENCRYPTED PASSWORD '$RBAC_DB_USER_PASSWORD'; END IF; END \$\$;
                GRANT USAGE ON SCHEMA RBAC TO "$RBAC_DB_USER_USERNAME";
                GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA RBAC TO "$RBAC_DB_USER_USERNAME";
                DO \$\$ BEGIN IF EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$CRYPTO_DB_USER_USERNAME') THEN RAISE NOTICE 'Role "$CRYPTO_DB_USER_USERNAME" already exists'; ELSE CREATE USER "$CRYPTO_DB_USER_USERNAME" WITH ENCRYPTED PASSWORD '$CRYPTO_DB_USER_PASSWORD'; END IF; END \$\$;
                GRANT USAGE ON SCHEMA CRYPTO TO "$CRYPTO_DB_USER_USERNAME";
                GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA CRYPTO TO "$CRYPTO_DB_USER_USERNAME";
              SQL
          volumeMounts:
            - mountPath: /tmp
              name: temp
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
          
            - name: RBAC_DB_USER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "corda-rbac-db"
                  key: "username"
            - name: RBAC_DB_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "corda-rbac-db"
                  key: "password"
          
            - name: CRYPTO_DB_USER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "corda-crypto-db"
                  key: "username"
            - name: CRYPTO_DB_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "corda-crypto-db"
                  key: "password"
            - name: DB_CLUSTER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "corda-cluster-db"
                  key: "username"
            - name: DB_CLUSTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "corda-password"
        - name: 12-create-crypto-config
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: [ 'initial-config', 'create-crypto-config', '--salt', "$(SALT)", '--passphrase', "$(PASSPHRASE)", '-l', '/tmp']
          workingDir: /tmp
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "salt"
            - name: PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: "corda-config"
                  key: "passphrase"
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
        - name: 13-apply-crypto-config
          image: "postgres:14.4"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          command: [ 'sh', '-c', '-e', 'psql -v ON_ERROR_STOP=1 -h prereqs-postgres -p 5432 -f /tmp/crypto-config.sql --dbname "dbname=cordacluster options=--search_path=CONFIG"' ]
          volumeMounts:
            - mountPath: /tmp
              name: temp
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: "corda-bootstrap-cluster-db"
                  key: "username"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-postgres"
                  key: "postgres-password"
      volumes:
        - name: temp
          emptyDir: {}
        
        - name: log4j
          configMap:
            name: corda-log4j
      

      restartPolicy: Never
  backoffLimit: 0
---
# Source: corda/templates/bootstrap.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: corda-create-topics
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
  annotations:
    "helm.sh/hook": pre-install
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
    spec:
      
      
      
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      containers:
        - name: create-topics
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          
          resources:
            requests:
            limits:
          args: [
            'topic',
            '-b', 'prereqs-kafka:9092',
            '-k', '/tmp/config.properties',
            'create',
            '-u', 'crypto=$(KAFKA_SASL_USERNAME_CRYPTO)',
            '-u', 'db=$(KAFKA_SASL_USERNAME_DB)',
            '-u', 'flow=$(KAFKA_SASL_USERNAME_FLOW)',
            '-u', 'membership=$(KAFKA_SASL_USERNAME_MEMBERSHIP)',
            '-u', 'p2pGateway=$(KAFKA_SASL_USERNAME_P2P_GATEWAY)',
            '-u', 'p2pLinkManager=$(KAFKA_SASL_USERNAME_P2P_LINK_MANAGER)',
            '-u', 'rest=$(KAFKA_SASL_USERNAME_REST)',
            '-r', '1',
            '-p', '10',
            'connect'
          ]
          volumeMounts:
            - mountPath: /tmp
              name: temp
            - mountPath: "/certs"
              name: certs
              readOnly: true
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
            - name: "KAFKA_SASL_USERNAME_CRYPTO"
              value: "admin"
            - name: "KAFKA_SASL_USERNAME_DB"
              value: "admin"
            - name: "KAFKA_SASL_USERNAME_FLOW"
              value: "admin"
            - name: "KAFKA_SASL_USERNAME_MEMBERSHIP"
              value: "admin"
            - name: "KAFKA_SASL_USERNAME_P2P_GATEWAY"
              value: "admin"
            - name: "KAFKA_SASL_USERNAME_P2P_LINK_MANAGER"
              value: "admin"
            - name: "KAFKA_SASL_USERNAME_REST"
              value: "admin"
      initContainers:
        - name: create-trust-store
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          env:
            
            - name: SASL_USERNAME
              value: admin
            - name: SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "prereqs-kafka"
                  key: "admin-password"
            
          command:
            - /bin/bash
            - -c
          args:
            - |
                touch /tmp/config.properties
                echo "security.protocol=SASL_SSL\n" >> /tmp/config.properties
                echo "sasl.mechanism=PLAIN\n" >> /tmp/config.properties
                echo "sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$SASL_USERNAME\" password=\"$SASL_PASSWORD\" ;\n">> /tmp/config.properties
                echo "ssl.truststore.location=/certs/ca.crt\n" >> /tmp/config.properties
                echo "ssl.truststore.type=PEM\n" >> /tmp/config.properties
          volumeMounts:
            - mountPath: /tmp
              name: temp
      volumes:
        - name: temp
          emptyDir: {}
        - name: certs
          secret:
            secretName: "prereqs-kafka"
            items:
              - key: "ca.crt"
                path: ca.crt
        
        - name: log4j
          configMap:
            name: corda-log4j
      restartPolicy: Never
      
  backoffLimit: 0
---
# Source: corda/templates/bootstrap.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: corda-setup-rbac
  labels:
    helm.sh/chart: corda-5.1.0
    app.kubernetes.io/name: corda
    app.kubernetes.io/instance: corda
    app.kubernetes.io/version: "unstable-5.1.0"
    app.kubernetes.io/managed-by: Helm
    jason: "test"
  annotations:
    "helm.sh/hook": post-install
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: corda
        app.kubernetes.io/instance: corda
    spec:
      
      
      
      securityContext:
        runAsUser: 10001
        runAsGroup: 10002
        fsGroup: 1000
      containers:
        - name: create-rbac-role-user-admin
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: ['initial-rbac', 'user-admin', '--yield', '300', '--user', "$(REST_API_ADMIN_USERNAME)",
            '--password', "$(REST_API_ADMIN_PASSWORD)",
            '--target', "https://corda-rest-worker:443", '--insecure']
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: REST_API_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: username
            - name: REST_API_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: password
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
        - name: create-rbac-role-vnode-creator
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: ['initial-rbac', 'vnode-creator', '--yield', '300', '--user', "$(REST_API_ADMIN_USERNAME)",
            '--password', "$(REST_API_ADMIN_PASSWORD)",
            '--target', "https://corda-rest-worker:443", '--insecure']
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: REST_API_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: username
            - name: REST_API_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: password
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
        - name: create-rbac-role-corda-dev
          image: "corda-os-docker-dev.software.r3.com/corda-os-plugins:latest-local-5.1.0"
          imagePullPolicy: IfNotPresent
          
          resources:
            requests:
            limits:
          
          securityContext:
            runAsUser: 10001
            runAsGroup: 10002
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - "ALL"
          args: ['initial-rbac', 'corda-developer', '--yield', '300', '--user', "$(REST_API_ADMIN_USERNAME)",
            '--password', "$(REST_API_ADMIN_PASSWORD)",
            '--target', "https://corda-rest-worker:443", '--insecure']
          volumeMounts:
            - mountPath: /tmp
              name: temp
            
            - name: log4j
              mountPath: /etc/log4j
          env:
            
            - name: REST_API_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: username
            - name: REST_API_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: corda-rest-api-admin
                  key: password
            
            - name: JAVA_TOOL_OPTIONS
              value: "-Dlog4j2.configurationFile=/etc/log4j/log4j2.xml"
            - name: CONSOLE_LOG_FORMAT
              value: text
            - name: CONSOLE_LOG_LEVEL
              value: info
            - name: CORDA_CLI_HOME_DIR
              value: "/tmp"
      
      volumes:
        - name: temp
          emptyDir: {}
        
        - name: log4j
          configMap:
            name: corda-log4j
      restartPolicy: Never
  backoffLimit: 0
