package com.r3.corda.notary.plugin.common

import net.corda.v5.base.annotations.CordaSerializable

/**
 * A generic notary request payload that acts as a "base" class for multiple notarisation payloads.
 * It runs validation that checks if the given [transaction]'s type is actually one of [validTypes].
 *
 * @property transaction The transaction object that needs notarising
 * @property requestSignature The signature generated by the client over the transaction object
 * @property validTypes The transaction types that are accepted
 * (e.g. [UtxoSignedTransaction][net.corda.v5.ledger.utxo.transaction.UtxoSignedTransaction])
 */
@CordaSerializable
abstract class BaseNotarisationPayload(
    val transaction: Any,
    val requestSignature: NotarisationRequestSignature,
    private val validTypes: List<Class<*>>
) {

    init {
        require(validTypes.any { it.isAssignableFrom(transaction::class.java) }) {
            "Unexpected transaction type ${transaction::class.java} in " +
                    "notarisation payload. There may be a mismatch " +
                    "between the configured notary type and the one " +
                    "advertised on the network parameters."
        }
    }
}