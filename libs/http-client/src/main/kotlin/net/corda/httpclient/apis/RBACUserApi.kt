/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.httpclient.apis

import net.corda.httpclient.models.ChangeOtherUserPasswordWrapperRequest
import net.corda.httpclient.models.CreateUserType
import net.corda.httpclient.models.PostUserSelfpasswordRequest
import net.corda.httpclient.models.UserPermissionSummaryResponseType
import net.corda.httpclient.models.UserResponseType

import net.corda.httpclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class RBACUserApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * This method removes the specified role from the specified user.
         * @param loginname The login name of the user 
         * @param roleid The ID of the role to remove from the user 
         * @return UserResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun deleteUserLoginnameRoleRoleid(loginname: kotlin.String, roleid: kotlin.String): HttpResponse<UserResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/{loginname}/role/{roleid}".replace("{" + "loginname" + "}", "$loginname").replace("{" + "roleid" + "}", "$roleid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns a user based on the specified login name.
         * @param loginname The login name of the user to be returned 
         * @return UserResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserLoginname(loginname: kotlin.String): HttpResponse<UserResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/{loginname}".replace("{" + "loginname" + "}", "$loginname"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method returns a summary of the user&#39;s permissions.
         * @param loginname The login name of the user 
         * @return UserPermissionSummaryResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserLoginnamePermissionsummary(loginname: kotlin.String): HttpResponse<UserPermissionSummaryResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/{loginname}/permissionsummary".replace("{" + "loginname" + "}", "$loginname"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method creates a new user.
         * @param createUserType requestBody 
         * @return UserResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postUser(createUserType: CreateUserType): HttpResponse<UserResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = createUserType

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method updates another user&#39;s password, only usable by admin.
         * @param changeOtherUserPasswordWrapperRequest requestBody 
         * @return UserResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postUserOtheruserpassword(changeOtherUserPasswordWrapperRequest: ChangeOtherUserPasswordWrapperRequest): HttpResponse<UserResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = changeOtherUserPasswordWrapperRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/otheruserpassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method updates a users own password.
         * @param postUserSelfpasswordRequest requestBody 
         * @return UserResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postUserSelfpassword(postUserSelfpasswordRequest: PostUserSelfpasswordRequest): HttpResponse<UserResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = postUserSelfpasswordRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/selfpassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This method assigns a specified role to a specified user.
         * @param loginname The login name of the user 
         * @param roleid The ID of the role to assign to the user 
         * @return UserResponseType
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun putUserLoginnameRoleRoleid(loginname: kotlin.String, roleid: kotlin.String): HttpResponse<UserResponseType> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/{loginname}/role/{roleid}".replace("{" + "loginname" + "}", "$loginname").replace("{" + "roleid" + "}", "$roleid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
