@Library('corda-shared-build-pipeline-steps@5.0') _

pipeline {
    agent {
        docker {
            image 'build-zulu-openjdk:11'
            label 'docker'
            registryUrl 'https://engineering-docker.software.r3.com/'
            registryCredentialsId 'artifactory-credentials'
            // Used to mount storage from the host as a volume to persist the cache between builds
            args '-v /tmp:/host_tmp'
            // make sure build image is always fresh
            alwaysPull true
        }
    }

    parameters {
        string(name: 'BUILD_REV', defaultValue: '', description: 'Short git hash of the build revision to test - leave blank to test unstable')
    }

    environment {
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        BUILD_CACHE_CREDENTIALS = credentials('gradle-ent-cache-credentials')
        BUILD_CACHE_USERNAME = "${env.BUILD_CACHE_CREDENTIALS_USR}"
        BUILD_CACHE_PASSWORD = "${env.BUILD_CACHE_CREDENTIALS_PSW}"    
        CORDA_ARTIFACTORY_USERNAME = "${env.ARTIFACTORY_CREDENTIALS_USR}"
        CORDA_ARTIFACTORY_PASSWORD = "${env.ARTIFACTORY_CREDENTIALS_PSW}"
        CORDA_USE_CACHE = "corda-remotes"
        KUBECONFIG = credentials("e2e-tests-credentials")
        CORDA_CLI_USER_HOME = "/tmp/corda-cli-home"
        CORDA_GRADLE_SCAN_KEY = credentials('gradle-build-scans-key')
        GRADLE_USER_HOME = "/host_tmp/gradle"
        CORDA_REVISION = "${env.GIT_COMMIT}"
        NAMESPACE = "run-${UUID.randomUUID().toString()}"
        CLUSTER_NAME = "eks-e2e.e2e.awsdev.r3.com"
        HELM_CONFIG_HOME = "/tmp/helm"
        HELM_REPOSITORY_CACHE = "/host_tmp/helm/repository"
        GRADLE_PERFORMANCE_TUNING = "--parallel -Dscan.tag.E2E -Dscan.tag.${env.NAMESPACE} --build-cache"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Install CLI') {
            steps {
                sh 'mkdir -p "${GRADLE_USER_HOME}"'
                //download and set up CLI
                sh "curl -u '${CORDA_ARTIFACTORY_USERNAME}:${CORDA_ARTIFACTORY_PASSWORD}' https://software.r3.com/artifactory/engineering-tools-maven-unstable/net/corda/cli/corda-cli-developer/[RELEASE]/corda-cli-developer-[RELEASE].tar\\;source.branch+=main --output ./corda-cli.tar"
                sh "rm -rf ./corda-cli && mkdir ./corda-cli"
                sh "tar -C ./corda-cli --strip 1 -xf ./corda-cli.tar"
                sh "./corda-cli/bin/corda-cli -v"
            }
        }
        stage ('Create namespace') {
            steps {
                sh """
                    kubectl create ns $NAMESPACE
                    kubectl label ns $NAMESPACE namespace-type=corda-e2e --overwrite=true
                    kubectl label ns $NAMESPACE branch=${env.BRANCH_NAME.replace('/','-')} --overwrite=true
                """
            }
        }
        stage('Install prereqs') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifactory-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                    sh '''
                        echo $PASSWORD | helm registry login corda-os-docker.software.r3.com -u $USER --password-stdin
                        helm install prereqs oci://corda-os-docker.software.r3.com/helm-charts/corda-dev \
                            -f .ci/e2eTests/prereqs.yaml -n $NAMESPACE --wait --timeout 600s
                    '''
                }
            }
            post {
                always {
                    sh '''
                        kubectl logs -lapp.kubernetes.io/instance=prereqs -n ${NAMESPACE} --all-containers=true --prefix=true --tail=-1 > prereqsLogs.txt
                        kubectl describe all -n ${NAMESPACE} > prereqsDescribe.txt
                    '''
                    archiveArtifacts artifacts: 'prereqsLogs.txt, prereqsDescribe.txt', allowEmptyArchive: true
                    sh 'rm -f prereqsLogs.txt prereqsDescribe.txt'
                }
            }
        }
        stage('Deploy cluster') {
            steps {
               script {
                  env.BASE_IMAGE = params.BUILD_REV ? "preTest-${params.BUILD_REV}" : "unstable"
               }
               sh 'helm install corda ./charts/corda -f .ci/e2eTests/corda.yaml --set image.tag=$BASE_IMAGE -n $NAMESPACE --wait --timeout 600s'
            }
            post {
                unsuccessful {
                    sh '''
                        kubectl logs -lapp.kubernetes.io/instance=corda -n ${NAMESPACE} --all-containers=true --prefix=true --tail=-1 > logs.txt
                        kubectl describe all -n ${NAMESPACE} > describe.txt
                    '''
                    archiveArtifacts artifacts: 'logs.txt, describe.txt', allowEmptyArchive: true
                    sh 'rm -f logs.txt describe.txt'
                }
            }
        }
        stage('Forward port and run tests') {
            steps {

                //for details see
                // https://github.com/corda/corda-runtime-os/blob/release/ent/5.0/applications/http-rpc-gateway/src/e2e-test/README.md


                sh '''
                    # Forward RPC worker port
                    nohup kubectl port-forward -n ${NAMESPACE} deploy/corda-rpc-worker 8888 > forward.txt 2>&1 &
                    nohup kubectl port-forward -n ${NAMESPACE} deploy/corda-crypto-worker 7001:7000 >> forward.txt 2>&1 &
                    nohup kubectl port-forward -n ${NAMESPACE} deploy/corda-db-worker 7002:7000 >> forward.txt 2>&1 &
                    nohup kubectl port-forward -n ${NAMESPACE} deploy/corda-flow-worker 7003:7000 >> forward.txt 2>&1 &
                    nohup kubectl port-forward -n ${NAMESPACE} deploy/corda-rpc-worker 7004:7000 >> forward.txt 2>&1 &
                    procno=$! #remember process number started in background
                    trap "kill -9 ${procno}" EXIT

                    ./gradlew cleanE2eTest smokeTest e2eTest ${GRADLE_PERFORMANCE_TUNING}
                '''
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/test-results/**/TEST-*.xml'
                    sh '''
                        kubectl logs -lapp.kubernetes.io/instance=corda -n ${NAMESPACE} --all-containers=true --prefix=true --tail=-1 > logs.txt
                        kubectl describe all -n ${NAMESPACE} > describe.txt
                    '''
                    archiveArtifacts artifacts: 'forward.txt, logs.txt, describe.txt', allowEmptyArchive: true
                    sh 'rm -f forward.txt logs.txt describe.txt'
                }
            }
        }
    }
    post {
        always {
            findBuildScans()
            splunkLogGenerator()
            rtp(parserName: 'HTML', stableText: "<a href='https://r3ll3.splunkcloud.com/en-US/app/r3_kubernetes_app/kubernetes_overview?form.period.earliest=0&form.period.latest=&form.span=5m&form.cluster=eks-e2e&form.namespace=${NAMESPACE}&form.pod=*'>Splunk K8s E2E Dashboard</a>")
            script{
                writeFile file: "e2eTestDataForSplunk.log", text: "${env.BUILD_URL}\n${NAMESPACE}"
                archiveArtifacts artifacts: "e2eTestDataForSplunk.log", fingerprint: true
            }
        }
        success {
            // Only delete namespace if we're successful (though it'll get pruned in 3 hours anyway)
            sh 'kubectl delete ns "${NAMESPACE}"'
        }
    }
}
