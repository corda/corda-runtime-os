/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.p2p.crypto.internal;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InitiatorHandshakePayload extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4454592914474970845L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InitiatorHandshakePayload\",\"namespace\":\"net.corda.p2p.crypto.internal\",\"fields\":[{\"name\":\"initiatorEncryptedExtensions\",\"type\":{\"type\":\"record\",\"name\":\"InitiatorEncryptedExtensions\",\"fields\":[{\"name\":\"responderPublicKeyHash\",\"type\":\"bytes\"},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"maxMessageSize\",\"type\":\"int\"}]}},{\"name\":\"initiatorPublicKeyHash\",\"type\":\"bytes\"},{\"name\":\"initiatorPartyVerify\",\"type\":\"bytes\"},{\"name\":\"initiatorFinished\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InitiatorHandshakePayload> ENCODER =
      new BinaryMessageEncoder<InitiatorHandshakePayload>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InitiatorHandshakePayload> DECODER =
      new BinaryMessageDecoder<InitiatorHandshakePayload>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InitiatorHandshakePayload> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InitiatorHandshakePayload> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InitiatorHandshakePayload> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InitiatorHandshakePayload>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InitiatorHandshakePayload to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InitiatorHandshakePayload from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InitiatorHandshakePayload instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InitiatorHandshakePayload fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions initiatorEncryptedExtensions;
   private java.nio.ByteBuffer initiatorPublicKeyHash;
   private java.nio.ByteBuffer initiatorPartyVerify;
   private java.nio.ByteBuffer initiatorFinished;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InitiatorHandshakePayload() {}

  /**
   * All-args constructor.
   * @param initiatorEncryptedExtensions The new value for initiatorEncryptedExtensions
   * @param initiatorPublicKeyHash The new value for initiatorPublicKeyHash
   * @param initiatorPartyVerify The new value for initiatorPartyVerify
   * @param initiatorFinished The new value for initiatorFinished
   */
  public InitiatorHandshakePayload(net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions initiatorEncryptedExtensions, java.nio.ByteBuffer initiatorPublicKeyHash, java.nio.ByteBuffer initiatorPartyVerify, java.nio.ByteBuffer initiatorFinished) {
    this.initiatorEncryptedExtensions = initiatorEncryptedExtensions;
    this.initiatorPublicKeyHash = initiatorPublicKeyHash;
    this.initiatorPartyVerify = initiatorPartyVerify;
    this.initiatorFinished = initiatorFinished;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return initiatorEncryptedExtensions;
    case 1: return initiatorPublicKeyHash;
    case 2: return initiatorPartyVerify;
    case 3: return initiatorFinished;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: initiatorEncryptedExtensions = (net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions)value$; break;
    case 1: initiatorPublicKeyHash = (java.nio.ByteBuffer)value$; break;
    case 2: initiatorPartyVerify = (java.nio.ByteBuffer)value$; break;
    case 3: initiatorFinished = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'initiatorEncryptedExtensions' field.
   * @return The value of the 'initiatorEncryptedExtensions' field.
   */
  public net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions getInitiatorEncryptedExtensions() {
    return initiatorEncryptedExtensions;
  }


  /**
   * Sets the value of the 'initiatorEncryptedExtensions' field.
   * @param value the value to set.
   */
  public void setInitiatorEncryptedExtensions(net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions value) {
    this.initiatorEncryptedExtensions = value;
  }

  /**
   * Gets the value of the 'initiatorPublicKeyHash' field.
   * @return The value of the 'initiatorPublicKeyHash' field.
   */
  public java.nio.ByteBuffer getInitiatorPublicKeyHash() {
    return initiatorPublicKeyHash;
  }


  /**
   * Sets the value of the 'initiatorPublicKeyHash' field.
   * @param value the value to set.
   */
  public void setInitiatorPublicKeyHash(java.nio.ByteBuffer value) {
    this.initiatorPublicKeyHash = value;
  }

  /**
   * Gets the value of the 'initiatorPartyVerify' field.
   * @return The value of the 'initiatorPartyVerify' field.
   */
  public java.nio.ByteBuffer getInitiatorPartyVerify() {
    return initiatorPartyVerify;
  }


  /**
   * Sets the value of the 'initiatorPartyVerify' field.
   * @param value the value to set.
   */
  public void setInitiatorPartyVerify(java.nio.ByteBuffer value) {
    this.initiatorPartyVerify = value;
  }

  /**
   * Gets the value of the 'initiatorFinished' field.
   * @return The value of the 'initiatorFinished' field.
   */
  public java.nio.ByteBuffer getInitiatorFinished() {
    return initiatorFinished;
  }


  /**
   * Sets the value of the 'initiatorFinished' field.
   * @param value the value to set.
   */
  public void setInitiatorFinished(java.nio.ByteBuffer value) {
    this.initiatorFinished = value;
  }

  /**
   * Creates a new InitiatorHandshakePayload RecordBuilder.
   * @return A new InitiatorHandshakePayload RecordBuilder
   */
  public static net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder newBuilder() {
    return new net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder();
  }

  /**
   * Creates a new InitiatorHandshakePayload RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InitiatorHandshakePayload RecordBuilder
   */
  public static net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder newBuilder(net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder other) {
    if (other == null) {
      return new net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder();
    } else {
      return new net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder(other);
    }
  }

  /**
   * Creates a new InitiatorHandshakePayload RecordBuilder by copying an existing InitiatorHandshakePayload instance.
   * @param other The existing instance to copy.
   * @return A new InitiatorHandshakePayload RecordBuilder
   */
  public static net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder newBuilder(net.corda.p2p.crypto.internal.InitiatorHandshakePayload other) {
    if (other == null) {
      return new net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder();
    } else {
      return new net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder(other);
    }
  }

  /**
   * RecordBuilder for InitiatorHandshakePayload instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InitiatorHandshakePayload>
    implements org.apache.avro.data.RecordBuilder<InitiatorHandshakePayload> {

    private net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions initiatorEncryptedExtensions;
    private net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions.Builder initiatorEncryptedExtensionsBuilder;
    private java.nio.ByteBuffer initiatorPublicKeyHash;
    private java.nio.ByteBuffer initiatorPartyVerify;
    private java.nio.ByteBuffer initiatorFinished;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.initiatorEncryptedExtensions)) {
        this.initiatorEncryptedExtensions = data().deepCopy(fields()[0].schema(), other.initiatorEncryptedExtensions);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasInitiatorEncryptedExtensionsBuilder()) {
        this.initiatorEncryptedExtensionsBuilder = net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions.newBuilder(other.getInitiatorEncryptedExtensionsBuilder());
      }
      if (isValidValue(fields()[1], other.initiatorPublicKeyHash)) {
        this.initiatorPublicKeyHash = data().deepCopy(fields()[1].schema(), other.initiatorPublicKeyHash);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.initiatorPartyVerify)) {
        this.initiatorPartyVerify = data().deepCopy(fields()[2].schema(), other.initiatorPartyVerify);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.initiatorFinished)) {
        this.initiatorFinished = data().deepCopy(fields()[3].schema(), other.initiatorFinished);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing InitiatorHandshakePayload instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.p2p.crypto.internal.InitiatorHandshakePayload other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.initiatorEncryptedExtensions)) {
        this.initiatorEncryptedExtensions = data().deepCopy(fields()[0].schema(), other.initiatorEncryptedExtensions);
        fieldSetFlags()[0] = true;
      }
      this.initiatorEncryptedExtensionsBuilder = null;
      if (isValidValue(fields()[1], other.initiatorPublicKeyHash)) {
        this.initiatorPublicKeyHash = data().deepCopy(fields()[1].schema(), other.initiatorPublicKeyHash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.initiatorPartyVerify)) {
        this.initiatorPartyVerify = data().deepCopy(fields()[2].schema(), other.initiatorPartyVerify);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.initiatorFinished)) {
        this.initiatorFinished = data().deepCopy(fields()[3].schema(), other.initiatorFinished);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'initiatorEncryptedExtensions' field.
      * @return The value.
      */
    public net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions getInitiatorEncryptedExtensions() {
      return initiatorEncryptedExtensions;
    }


    /**
      * Sets the value of the 'initiatorEncryptedExtensions' field.
      * @param value The value of 'initiatorEncryptedExtensions'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder setInitiatorEncryptedExtensions(net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions value) {
      validate(fields()[0], value);
      this.initiatorEncryptedExtensionsBuilder = null;
      this.initiatorEncryptedExtensions = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'initiatorEncryptedExtensions' field has been set.
      * @return True if the 'initiatorEncryptedExtensions' field has been set, false otherwise.
      */
    public boolean hasInitiatorEncryptedExtensions() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'initiatorEncryptedExtensions' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions.Builder getInitiatorEncryptedExtensionsBuilder() {
      if (initiatorEncryptedExtensionsBuilder == null) {
        if (hasInitiatorEncryptedExtensions()) {
          setInitiatorEncryptedExtensionsBuilder(net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions.newBuilder(initiatorEncryptedExtensions));
        } else {
          setInitiatorEncryptedExtensionsBuilder(net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions.newBuilder());
        }
      }
      return initiatorEncryptedExtensionsBuilder;
    }

    /**
     * Sets the Builder instance for the 'initiatorEncryptedExtensions' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder setInitiatorEncryptedExtensionsBuilder(net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions.Builder value) {
      clearInitiatorEncryptedExtensions();
      initiatorEncryptedExtensionsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'initiatorEncryptedExtensions' field has an active Builder instance
     * @return True if the 'initiatorEncryptedExtensions' field has an active Builder instance
     */
    public boolean hasInitiatorEncryptedExtensionsBuilder() {
      return initiatorEncryptedExtensionsBuilder != null;
    }

    /**
      * Clears the value of the 'initiatorEncryptedExtensions' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder clearInitiatorEncryptedExtensions() {
      initiatorEncryptedExtensions = null;
      initiatorEncryptedExtensionsBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiatorPublicKeyHash' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getInitiatorPublicKeyHash() {
      return initiatorPublicKeyHash;
    }


    /**
      * Sets the value of the 'initiatorPublicKeyHash' field.
      * @param value The value of 'initiatorPublicKeyHash'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder setInitiatorPublicKeyHash(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.initiatorPublicKeyHash = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'initiatorPublicKeyHash' field has been set.
      * @return True if the 'initiatorPublicKeyHash' field has been set, false otherwise.
      */
    public boolean hasInitiatorPublicKeyHash() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'initiatorPublicKeyHash' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder clearInitiatorPublicKeyHash() {
      initiatorPublicKeyHash = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiatorPartyVerify' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getInitiatorPartyVerify() {
      return initiatorPartyVerify;
    }


    /**
      * Sets the value of the 'initiatorPartyVerify' field.
      * @param value The value of 'initiatorPartyVerify'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder setInitiatorPartyVerify(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.initiatorPartyVerify = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'initiatorPartyVerify' field has been set.
      * @return True if the 'initiatorPartyVerify' field has been set, false otherwise.
      */
    public boolean hasInitiatorPartyVerify() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'initiatorPartyVerify' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder clearInitiatorPartyVerify() {
      initiatorPartyVerify = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiatorFinished' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getInitiatorFinished() {
      return initiatorFinished;
    }


    /**
      * Sets the value of the 'initiatorFinished' field.
      * @param value The value of 'initiatorFinished'.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder setInitiatorFinished(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.initiatorFinished = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'initiatorFinished' field has been set.
      * @return True if the 'initiatorFinished' field has been set, false otherwise.
      */
    public boolean hasInitiatorFinished() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'initiatorFinished' field.
      * @return This builder.
      */
    public net.corda.p2p.crypto.internal.InitiatorHandshakePayload.Builder clearInitiatorFinished() {
      initiatorFinished = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InitiatorHandshakePayload build() {
      try {
        InitiatorHandshakePayload record = new InitiatorHandshakePayload();
        if (initiatorEncryptedExtensionsBuilder != null) {
          try {
            record.initiatorEncryptedExtensions = this.initiatorEncryptedExtensionsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("initiatorEncryptedExtensions"));
            throw e;
          }
        } else {
          record.initiatorEncryptedExtensions = fieldSetFlags()[0] ? this.initiatorEncryptedExtensions : (net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions) defaultValue(fields()[0]);
        }
        record.initiatorPublicKeyHash = fieldSetFlags()[1] ? this.initiatorPublicKeyHash : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.initiatorPartyVerify = fieldSetFlags()[2] ? this.initiatorPartyVerify : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.initiatorFinished = fieldSetFlags()[3] ? this.initiatorFinished : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InitiatorHandshakePayload>
    WRITER$ = (org.apache.avro.io.DatumWriter<InitiatorHandshakePayload>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InitiatorHandshakePayload>
    READER$ = (org.apache.avro.io.DatumReader<InitiatorHandshakePayload>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.initiatorEncryptedExtensions.customEncode(out);

    out.writeBytes(this.initiatorPublicKeyHash);

    out.writeBytes(this.initiatorPartyVerify);

    out.writeBytes(this.initiatorFinished);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.initiatorEncryptedExtensions == null) {
        this.initiatorEncryptedExtensions = new net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions();
      }
      this.initiatorEncryptedExtensions.customDecode(in);

      this.initiatorPublicKeyHash = in.readBytes(this.initiatorPublicKeyHash);

      this.initiatorPartyVerify = in.readBytes(this.initiatorPartyVerify);

      this.initiatorFinished = in.readBytes(this.initiatorFinished);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.initiatorEncryptedExtensions == null) {
            this.initiatorEncryptedExtensions = new net.corda.p2p.crypto.internal.InitiatorEncryptedExtensions();
          }
          this.initiatorEncryptedExtensions.customDecode(in);
          break;

        case 1:
          this.initiatorPublicKeyHash = in.readBytes(this.initiatorPublicKeyHash);
          break;

        case 2:
          this.initiatorPartyVerify = in.readBytes(this.initiatorPartyVerify);
          break;

        case 3:
          this.initiatorFinished = in.readBytes(this.initiatorFinished);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










