# Enforced Kafka properties. Settings in this file are effectively hardcoded, and attempts by the user to change these
# properties will be ignored.

# Properties that should be enforced for all consumers and producers.
common {
}

# Properties that should be enforced for all consumers.
consumer = ${common} {
    # Consumer group ID. This requires the topic name and group name to be set at the top level before attempting to
    # resolve this file. The consumer group identifier for this consumer.
    group.id = ${group}
    # Consumer client ID. This requires the topic name, group name and client ID to be set at the top level
    # before attempting to resolve this file. Primarily used for logging.
    client.id = consumer--${clientId}
    # This ensures a default where connection with no offset for a consumer group does not result in an exception.
    auto.offset.reset = earliest
    # Ensures that messages from uncommitted transactions are not visible. This is required to meet transactionality
    # requirements on patterns that need it.
    isolation.level = read_committed
    # Force consumers to commit their offsets manually. Again required for transactionality.
    enable.auto.commit = false
    # Ensure that consumers cannot automatically create topics, even if the broker does allow it.
    allow.auto.create.topics = false
}

# Properties that should be enforced for all producers.
producer = ${common} {
    # Producer client ID. This requires the clientId to be set at the top level before attempting to resolve this file.
    # Primarily used for logging.
    client.id = producer--${clientId}
    # Ensures that messages are sent to the broker exactly once. Note that some configuration settings must be set to
    # compatible values as a result of this. A ConfigException will be raised if these are set to incompatible values.
    enable.idempotence = true
    # Ensures that messages are not lost due to broker failure at inopportune moments. This forces acknowledgements from
    # all in-sync replicas before continuing, which ensures the message has reached at least one broker.
    acks = all
    # Turns on producer transactionality. This is required for many patterns to ensure output messages are all published
    # to topics (or none in the case of failure).
    transactional.id = ${transactionalId}
}

# Roles that particular consumers or producers could be taking. By tying consumers and producers to the roles they are
# performing in the patterns, each can be configured properly to reflect the job they are supposed to do.
roles {
    admin {
        admin = ${common} {
          client.id = admin-${clientId}
        }
    }
    pubsub {
        consumer = ${consumer} {
            # Pubsub consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
        }
    }
    compacted {
        consumer = ${consumer}
    }
    durable {
        consumer = ${consumer}
        producer = ${producer}
    }
    stateAndEvent {
        stateConsumer = ${consumer} {
            # Need to be able to distinguish between the state and event consumers for this pattern.
            client.id = stateConsumer--${clientId}
        }
        eventConsumer = ${consumer} {
            # Need to be able to distinguish between the state and event consumers for this pattern.
            client.id = eventConsumer--${clientId}
            # Extra suffix to prevent clashes within consumer groups with more than one member.
            group.id = ${group}-cooperative
            # Identical to StickyAssignor but supports cooperative rebalances (consumers can continue consuming from
            # the partitions that are not reassigned).
            partition.assignment.strategy = org.apache.kafka.clients.consumer.CooperativeStickyAssignor
        }
        producer = ${producer}
    }
    eventLog {
        consumer = ${consumer}
        producer = ${producer}
    }
    rpcSender {
        consumer = ${consumer} {
            # Extra suffix to prevent clashes within consumer groups with more than one member.
            group.id = ${group}-sender
            # RPC pattern consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
            # Identical to StickyAssignor but supports cooperative rebalances (consumers can continue consuming from
            # the partitions that are not reassigned).
            partition.assignment.strategy = org.apache.kafka.clients.consumer.CooperativeStickyAssignor
        }
        producer = ${producer}
    }
    rpcResponder {
        consumer = ${consumer} {
            # Extra suffix to prevent clashes within consumer groups with more than one member.
            group.id = ${group}-responder
            # RPC pattern consumers can ignore old messages so choose to start at the end of the stream.
            auto.offset.reset = latest
            # More balanced than RoundRobinAssignor and leaves (during rebalances) as many assignments as possible in
            # place, minimizing the overhead associated with moving partition assignments from one consumer to another.
            partition.assignment.strategy = org.apache.kafka.clients.consumer.StickyAssignor
        }
        producer = ${producer}
    }
    publisher {
        producer = ${producer}
    }
}
