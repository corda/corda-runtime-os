plugins {
    id 'java-gradle-plugin'
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'corda.common-library'
}

ext {
    releasable = true
}

group 'net.corda.gradle.plugin'
description 'A Gradle plugin that wraps a subset of the SDK functions to facilitate their use in developer and CI scenarios.'

repositories {
    mavenLocal()
    mavenCentral()
}


sourceSets {
    endToEndTest {
        java {
            srcDirs += ['src/endToEndTest/java']
        }
        kotlin {
            srcDirs += ['src/endToEndTest/kotlin']
        }
        resources {
            srcDirs = ['src/endToEndTest/resources']
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

kotlin {
    target {
        java
        compilations.endToEndTest {
            associateWith compilations.main
            associateWith compilations.test

            configurations {
                endToEndTestApi.extendsFrom testApi
                endToEndTestImplementation.extendsFrom testImplementation
                endToEndTestRuntimeOnly.extendsFrom testRuntimeOnly
            }
        }
    }
}

tasks.register('endToEndTest', Test) {
    description = "Runs end-to-end tests for Corda Runtime Gradle Plugin."
    group = "verification"

    println("endToEndTest: $description")

    testClassesDirs = project.sourceSets["endToEndTest"].output.classesDirs
    classpath = project.sourceSets["endToEndTest"].runtimeClasspath

    def combinedWorker = project.getProperties().getOrDefault("isCombinedWorker", true).toBoolean()
    println "Running tests against ${combinedWorker ? "combined worker" : "Kubernetes cluster"}"

    // TODO: the below is not needed for end-to-end tests
    // Note these port values have to match what is setup as part of port forwarding at cluster bootstrap time.
    // E.g. during Jenkins pipeline setup.
//    def combinedWorkerUrl = "http://localhost:7004/"
//    def cryptoWorkerUrl = project.getProperties().getOrDefault("cryptoWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7001/")
//    systemProperty "cryptoWorkerUrl", cryptoWorkerUrl
//    println "Crypto worker url: $cryptoWorkerUrl"
//    def restWorkerUrl = project.getProperties().getOrDefault("restWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7002/")
//    systemProperty "restWorkerUrl", restWorkerUrl
//    println "REST worker url: $restWorkerUrl"
//    def flowWorkerUrl = project.getProperties().getOrDefault("flowWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7003/")
//    systemProperty "flowWorkerUrl", flowWorkerUrl
//    println "Flow worker url: $flowWorkerUrl"
//    def flowMapperWorkerUrl = project.getProperties().getOrDefault("flowMapperWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7004/")
//    systemProperty "flowMapperWorkerUrl", flowMapperWorkerUrl
//    println "Flow Mapper worker url: $flowMapperWorkerUrl"
//    def verificationWorkerUrl = project.getProperties().getOrDefault("verificationWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7005/")
//    systemProperty "verificationWorkerUrl", verificationWorkerUrl
//    println "Verification worker url: $verificationWorkerUrl"
//    def dbWorkerUrl = project.getProperties().getOrDefault("dbWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7006/")
//    systemProperty "dbWorkerUrl", dbWorkerUrl
//    println "DB worker url: $dbWorkerUrl"
//    def persistenceWorkerUrl = project.getProperties().getOrDefault("persistenceWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7007/")
//    systemProperty "persistenceWorkerUrl", persistenceWorkerUrl
//    println "Persistence worker url: $persistenceWorkerUrl"
//    def uniquenessWorkerUrl = project.getProperties().getOrDefault("uniquenessWorkerUrl", combinedWorker ? combinedWorkerUrl : "http://localhost:7008/")
//    systemProperty "uniquenessWorkerUrl", uniquenessWorkerUrl

    jvmArgs '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'
}

dependencies {
    implementation libs.jackson.module.kotlin
    implementation libs.jackson.datatype.jsr310
    implementation libs.unirest.java
    implementation libs.unirest.objectmapper.jackson
    implementation project(':components:membership:membership-rest')
    implementation project(':libs:crypto:certificate-generation')
    implementation project(':libs:configuration:configuration-endpoints')
    implementation project(':libs:corda-sdk')
    implementation project(':libs:external-messaging')
    implementation project(':libs:membership:certificates-common')
    implementation project(':libs:membership:membership-common')
    implementation project(':libs:rest:json-serialization')
    implementation project(':libs:rest:rest-client')
    implementation project(':libs:rest:generated-rest-client')
    implementation project(':libs:virtual-node:cpi-upload-endpoints')
    implementation project(':libs:virtual-node:virtual-node-endpoints')
    implementation project(':libs:virtual-node:virtual-node-endpoints-maintenance')
    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation 'net.corda:corda-base'
    implementation 'net.corda:corda-config-schema'

    testImplementation libs.bundles.test
    testImplementation libs.javalin
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:$kotlinCoroutinesVersion"

    pluginSmokeTestImplementation project(':testing:e2e-test-utilities')
    integrationTestImplementation project(':testing:e2e-test-utilities')
    endToEndTestImplementation project(':testing:e2e-test-utilities')
}

integrationTest {
    systemProperty 'cordaArtifactoryUsername', findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
    systemProperty 'cordaArtifactoryPassword', findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
}

gradlePlugin {
    plugins {
        cordaRuntimeGradlePlugin {
            id = 'net.corda.gradle.plugin'
            implementationClass = 'net.corda.gradle.plugin.CordaRuntimeGradlePlugin'
            displayName = 'corda-runtime-gradle-plugin'
        }
    }
    automatedPublishing = true
}

publishing {
    publications {
        configureEach {
            pom {
                name = 'corda-runtime-gradle-plugin'
                description = 'A Gradle plugin that wraps a subset of the SDK functions to facilitate their use in developer and CI scenarios.'
            }
        }
    }
    if (project.hasProperty('maven.repo.s3')) {
        repositories {
            maven {
                name = 'AWS'
                url = project.findProperty('maven.repo.s3')
                credentials(AwsCredentials) {
                    accessKey "${System.getenv('AWS_ACCESS_KEY_ID')}"
                    secretKey "${System.getenv('AWS_SECRET_ACCESS_KEY')}"
                    sessionToken "${System.getenv('AWS_SESSION_TOKEN')}"
                }
            }
        }
    }
}
