import aQute.bnd.gradle.Bundle

plugins {
    id 'corda.common-publishing'
    id 'corda.common-library'
    id 'corda.osgi-test-conventions'
}

description 'Corda UTXO ledger - flow implementation'

ext.cordaEnableFormatting = true

configurations {
    cpis {
        canBeConsumed = false
        transitive = false
    }
}

dependencies {
    compileOnly 'org.osgi:osgi.annotation'
    compileOnly 'org.osgi:org.osgi.service.component.annotations'

    api 'net.corda:corda-notary-plugin'
    api 'net.corda:corda-config-schema'
    implementation 'net.corda:corda-ledger-utxo'
    implementation 'net.corda:corda-topic-schema'
    implementation libs.jackson.module.kotlin
    implementation project(':components:flow:flow-service')
    implementation project(':libs:ledger:ledger-common-flow-api')
    implementation project(':libs:ledger:ledger-common-flow')
    implementation project(':components:ledger:notary-worker-selection')
    implementation project(':components:membership:group-policy')
    implementation project(':components:membership:membership-group-read')
    implementation project(':components:virtual-node:sandbox-group-context-service')
    implementation project(":libs:cache:cache-caffeine")
    implementation project(':libs:crypto:cipher-suite')
    implementation project(':libs:crypto:crypto-core')
    implementation project(':libs:flows:flow-api')
    implementation project(':libs:flows:flow-utils')
    implementation project(':libs:ledger:ledger-common-data')
    implementation project(':libs:ledger:ledger-utxo-data')
    implementation project(':libs:ledger:ledger-utxo-transaction-verifier')
    implementation project(':libs:ledger-lib-utxo-flow')
    implementation project(':libs:metrics')
    implementation project(':libs:platform-info')
    implementation project(':libs:sandbox')
    implementation project(':libs:serialization:json-validator')
    implementation project(':libs:serialization:json-validator-lib')
    implementation project(':libs:serialization:serialization-avro')
    implementation project(':libs:serialization:serialization-checkpoint-api')
    implementation project(':libs:serialization:serialization-internal')
    implementation project(':libs:utilities')
    implementation project(':libs:virtual-node:sandbox-group-context')
    implementation project(':libs:configuration:configuration-core')

    testImplementation project(':testing:test-serialization')
    testImplementation project(':testing:kryo-serialization-testkit')
    testImplementation project(':libs:serialization:serialization-internal')
    testImplementation project(':libs:serialization:serialization-amqp')
    testImplementation project(':libs:serialization:serialization-kryo')
    testImplementation project(':testing:ledger:ledger-utxo-base-test')

    // Dependencies for ProofOfActionSerializationTests:
    testImplementation libs.jackson.module.kotlin
    testImplementation libs.jackson.datatype.jsr310
    testImplementation project(':libs:crypto:merkle-impl')

    integrationTestImplementation project(':testing:sandboxes')
    integrationTestImplementation project(':testing:sandboxes-testkit')
    integrationTestImplementation project(':libs:messaging:messaging')
    integrationTestImplementation project(':components:membership:membership-persistence-client')
    integrationTestImplementation project(':testing:group-policy-test-common')
    integrationTestCompileOnly "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"

    testRuntimeOnly libs.slf4j.simple

    integrationTestRuntimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.framework.extension:$ariesDynamicFrameworkExtensionVersion"
    integrationTestRuntimeOnly project(':libs:messaging:db-message-bus-impl')
    integrationTestRuntimeOnly project(':libs:messaging:messaging-impl')
    integrationTestRuntimeOnly project(':libs:lifecycle:lifecycle-impl')
    integrationTestRuntimeOnly project(':libs:flows:session-manager-impl')
    integrationTestRuntimeOnly project(':libs:membership:membership-impl')
    integrationTestRuntimeOnly project(':libs:state-manager:state-manager-db-impl')
    integrationTestRuntimeOnly project(':components:ledger:notary-worker-selection-impl')
    integrationTestRuntimeOnly project(':testing:slf4jv1')

    cpis project(path: ':testing:ledger:ledger-utxo-state-app', configuration: 'cordaCPB')
}

tasks.withType(Test).configureEach {
    jvmArgs '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED'
}

//  Copy the cpi builds declared in the cpis configuration into our resources so we find and load them
def integrationTestResources = tasks.named('processIntegrationTestResources', ProcessResources) {
    from(configurations.cpis) {
        into 'META-INF'
        rename "(.*)-\\Q${version}\\E-package.cpb", "\$1.cpb"
    }
}

tasks.named('testingBundle', Bundle) {
    dependsOn integrationTestResources
}
