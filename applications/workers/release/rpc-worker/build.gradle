plugins {
    id 'corda.common-publishing'
    id 'corda.common-app'
    id 'corda.docker-app'
}

description 'RPC Worker'

sourceSets {
    e2eTest {
        kotlin {
            srcDirs = [ 'src/e2eTest/kotlin' ]
        }
        java {
            srcDirs = [ 'src/e2eTest/java' ]
        }
        resources {
            srcDirs = [ 'src/e2eTest/resources' ]
        }
    }
}

configurations {
    e2eTestApi.extendsFrom integrationTestApi
    e2eTestCompileOnly.extendsFrom integrationTestCompileOnly
    e2eTestImplementation.extendsFrom integrationTestImplementation
    e2eTestRuntimeOnly.extendsFrom integrationTestRuntimeOnly
}

dependencies {
    compileOnly 'org.osgi:org.osgi.service.component.annotations'

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation project(':applications:workers:worker-common')
    implementation project(':libs:configuration:configuration-core')
    implementation project(':libs:configuration:configuration-validation')
    implementation project(':processors:rpc-processor')
    implementation "info.picocli:picocli:$picocliVersion"
    implementation 'net.corda:corda-base'
    implementation 'net.corda:corda-config-schema'

    runtimeOnly "com.typesafe:config:$typeSafeConfigVersion"
    runtimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    runtimeOnly "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"
    runtimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    runtimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"

    runtimeOnly project(':libs:messaging:kafka-message-bus-impl')
    runtimeOnly project(":libs:messaging:messaging-impl")

    e2eTestImplementation project(":libs:configuration:configuration-endpoints")
    e2eTestImplementation project(":libs:crypto:certificate-generation")
    e2eTestImplementation project(":libs:http-rpc:http-rpc-client")
    e2eTestImplementation project(":libs:permissions:permission-endpoint")
    e2eTestImplementation project(":testing:test-utilities")
    e2eTestImplementation project(":libs:messaging:kafka-message-bus-impl")
    e2eTestImplementation project(":libs:messaging:messaging-impl")
    e2eTestImplementation project(":libs:schema-registry:schema-registry-impl")
    e2eTestImplementation project(":libs:lifecycle:lifecycle-impl")
    e2eTestImplementation project(':libs:schema-registry:schema-registry')
    e2eTestImplementation project(':libs:lifecycle:registry')
    e2eTestImplementation project(':libs:messaging:message-bus')
    e2eTestImplementation project(':libs:messaging:messaging')
    e2eTestImplementation project(':libs:virtual-node:cpi-upload-endpoints')
    e2eTestImplementation project(':libs:virtual-node:virtual-node-endpoints')
    e2eTestImplementation project(':libs:lifecycle:lifecycle')
    e2eTestImplementation project(':components:membership:membership-http-rpc')
    e2eTestImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    e2eTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    e2eTestImplementation "net.corda:corda-avro-schema"
    e2eTestImplementation "net.corda:corda-topic-schema"
    e2eTestImplementation 'net.corda:corda-cipher-suite'
    e2eTestRuntimeOnly 'org.osgi:osgi.core'

    dockerImage "io.opentelemetry.javaagent:opentelemetry-javaagent:$openTelemetryVersion"
}

tasks.register('e2eTest', Test) {
    description = "Runs E2E tests."
    group = "verification"

    testClassesDirs = project.sourceSets["e2eTest"].output.classesDirs
    classpath = project.sourceSets["e2eTest"].runtimeClasspath
    outputs.upToDateWhen { false }
}

def setE2eClusterConfig = { Task testTask, String envVarName, String propName ->
    def prop = System.getenv(envVarName) ?: project.getProperties().get(propName)
    if(prop != null) {
        testTask.jvmArgs "-D${envVarName}=${prop}"
    }
}

tasks.named('e2eTest') {
    if(System.getenv("JDK_HOSTS_FILE") != null) {
        jvmArgs "-Djdk.net.hosts.file=${System.getenv("JDK_HOSTS_FILE")}"
    }
    if(System.getenv("JAVA_SECURITY_AUTH_LOGIN_CONFIG") != null) {
        jvmArgs "-Djava.security.auth.login.config=${System.getenv("JAVA_SECURITY_AUTH_LOGIN_CONFIG")}"
    }

    setE2eClusterConfig(it, "E2E_CLUSTER_A_RPC_HOST", "e2eClusterARpcHost")
    setE2eClusterConfig(it, "E2E_CLUSTER_A_RPC_PORT", "e2eClusterARpcPort")
    setE2eClusterConfig(it, "E2E_CLUSTER_B_RPC_HOST", "e2eClusterBRpcHost")
    setE2eClusterConfig(it, "E2E_CLUSTER_B_RPC_PORT", "e2eClusterBRpcPort")
    setE2eClusterConfig(it, "E2E_CLUSTER_C_RPC_HOST", "e2eClusterCRpcHost")
    setE2eClusterConfig(it, "E2E_CLUSTER_C_RPC_PORT", "e2eClusterCRpcPort")

    setE2eClusterConfig(it, "E2E_CLUSTER_A_P2P_HOST", "e2eClusterAP2pHost")
    setE2eClusterConfig(it, "E2E_CLUSTER_A_P2P_PORT", "e2eClusterAP2pPort")
    setE2eClusterConfig(it, "E2E_CLUSTER_B_P2P_HOST", "e2eClusterBP2pHost")
    setE2eClusterConfig(it, "E2E_CLUSTER_B_P2P_PORT", "e2eClusterBP2pPort")
    setE2eClusterConfig(it, "E2E_CLUSTER_C_P2P_HOST", "e2eClusterCP2pHost")
    setE2eClusterConfig(it, "E2E_CLUSTER_C_P2P_PORT", "e2eClusterCP2pPort")
}