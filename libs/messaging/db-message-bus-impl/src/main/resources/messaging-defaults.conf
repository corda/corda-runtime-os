# This file defines the default values for the Messaging Patterns API
# The values which are provided here may be changed by user input, either via
# the configuration service or user input via SubscriptionConfig
# In addition some user-input is required in order for the configurations to
# resolve.
# Variables which are needed for resolution:
#   group
#   instanceId
#   clientIdCounter
#   topic

topic = "<default-topic>"
group = "<default-group>"
instanceId = "<default-instanceId>"
dbName = "test" # "<default-dbName>"

messaging {

    topic {
        prefix = ""
        name = ${topic}
        responseSuffix = ".resp"
    }

    # Database specific settings for producers and consumers
    db {
        common {
            jdbc.url="jdbc:hsqldb:mem:"$dbName,
            user="sa"
            pass=""
        }

        consumer = ${messaging.db.common} {
            group.id = ${messaging.topic.name}-${group}
            client.id = ${messaging.topic.name}-${group}-consumer-${clientIdCounter}
            max.poll.records = 100
            max.poll.interval.ms = 100000
        }

        producer = ${messaging.db.common} {
            client.id = ${group}-producer-${clientIdCounter}
            transactional.id = ${group}-${instanceId}
       }
    }

    # Subscription specific settings.  These settings are for our subscription implementations
    # which wrap the DB producers/consumers.
    subscription {
        consumer {
            topic = ${messaging.topic}
            close.timeout = 400
            poll.timeout = 500
            thread.stop.timeout = 10000
            processor.timeout = 15000
            processor.retries = 3
            subscribe.retries = 3
            commit.retries = 3
        }

        producer {
            topic = ${messaging.topic}
            close.timeout = 600
        }
    }

    # Settings specific to each message pattern.  It's the configurations in these blocks which
    # will actually be provided to a given pattern implementation.
    # Each pattern can derive settings for its producers or consumers from the other configurations
    # in {messaging.subscription} and {messaging.db}
    pattern {
        common {
            topic = ${messaging.topic}
            instanceId = ${instanceId}
            clientIdCounter = ${clientIdCounter}
        }
        publisher = ${messaging.pattern.common} {
            producer = ${messaging.db.producer} ${messaging.subscription.producer}
        }
        pubsub = ${messaging.pattern.common} {
            subscriptionType=pubSub
            consumer = ${messaging.db.consumer} ${messaging.subscription.consumer}
        }
        compacted = ${messaging.pattern.common} {
            subscriptionType = compacted
            consumer = ${messaging.db.consumer} ${messaging.subscription.consumer}
        }
        durable = ${messaging.pattern.common} {
            subscriptionType = durable
            consumer = ${messaging.db.consumer} ${messaging.subscription.consumer}
            producer = ${messaging.db.producer} ${messaging.subscription.producer}
        }
        stateAndEvent = ${messaging.pattern.common} {
            subscriptionType = stateAndEvent
            stateConsumer = ${messaging.db.consumer} ${messaging.subscription.consumer} {
                topic.name = ${messaging.topic.name}.state
                client.id = ${messaging.topic.name}.state-${group}-consumer-${clientIdCounter}
            }
            eventConsumer = ${messaging.db.consumer} ${messaging.subscription.consumer}
            producer = ${messaging.db.producer} ${messaging.subscription.producer}
        }
        eventLog = ${messaging.pattern.common} {
            subscriptionType = eventLog
            consumer = ${messaging.db.consumer} ${messaging.subscription.consumer}
            producer = ${messaging.db.producer} ${messaging.subscription.producer}
        }
        randomAccess = ${messaging.pattern.common} {
            subscriptionType = randomAccess
            consumer = ${messaging.db.consumer} ${messaging.subscription.consumer}
        }
        rpcSender = ${messaging.pattern.common} {
            subscriptionType = rpcSender
            responseTopic = ${messaging.topic.name}${messaging.topic.responseSuffix}
            consumer = ${messaging.db.consumer} ${messaging.subscription.consumer} {
                group.id = ${messaging.topic.name}-${group}
                client.id = ${messaging.topic.name}${messaging.topic.responseSuffix}-consumer-${clientIdCounter}
            }
            producer = ${messaging.db.producer} ${messaging.subscription.producer}
        }
        rpcResponder = ${messaging.pattern.common} {
            subscriptionType = rpcResponder
            consumer = ${messaging.db.consumer} ${messaging.subscription.consumer}
            producer = ${messaging.db.producer} ${messaging.subscription.producer}
        }
    }
}
