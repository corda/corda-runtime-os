/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.apis

import net.corda.restclient.models.ApprovalRuleInfo
import net.corda.restclient.models.ApprovalRuleRequestParams
import net.corda.restclient.models.PostMgmHoldingidentityshorthashDeclineRequestidRequest
import net.corda.restclient.models.PreAuthToken
import net.corda.restclient.models.PreAuthTokenRequest
import net.corda.restclient.models.PutMgmHoldingidentityshorthashPreauthtokenRevokePreauthtokenidRequest
import net.corda.restclient.models.RestGroupParameters
import net.corda.restclient.models.RestRegistrationRequestStatus
import net.corda.restclient.models.SuspensionActivationParameters

import net.corda.restclient.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class MGMApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 
        * This API deletes a group approval rule for registrations including a pre-auth token.
         * @param holdingidentityshorthash The holding identity ID of the MGM. 
         * @param ruleid The ID of the group approval rule to be deleted. 
         * @return void
        */
        open suspend fun deleteMgmHoldingidentityshorthashApprovalRulesPreauthRuleid(holdingidentityshorthash: kotlin.String, ruleid: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/mgm/{holdingidentityshorthash}/approval/rules/preauth/{ruleid}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "ruleid" + "}", "$ruleid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API deletes a previously added group approval rule.
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @param ruleid The ID of the group approval rule to be deleted 
         * @return void
        */
        open suspend fun deleteMgmHoldingidentityshorthashApprovalRulesRuleid(holdingidentityshorthash: kotlin.String, ruleid: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/mgm/{holdingidentityshorthash}/approval/rules/{ruleid}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "ruleid" + "}", "$ruleid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API disallows a client certificate with a given subject to be used in mutual TLS connections.
         * @param holdingidentityshorthash The holding identity ID of the MGM. 
         * @param subject The certificate subject. 
         * @return void
        */
        open suspend fun deleteMgmHoldingidentityshorthashMutualTlsAllowedClientCertificateSubjectsSubject(holdingidentityshorthash: kotlin.String, subject: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/mgm/{holdingidentityshorthash}/mutual-tls/allowed-client-certificate-subjects/{subject}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "subject" + "}", "$subject"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @return kotlin.Int
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMgmGetprotocolversion(): HttpResponse<kotlin.Int> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mgm/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API retrieves the set of rules the group is currently configured with
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @return kotlin.collections.List<ApprovalRuleInfo>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMgmHoldingidentityshorthashApprovalRules(holdingidentityshorthash: kotlin.String): HttpResponse<kotlin.collections.List<ApprovalRuleInfo>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mgm/{holdingidentityshorthash}/approval/rules".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API retrieves the set of rules the group is currently configured with for registration request with a pre-auth token.
         * @param holdingidentityshorthash The holding identity ID of the MGM. 
         * @return kotlin.collections.List<ApprovalRuleInfo>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMgmHoldingidentityshorthashApprovalRulesPreauth(holdingidentityshorthash: kotlin.String): HttpResponse<kotlin.collections.List<ApprovalRuleInfo>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mgm/{holdingidentityshorthash}/approval/rules/preauth".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API retrieves the group policy from the MGM required to join the membership group.
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group to be joined 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMgmHoldingidentityshorthashInfo(holdingidentityshorthash: kotlin.String): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mgm/{holdingidentityshorthash}/info".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API list the allowed  client certificates subjects to be used in mutual TLS connections.
         * @param holdingidentityshorthash The holding identity ID of the MGM. 
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMgmHoldingidentityshorthashMutualTlsAllowedClientCertificateSubjects(holdingidentityshorthash: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mgm/{holdingidentityshorthash}/mutual-tls/allowed-client-certificate-subjects".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @param holdingidentityshorthash  
         * @param ownerx500name  (optional)
         * @param preauthtokenid  (optional)
         * @param viewinactive  (optional)
         * @return kotlin.collections.List<PreAuthToken>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMgmHoldingidentityshorthashPreauthtoken(holdingidentityshorthash: kotlin.String, ownerx500name: kotlin.String?, preauthtokenid: kotlin.String?, viewinactive: kotlin.Boolean?): HttpResponse<kotlin.collections.List<PreAuthToken>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ownerx500name?.apply { localVariableQuery["ownerx500name"] = listOf("$ownerx500name") }
            preauthtokenid?.apply { localVariableQuery["preauthtokenid"] = listOf("$preauthtokenid") }
            viewinactive?.apply { localVariableQuery["viewinactive"] = listOf("$viewinactive") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mgm/{holdingidentityshorthash}/preauthtoken".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @param requestsubjectx500name X.500 name of the requesting member (optional)
         * @param viewhistoric Include completed (historic) requests if set to &#39;true&#39; (optional)
         * @return kotlin.collections.List<RestRegistrationRequestStatus>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMgmHoldingidentityshorthashRegistrations(holdingidentityshorthash: kotlin.String, requestsubjectx500name: kotlin.String?, viewhistoric: kotlin.Boolean?): HttpResponse<kotlin.collections.List<RestRegistrationRequestStatus>> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            requestsubjectx500name?.apply { localVariableQuery["requestsubjectx500name"] = listOf("$requestsubjectx500name") }
            viewhistoric?.apply { localVariableQuery["viewhistoric"] = listOf("$viewhistoric") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mgm/{holdingidentityshorthash}/registrations".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This endpoint enables you to activate a previously suspended member.
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @param suspensionActivationParameters requestBody 
         * @return void
        */
        open suspend fun postMgmHoldingidentityshorthashActivate(holdingidentityshorthash: kotlin.String, suspensionActivationParameters: SuspensionActivationParameters): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = suspensionActivationParameters

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/activate".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API adds a rule to the set of group approval rules.
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @param approvalRuleRequestParams requestBody 
         * @return ApprovalRuleInfo
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postMgmHoldingidentityshorthashApprovalRules(holdingidentityshorthash: kotlin.String, approvalRuleRequestParams: ApprovalRuleRequestParams): HttpResponse<ApprovalRuleInfo> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = approvalRuleRequestParams

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/approval/rules".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API adds a rule to the set of group approval rules for registrations including a pre-auth token.
         * @param holdingidentityshorthash The holding identity ID of the MGM. 
         * @param approvalRuleRequestParams requestBody 
         * @return ApprovalRuleInfo
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postMgmHoldingidentityshorthashApprovalRulesPreauth(holdingidentityshorthash: kotlin.String, approvalRuleRequestParams: ApprovalRuleRequestParams): HttpResponse<ApprovalRuleInfo> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = approvalRuleRequestParams

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/approval/rules/preauth".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @param requestid ID of the registration request 
         * @return void
        */
        open suspend fun postMgmHoldingidentityshorthashApproveRequestid(holdingidentityshorthash: kotlin.String, requestid: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/approve/{requestid}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "requestid" + "}", "$requestid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @param requestid ID of the registration request 
         * @param postMgmHoldingidentityshorthashDeclineRequestidRequest requestBody 
         * @return void
        */
        open suspend fun postMgmHoldingidentityshorthashDeclineRequestid(holdingidentityshorthash: kotlin.String, requestid: kotlin.String, postMgmHoldingidentityshorthashDeclineRequestidRequest: PostMgmHoldingidentityshorthashDeclineRequestidRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = postMgmHoldingidentityshorthashDeclineRequestidRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/decline/{requestid}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "requestid" + "}", "$requestid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API allows you to make changes to the group parameters by submitting an updated version of the group parameters.
         * @param holdingidentityshorthash The holding identity ID of the MGM 
         * @param restGroupParameters requestBody 
         * @return RestGroupParameters
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postMgmHoldingidentityshorthashGroupParameters(holdingidentityshorthash: kotlin.String, restGroupParameters: RestGroupParameters): HttpResponse<RestGroupParameters> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = restGroupParameters

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/group-parameters".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @param holdingidentityshorthash  
         * @param preAuthTokenRequest requestBody 
         * @return PreAuthToken
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun postMgmHoldingidentityshorthashPreauthtoken(holdingidentityshorthash: kotlin.String, preAuthTokenRequest: PreAuthTokenRequest): HttpResponse<PreAuthToken> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = preAuthTokenRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/preauthtoken".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * The suspend endpoint enables you to suspend a member.
         * @param holdingidentityshorthash The holding identity ID of the MGM of the membership group 
         * @param suspensionActivationParameters requestBody 
         * @return void
        */
        open suspend fun postMgmHoldingidentityshorthashSuspend(holdingidentityshorthash: kotlin.String, suspensionActivationParameters: SuspensionActivationParameters): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = suspensionActivationParameters

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mgm/{holdingidentityshorthash}/suspend".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * This API allows a client certificate with a given subject to be used in mutual TLS connections.
         * @param holdingidentityshorthash The holding identity ID of the MGM. 
         * @param subject The certificate subject. 
         * @return void
        */
        open suspend fun putMgmHoldingidentityshorthashMutualTlsAllowedClientCertificateSubjectsSubject(holdingidentityshorthash: kotlin.String, subject: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/mgm/{holdingidentityshorthash}/mutual-tls/allowed-client-certificate-subjects/{subject}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "subject" + "}", "$subject"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 
        * 
         * @param holdingidentityshorthash  
         * @param preauthtokenid  
         * @param putMgmHoldingidentityshorthashPreauthtokenRevokePreauthtokenidRequest requestBody (optional)
         * @return PreAuthToken
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun putMgmHoldingidentityshorthashPreauthtokenRevokePreauthtokenid(holdingidentityshorthash: kotlin.String, preauthtokenid: kotlin.String, putMgmHoldingidentityshorthashPreauthtokenRevokePreauthtokenidRequest: PutMgmHoldingidentityshorthashPreauthtokenRevokePreauthtokenidRequest?): HttpResponse<PreAuthToken> {

            val localVariableAuthNames = listOf<String>("basicAuth")

            val localVariableBody = putMgmHoldingidentityshorthashPreauthtokenRevokePreauthtokenidRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/mgm/{holdingidentityshorthash}/preauthtoken/revoke/{preauthtokenid}".replace("{" + "holdingidentityshorthash" + "}", "$holdingidentityshorthash").replace("{" + "preauthtokenid" + "}", "$preauthtokenid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
