/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.corda.restclient.generated.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl


import com.fasterxml.jackson.annotation.JsonProperty

import net.corda.restclient.generated.infrastructure.ApiClient
import net.corda.restclient.generated.infrastructure.ApiResponse
import net.corda.restclient.generated.infrastructure.ClientException
import net.corda.restclient.generated.infrastructure.ClientError
import net.corda.restclient.generated.infrastructure.ServerException
import net.corda.restclient.generated.infrastructure.ServerError
import net.corda.restclient.generated.infrastructure.MultiValueMap
import net.corda.restclient.generated.infrastructure.PartConfig
import net.corda.restclient.generated.infrastructure.RequestConfig
import net.corda.restclient.generated.infrastructure.RequestMethod
import net.corda.restclient.generated.infrastructure.ResponseType
import net.corda.restclient.generated.infrastructure.Success
import net.corda.restclient.generated.infrastructure.toMultiValue

class MemberRegistrationApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v5_3")
        }
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return kotlin.Int
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMembershipGetprotocolversion() : kotlin.Int {
        val localVarResponse = getMembershipGetprotocolversionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns the version of the endpoint
     * @return ApiResponse<kotlin.Int?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMembershipGetprotocolversionWithHttpInfo() : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getMembershipGetprotocolversionRequestConfig()

        return request<Unit, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMembershipGetprotocolversion
     *
     * @return RequestConfig
     */
    fun getMembershipGetprotocolversionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/membership/getprotocolversion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method checks the statuses of all registration requests for a specified holding identity.
     * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked.
     * @return kotlin.collections.List<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMembershipHoldingidentityshorthash(holdingidentityshorthash: kotlin.String) : kotlin.collections.List<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus> {
        val localVarResponse = getMembershipHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method checks the statuses of all registration requests for a specified holding identity.
     * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked.
     * @return ApiResponse<kotlin.collections.List<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMembershipHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash: kotlin.String) : ApiResponse<kotlin.collections.List<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus>?> {
        val localVariableConfig = getMembershipHoldingidentityshorthashRequestConfig(holdingidentityshorthash = holdingidentityshorthash)

        return request<Unit, kotlin.collections.List<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMembershipHoldingidentityshorthash
     *
     * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked.
     * @return RequestConfig
     */
    fun getMembershipHoldingidentityshorthashRequestConfig(holdingidentityshorthash: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/membership/{holdingidentityshorthash}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method checks the status of the specified registration request for a holding identity.
     * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked.
     * @param registrationrequestid The ID of the registration request
     * @return net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMembershipHoldingidentityshorthashRegistrationrequestid(holdingidentityshorthash: kotlin.String, registrationrequestid: kotlin.String) : net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus {
        val localVarResponse = getMembershipHoldingidentityshorthashRegistrationrequestidWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash, registrationrequestid = registrationrequestid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method checks the status of the specified registration request for a holding identity.
     * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked.
     * @param registrationrequestid The ID of the registration request
     * @return ApiResponse<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMembershipHoldingidentityshorthashRegistrationrequestidWithHttpInfo(holdingidentityshorthash: kotlin.String, registrationrequestid: kotlin.String) : ApiResponse<net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus?> {
        val localVariableConfig = getMembershipHoldingidentityshorthashRegistrationrequestidRequestConfig(holdingidentityshorthash = holdingidentityshorthash, registrationrequestid = registrationrequestid)

        return request<Unit, net.corda.membership.rest.v1.types.response.RestRegistrationRequestStatus>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMembershipHoldingidentityshorthashRegistrationrequestid
     *
     * @param holdingidentityshorthash The ID of the holding identity whose view of the registration progress is to be checked.
     * @param registrationrequestid The ID of the registration request
     * @return RequestConfig
     */
    fun getMembershipHoldingidentityshorthashRegistrationrequestidRequestConfig(holdingidentityshorthash: kotlin.String, registrationrequestid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/membership/{holdingidentityshorthash}/{registrationrequestid}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())).replace("{"+"registrationrequestid"+"}", encodeURIComponent(registrationrequestid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * This method starts the registration process for a holding identity.
     * @param holdingidentityshorthash The holding identity ID of the requesting virtual node
     * @param netCordaMembershipRestV1TypesRequestMemberRegistrationRequest requestBody
     * @return net.corda.membership.rest.v1.types.response.RegistrationRequestProgress
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postMembershipHoldingidentityshorthash(holdingidentityshorthash: kotlin.String, netCordaMembershipRestV1TypesRequestMemberRegistrationRequest: net.corda.membership.rest.v1.types.request.MemberRegistrationRequest) : net.corda.membership.rest.v1.types.response.RegistrationRequestProgress {
        val localVarResponse = postMembershipHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash = holdingidentityshorthash, netCordaMembershipRestV1TypesRequestMemberRegistrationRequest = netCordaMembershipRestV1TypesRequestMemberRegistrationRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as net.corda.membership.rest.v1.types.response.RegistrationRequestProgress
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * This method starts the registration process for a holding identity.
     * @param holdingidentityshorthash The holding identity ID of the requesting virtual node
     * @param netCordaMembershipRestV1TypesRequestMemberRegistrationRequest requestBody
     * @return ApiResponse<net.corda.membership.rest.v1.types.response.RegistrationRequestProgress?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postMembershipHoldingidentityshorthashWithHttpInfo(holdingidentityshorthash: kotlin.String, netCordaMembershipRestV1TypesRequestMemberRegistrationRequest: net.corda.membership.rest.v1.types.request.MemberRegistrationRequest) : ApiResponse<net.corda.membership.rest.v1.types.response.RegistrationRequestProgress?> {
        val localVariableConfig = postMembershipHoldingidentityshorthashRequestConfig(holdingidentityshorthash = holdingidentityshorthash, netCordaMembershipRestV1TypesRequestMemberRegistrationRequest = netCordaMembershipRestV1TypesRequestMemberRegistrationRequest)

        return request<net.corda.membership.rest.v1.types.request.MemberRegistrationRequest, net.corda.membership.rest.v1.types.response.RegistrationRequestProgress>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postMembershipHoldingidentityshorthash
     *
     * @param holdingidentityshorthash The holding identity ID of the requesting virtual node
     * @param netCordaMembershipRestV1TypesRequestMemberRegistrationRequest requestBody
     * @return RequestConfig
     */
    fun postMembershipHoldingidentityshorthashRequestConfig(holdingidentityshorthash: kotlin.String, netCordaMembershipRestV1TypesRequestMemberRegistrationRequest: net.corda.membership.rest.v1.types.request.MemberRegistrationRequest) : RequestConfig<net.corda.membership.rest.v1.types.request.MemberRegistrationRequest> {
        val localVariableBody = netCordaMembershipRestV1TypesRequestMemberRegistrationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/membership/{holdingidentityshorthash}".replace("{"+"holdingidentityshorthash"+"}", encodeURIComponent(holdingidentityshorthash.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
