// This plugin is for providing the standard set of gradle used for all libraries
// wishing to implement the OSGi-aware integration test framework

import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi
import static org.gradle.jvm.toolchain.JavaLanguageVersion.of
import static com.gradle.enterprise.gradleplugin.test.JUnitXmlDialect.*
import com.gradle.enterprise.gradleplugin.test.ImportJUnitXmlReports

plugins {
    id 'biz.aQute.bnd.builder'
}

configurations {
    quasarBundles {
        canBeConsumed = false
        visible = false
    }
    integrationTestApi.extendsFrom testApi
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
    compileOnly 'org.osgi:osgi.annotation'
    compileOnly 'org.osgi:osgi.core'
    compileOnly 'org.osgi:org.osgi.service.component.annotations'

    // OSGi frameworks containing Quasar and Kryo must resolve
    // the version of ASM as specified in the OSGi metadata.
    quasarBundles("co.paralleluniverse:quasar-core-osgi:$quasarVersion") {
        exclude group: 'org.slf4j'
    }
    integrationTestRuntimeOnly("co.paralleluniverse:quasar-core-osgi:$quasarVersion:agent") {
        transitive = false
    }
    integrationTestRuntimeOnly files(configurations.quasarBundles)

    integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    integrationTestImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"
    integrationTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felixVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
    integrationTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.integrationTest.output
    sourceSet = sourceSets.integrationTest

    bundle {
        bnd """\
Bundle-SymbolicName: \${task.archiveBaseName}-\${task.archiveClassifier}
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
"""
    }
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(sourceSets.integrationTest.runtimeClasspath, configurations.archives.artifacts.files)
    bndrun = file('test.bndrun')
    outputBndrun = layout.buildDirectory.file('resolved-test.bndrun')
    doFirst {
        //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
        System.setProperty("bnd.home.dir", "$rootDir/bnd/")
    }
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    description = "Runs OSGi integration tests."
    group = "verification"
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = of(11)
    }
    resultsDirectory = file("$testResultsDir/integrationTest")
    bundles = files(sourceSets.integrationTest.runtimeClasspath, configurations.archives.artifacts.files)
    bndrun = resolve.flatMap { it.outputBndrun }
}

tasks.named('check') {
    dependsOn testOSGi
}

tasks.named('integrationTest') {
    dependsOn testOSGi
    enabled = false
}

//Gradle enterprise does not pick up OSGI tests by deafult as they they are of type TestOSGi rather than standard
// Test task this ensures test results are captured
tasks.register("importOSGiJUnitXml", ImportJUnitXmlReports) {
    dialect = GENERIC
    reports.from(fileTree("$testResultsDir/dbIntegrationTest").matching {
        include '**/TEST-*.xml'
    })
}

tasks.integrationTest.finalizedBy('importOSGiJUnitXml')

artifacts {
    archives testingBundle
}
