/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.data.client.rpc.flow;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RPCFlowStart extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4500880861345971273L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RPCFlowStart\",\"namespace\":\"net.corda.data.client.rpc.flow\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nodeIdentity\",\"type\":{\"type\":\"record\",\"name\":\"SecureHash\",\"namespace\":\"net.corda.data.crypto\",\"fields\":[{\"name\":\"algorithm\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serverHash\",\"type\":\"bytes\"}]}},{\"name\":\"flowName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"args\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RPCFlowStart> ENCODER =
      new BinaryMessageEncoder<RPCFlowStart>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RPCFlowStart> DECODER =
      new BinaryMessageDecoder<RPCFlowStart>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RPCFlowStart> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RPCFlowStart> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RPCFlowStart> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RPCFlowStart>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RPCFlowStart to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RPCFlowStart from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RPCFlowStart instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RPCFlowStart fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String clientId;
   private java.lang.String userName;
   private net.corda.data.crypto.SecureHash nodeIdentity;
   private java.lang.String flowName;
   private java.util.List<java.nio.ByteBuffer> args;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RPCFlowStart() {}

  /**
   * All-args constructor.
   * @param clientId The new value for clientId
   * @param userName The new value for userName
   * @param nodeIdentity The new value for nodeIdentity
   * @param flowName The new value for flowName
   * @param args The new value for args
   */
  public RPCFlowStart(java.lang.String clientId, java.lang.String userName, net.corda.data.crypto.SecureHash nodeIdentity, java.lang.String flowName, java.util.List<java.nio.ByteBuffer> args) {
    this.clientId = clientId;
    this.userName = userName;
    this.nodeIdentity = nodeIdentity;
    this.flowName = flowName;
    this.args = args;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientId;
    case 1: return userName;
    case 2: return nodeIdentity;
    case 3: return flowName;
    case 4: return args;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientId = value$ != null ? value$.toString() : null; break;
    case 1: userName = value$ != null ? value$.toString() : null; break;
    case 2: nodeIdentity = (net.corda.data.crypto.SecureHash)value$; break;
    case 3: flowName = value$ != null ? value$.toString() : null; break;
    case 4: args = (java.util.List<java.nio.ByteBuffer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return The value of the 'clientId' field.
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Sets the value of the 'clientId' field.
   * @param value the value to set.
   */
  public void setClientId(java.lang.String value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'userName' field.
   * @return The value of the 'userName' field.
   */
  public java.lang.String getUserName() {
    return userName;
  }


  /**
   * Sets the value of the 'userName' field.
   * @param value the value to set.
   */
  public void setUserName(java.lang.String value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'nodeIdentity' field.
   * @return The value of the 'nodeIdentity' field.
   */
  public net.corda.data.crypto.SecureHash getNodeIdentity() {
    return nodeIdentity;
  }


  /**
   * Sets the value of the 'nodeIdentity' field.
   * @param value the value to set.
   */
  public void setNodeIdentity(net.corda.data.crypto.SecureHash value) {
    this.nodeIdentity = value;
  }

  /**
   * Gets the value of the 'flowName' field.
   * @return The value of the 'flowName' field.
   */
  public java.lang.String getFlowName() {
    return flowName;
  }


  /**
   * Sets the value of the 'flowName' field.
   * @param value the value to set.
   */
  public void setFlowName(java.lang.String value) {
    this.flowName = value;
  }

  /**
   * Gets the value of the 'args' field.
   * @return The value of the 'args' field.
   */
  public java.util.List<java.nio.ByteBuffer> getArgs() {
    return args;
  }


  /**
   * Sets the value of the 'args' field.
   * @param value the value to set.
   */
  public void setArgs(java.util.List<java.nio.ByteBuffer> value) {
    this.args = value;
  }

  /**
   * Creates a new RPCFlowStart RecordBuilder.
   * @return A new RPCFlowStart RecordBuilder
   */
  public static net.corda.data.client.rpc.flow.RPCFlowStart.Builder newBuilder() {
    return new net.corda.data.client.rpc.flow.RPCFlowStart.Builder();
  }

  /**
   * Creates a new RPCFlowStart RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RPCFlowStart RecordBuilder
   */
  public static net.corda.data.client.rpc.flow.RPCFlowStart.Builder newBuilder(net.corda.data.client.rpc.flow.RPCFlowStart.Builder other) {
    if (other == null) {
      return new net.corda.data.client.rpc.flow.RPCFlowStart.Builder();
    } else {
      return new net.corda.data.client.rpc.flow.RPCFlowStart.Builder(other);
    }
  }

  /**
   * Creates a new RPCFlowStart RecordBuilder by copying an existing RPCFlowStart instance.
   * @param other The existing instance to copy.
   * @return A new RPCFlowStart RecordBuilder
   */
  public static net.corda.data.client.rpc.flow.RPCFlowStart.Builder newBuilder(net.corda.data.client.rpc.flow.RPCFlowStart other) {
    if (other == null) {
      return new net.corda.data.client.rpc.flow.RPCFlowStart.Builder();
    } else {
      return new net.corda.data.client.rpc.flow.RPCFlowStart.Builder(other);
    }
  }

  /**
   * RecordBuilder for RPCFlowStart instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RPCFlowStart>
    implements org.apache.avro.data.RecordBuilder<RPCFlowStart> {

    private java.lang.String clientId;
    private java.lang.String userName;
    private net.corda.data.crypto.SecureHash nodeIdentity;
    private net.corda.data.crypto.SecureHash.Builder nodeIdentityBuilder;
    private java.lang.String flowName;
    private java.util.List<java.nio.ByteBuffer> args;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.data.client.rpc.flow.RPCFlowStart.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.nodeIdentity)) {
        this.nodeIdentity = data().deepCopy(fields()[2].schema(), other.nodeIdentity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasNodeIdentityBuilder()) {
        this.nodeIdentityBuilder = net.corda.data.crypto.SecureHash.newBuilder(other.getNodeIdentityBuilder());
      }
      if (isValidValue(fields()[3], other.flowName)) {
        this.flowName = data().deepCopy(fields()[3].schema(), other.flowName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.args)) {
        this.args = data().deepCopy(fields()[4].schema(), other.args);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing RPCFlowStart instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.data.client.rpc.flow.RPCFlowStart other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nodeIdentity)) {
        this.nodeIdentity = data().deepCopy(fields()[2].schema(), other.nodeIdentity);
        fieldSetFlags()[2] = true;
      }
      this.nodeIdentityBuilder = null;
      if (isValidValue(fields()[3], other.flowName)) {
        this.flowName = data().deepCopy(fields()[3].schema(), other.flowName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.args)) {
        this.args = data().deepCopy(fields()[4].schema(), other.args);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'clientId' field.
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder setClientId(java.lang.String value) {
      validate(fields()[0], value);
      this.clientId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'clientId' field.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userName' field.
      * @return The value.
      */
    public java.lang.String getUserName() {
      return userName;
    }


    /**
      * Sets the value of the 'userName' field.
      * @param value The value of 'userName'.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder setUserName(java.lang.String value) {
      validate(fields()[1], value);
      this.userName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userName' field has been set.
      * @return True if the 'userName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userName' field.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nodeIdentity' field.
      * @return The value.
      */
    public net.corda.data.crypto.SecureHash getNodeIdentity() {
      return nodeIdentity;
    }


    /**
      * Sets the value of the 'nodeIdentity' field.
      * @param value The value of 'nodeIdentity'.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder setNodeIdentity(net.corda.data.crypto.SecureHash value) {
      validate(fields()[2], value);
      this.nodeIdentityBuilder = null;
      this.nodeIdentity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nodeIdentity' field has been set.
      * @return True if the 'nodeIdentity' field has been set, false otherwise.
      */
    public boolean hasNodeIdentity() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'nodeIdentity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.corda.data.crypto.SecureHash.Builder getNodeIdentityBuilder() {
      if (nodeIdentityBuilder == null) {
        if (hasNodeIdentity()) {
          setNodeIdentityBuilder(net.corda.data.crypto.SecureHash.newBuilder(nodeIdentity));
        } else {
          setNodeIdentityBuilder(net.corda.data.crypto.SecureHash.newBuilder());
        }
      }
      return nodeIdentityBuilder;
    }

    /**
     * Sets the Builder instance for the 'nodeIdentity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder setNodeIdentityBuilder(net.corda.data.crypto.SecureHash.Builder value) {
      clearNodeIdentity();
      nodeIdentityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'nodeIdentity' field has an active Builder instance
     * @return True if the 'nodeIdentity' field has an active Builder instance
     */
    public boolean hasNodeIdentityBuilder() {
      return nodeIdentityBuilder != null;
    }

    /**
      * Clears the value of the 'nodeIdentity' field.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder clearNodeIdentity() {
      nodeIdentity = null;
      nodeIdentityBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'flowName' field.
      * @return The value.
      */
    public java.lang.String getFlowName() {
      return flowName;
    }


    /**
      * Sets the value of the 'flowName' field.
      * @param value The value of 'flowName'.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder setFlowName(java.lang.String value) {
      validate(fields()[3], value);
      this.flowName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'flowName' field has been set.
      * @return True if the 'flowName' field has been set, false otherwise.
      */
    public boolean hasFlowName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'flowName' field.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder clearFlowName() {
      flowName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'args' field.
      * @return The value.
      */
    public java.util.List<java.nio.ByteBuffer> getArgs() {
      return args;
    }


    /**
      * Sets the value of the 'args' field.
      * @param value The value of 'args'.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder setArgs(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[4], value);
      this.args = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'args' field has been set.
      * @return True if the 'args' field has been set, false otherwise.
      */
    public boolean hasArgs() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'args' field.
      * @return This builder.
      */
    public net.corda.data.client.rpc.flow.RPCFlowStart.Builder clearArgs() {
      args = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RPCFlowStart build() {
      try {
        RPCFlowStart record = new RPCFlowStart();
        record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.String) defaultValue(fields()[0]);
        record.userName = fieldSetFlags()[1] ? this.userName : (java.lang.String) defaultValue(fields()[1]);
        if (nodeIdentityBuilder != null) {
          try {
            record.nodeIdentity = this.nodeIdentityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("nodeIdentity"));
            throw e;
          }
        } else {
          record.nodeIdentity = fieldSetFlags()[2] ? this.nodeIdentity : (net.corda.data.crypto.SecureHash) defaultValue(fields()[2]);
        }
        record.flowName = fieldSetFlags()[3] ? this.flowName : (java.lang.String) defaultValue(fields()[3]);
        record.args = fieldSetFlags()[4] ? this.args : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RPCFlowStart>
    WRITER$ = (org.apache.avro.io.DatumWriter<RPCFlowStart>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RPCFlowStart>
    READER$ = (org.apache.avro.io.DatumReader<RPCFlowStart>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.clientId);

    out.writeString(this.userName);

    this.nodeIdentity.customEncode(out);

    out.writeString(this.flowName);

    long size0 = this.args.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.nio.ByteBuffer e0: this.args) {
      actualSize0++;
      out.startItem();
      out.writeBytes(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.clientId = in.readString();

      this.userName = in.readString();

      if (this.nodeIdentity == null) {
        this.nodeIdentity = new net.corda.data.crypto.SecureHash();
      }
      this.nodeIdentity.customDecode(in);

      this.flowName = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<java.nio.ByteBuffer> a0 = this.args;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.nio.ByteBuffer>((int)size0, SCHEMA$.getField("args").schema());
        this.args = a0;
      } else a0.clear();
      SpecificData.Array<java.nio.ByteBuffer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.nio.ByteBuffer>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.nio.ByteBuffer e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readBytes(e0);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.clientId = in.readString();
          break;

        case 1:
          this.userName = in.readString();
          break;

        case 2:
          if (this.nodeIdentity == null) {
            this.nodeIdentity = new net.corda.data.crypto.SecureHash();
          }
          this.nodeIdentity.customDecode(in);
          break;

        case 3:
          this.flowName = in.readString();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.nio.ByteBuffer> a0 = this.args;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.nio.ByteBuffer>((int)size0, SCHEMA$.getField("args").schema());
            this.args = a0;
          } else a0.clear();
          SpecificData.Array<java.nio.ByteBuffer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.nio.ByteBuffer>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.nio.ByteBuffer e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readBytes(e0);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










