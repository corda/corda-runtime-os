
plugins {
    id 'net.corda.plugins.cordapp-cpb2'
    id 'org.jetbrains.kotlin.plugin.jpa'
    id 'org.jetbrains.kotlin.plugin.allopen'
}

group = "net.cordacon"
version = "$cordaApiVersion"

dependencies {

    cordaProvided 'org.jetbrains.kotlin:kotlin-osgi-bundle'
    cordaProvided platform("net.corda:corda-api:$cordaApiVersion")
    cordaProvided 'net.corda:corda-base'
    cordaProvided 'net.corda:corda-application'
    cordaProvided 'net.corda:corda-ledger-common'
    cordaProvided 'net.corda:corda-ledger-consensual'
    cordaProvided 'org.slf4j:slf4j-api'

    testImplementation "org.junit.jupiter:junit-jupiter:$junit5Version"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"

    testImplementation project(':libs:crypto:crypto-core')
    testImplementation project(':simulator:api')
    testRuntimeOnly project(':simulator:runtime')
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

def cordappName = 'cordapp-example-rollcall'

tasks.named('jar', Jar) {
    archiveBaseName = cordappName
}

cordapp {
    targetPlatformVersion platformVersion.toInteger()
    minimumPlatformVersion platformVersion.toInteger()
    workflow
    {
        name cordappName
        versionId 1
        vendor "LizR3"
    }
}
