{{- if .Values.bootstrap.db.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "corda.fullname" . }}-setup-db
  labels:
    {{- include "corda.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
spec:
  template:
    metadata:
      labels:
        {{- include "corda.selectorLabels" . | nindent 8 }}
    spec:
      {{- include "corda.imagePullSecrets" . | nindent 6 }}
      {{- include "corda.bootstrapServiceAccount" . | nindent 6 }}
      containers:
        - name: fin
          image: {{ include "corda.bootstrapImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          {{- include "corda.bootstrapSecurityContext" . | nindent 10 }}
          command:
            - /bin/sh
            - -e
            - -c
          args: ["echo", "'DB Bootstrapped'"]
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
      initContainers:
        - name: create-db-schemas
          image: {{ include "corda.bootstrapImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          {{- include "corda.bootstrapSecurityContext" . | nindent 10 }}
          args: [ 'database', 'spec', '-c', '-l', '/tmp/working_dir' ]
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
            {{ include "corda.log4jVolumeMount" . | nindent 12 }}
          env:
            {{ include "corda.cliEnv" . | nindent 12 }}
        - name: apply-db-schemas
          image: {{ include "corda.dbClientImage" . }}
          command: [ 'sh', '-c', 'for f in /tmp/working_dir/*.sql; do psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} -f "$f" --dbname {{ include "corda.clusterDbName" . }}; done' ]
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
          env:
          {{- include "corda.clusterDbEnv" . | nindent 12 }}
        - name: create-initial-rbac-db-config
          image: {{ include "corda.bootstrapImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          args: [ 'initial-config', 'create-db-config', '-u', 'rbac_user', '-p', 'rbac_password', '--name', 'corda-rbac', '--jdbcURL', 'jdbc:{{ include "corda.clusterDbType" . }}://{{ required "A db host is required" .Values.db.cluster.host }}:{{ include "corda.clusterDbPort" . }}/{{ include "corda.clusterDbName" . }}', '--jdbcPoolMaxSize', {{ .Values.bootstrap.db.rbac.dbConnectionPool.maxSize | quote }}, '--salt', "$(SALT)", '--passphrase', "$(PASSPHRASE)", '-l', '/tmp/working_dir']
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
            {{ include "corda.log4jVolumeMount" . | nindent 12 }}
          env:
            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                  key: salt
            - name: PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                  key: passphrase
            {{ include "corda.cliEnv" . | nindent 12 }}
        - name: apply-initial-rbac-db-config
          image: {{ include "corda.dbClientImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          command: [ 'sh', '-c', 'psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} -f /tmp/working_dir/db-config.sql --dbname {{ include "corda.clusterDbName" . }}' ]
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
          env:
          {{- include "corda.clusterDbEnv" . | nindent 12 }}
        - name: create-initial-crypto-db-config
          image: {{ include "corda.bootstrapImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          {{- include "corda.bootstrapSecurityContext" . | nindent 10 }}
          args: [ 'initial-config', 'create-db-config', '-u', 'crypto_user', '-p', 'crypto_password', '--name', 'corda-crypto', '--jdbcURL', 'jdbc:{{ include "corda.clusterDbType" . }}://{{ required "A db host is required" .Values.db.cluster.host }}:{{ include "corda.clusterDbPort" . }}/{{ include "corda.clusterDbName" . }}?currentSchema=CRYPTO', '--jdbcPoolMaxSize', {{ .Values.bootstrap.db.crypto.dbConnectionPool.maxSize | quote }}, '--salt', "$(SALT)", '--passphrase', "$(PASSPHRASE)", '-l', '/tmp/working_dir']
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
            {{ include "corda.log4jVolumeMount" . | nindent 12 }}
          env:
            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                  key: salt
            - name: PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                  key: passphrase
            {{ include "corda.cliEnv" . | nindent 12 }}
        - name: apply-initial-crypto-db-config
          image: {{ include "corda.dbClientImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          command: [ 'sh', '-c', 'psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} -f /tmp/working_dir/db-config.sql --dbname {{ include "corda.clusterDbName" . }}' ]
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
          env:
          {{- include "corda.clusterDbEnv" . | nindent 12 }}
        - name: create-initial-rpc-admin
          image: {{ include "corda.bootstrapImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          {{- include "corda.bootstrapSecurityContext" . | nindent 10 }}
          args: [ 'initial-config', 'create-user-config', '-u', '$(INITIAL_ADMIN_USER_USERNAME)', '-p', '$(INITIAL_ADMIN_USER_PASSWORD)', '-l', '/tmp/working_dir']
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
            {{ include "corda.log4jVolumeMount" . | nindent 12 }}
          env:
            - name: INITIAL_ADMIN_USER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "corda.initialAdminUserUsernameSecretName" . }}
                  key: {{ include "corda.initialAdminUserSecretUsernameKey" . }}
            - name: INITIAL_ADMIN_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "corda.initialAdminUserPasswordSecretName" . }}
                  key: {{ include "corda.initialAdminUserSecretPasswordKey" . }}
            {{ include "corda.cliEnv" . | nindent 12 }}
        - name: apply-initial-rpc-admin
          image: {{ include "corda.dbClientImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          command: [ 'sh', '-c', 'psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} -f /tmp/working_dir/rbac-config.sql --dbname {{ include "corda.clusterDbName" . }}' ]
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
          env:
          {{- include "corda.clusterDbEnv" . | nindent 12 }}
        - name: create-db-users-and-grant
          image: {{ include "corda.dbClientImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          command: [ '/bin/sh', '-e', '-c' ]
          args:
            - |
              psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} {{ include "corda.clusterDbName" . }} -c "CREATE USER rbac_user WITH ENCRYPTED PASSWORD 'rbac_password'" || echo "User rbac_user already existed - skipping"
              psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} {{ include "corda.clusterDbName" . }}  -c "GRANT USAGE ON SCHEMA RPC_RBAC to rbac_user;" || echo "Couldn't perform usage grant"
              psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} {{ include "corda.clusterDbName" . }}  -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA RPC_RBAC to rbac_user;" || echo "Couldn't DML perform grant"
              psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} {{ include "corda.clusterDbName" . }}  -c "CREATE USER crypto_user WITH ENCRYPTED PASSWORD 'crypto_password'" || echo "User crypto_user already existed - skipping"
              psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} {{ include "corda.clusterDbName" . }}  -c "GRANT USAGE ON SCHEMA CRYPTO to crypto_user;" || echo "Couldn't perform usage grant"
              psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} {{ include "corda.clusterDbName" . }}  -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA CRYPTO to crypto_user;" || echo "Couldn't DML perform grant"
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
          env:
          {{- include "corda.clusterDbEnv" . | nindent 12 }}
        - name: create-initial-crypto-worker-config
          image: {{ include "corda.bootstrapImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          {{- include "corda.bootstrapSecurityContext" . | nindent 10 }}
          args: [ 'initial-config', 'create-crypto-config', '--salt', "$(SALT)", '--passphrase', "$(PASSPHRASE)", '-l', '/tmp/working_dir']
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
            {{ include "corda.log4jVolumeMount" . | nindent 12 }}
          env:
            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                  key: salt
            - name: PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-db-worker" (include "corda.fullname" .) }}
                  key: passphrase
            {{ include "corda.cliEnv" . | nindent 12 }}
        - name: apply-initial-crypto-worker-config
          image: {{ include "corda.dbClientImage" . }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- include "corda.bootstrapResources" . | nindent 10 }}
          command: [ 'sh', '-c', 'psql -h {{ required "A db host is required" .Values.db.cluster.host }} -p {{ include "corda.clusterDbPort" . }} -f /tmp/working_dir/crypto-config.sql --dbname {{ include "corda.clusterDbName" . }}' ]
          volumeMounts:
            - mountPath: /tmp/working_dir
              name: working-volume
          env:
          {{- include "corda.clusterDbEnv" . | nindent 12 }}

      volumes:
        - name: working-volume
          emptyDir: {}
        {{ include "corda.log4jVolume" . | nindent 8 }}

      {{- include "corda.bootstrapNodeSelector" . | nindent 6 }}

      restartPolicy: Never
{{- end }}
