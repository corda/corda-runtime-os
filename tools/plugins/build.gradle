plugins {
    id 'corda.common-publishing'
    id 'java'
}

group 'net.corda.cli.deployment'

configurations {
    cliHostDist
}

dependencies {
    cliHostDist "net.corda.cli.host:corda-cli:${pluginHostVersion}"
}

tasks.register('copyCliFiles') {
    copy {
        from configurations.named('cliHostDist')
        into "$buildDir/cli"
        rename ('.*.jar', 'corda-cli.jar')
    }
    copy {
        from subprojects.collect { it.tasks.named('cliPluginTask') }
        into "$buildDir/cli/plugins"
    }
    copy {
        from "$projectDir/installScripts"
        into "$buildDir/cli"
    }
}

task cliInstallArchive(type: Zip) {
    dependsOn tasks.named('copyCliFiles')
    from "$buildDir/cli"
    include '*'
    include '*/*'
    archiveName 'corda-cli-dist.zip'
    destinationDir(file("$buildDir/zip"))
}

artifacts {
    cliInstallArchive
}


tasks.register('publishBuildkitImage' , BuildkitBuild) {
    def sourceTasks = subprojects.collect { it.tasks.named("cliPluginTask").get() }
    def cordaCliIncluded = gradle.includedBuilds.collect { it.name == "corda-cli-plugin-host" }.contains(true)
    def containerizationDir = it.temporaryDir.toString()
    def containerLocation = '/opt/override/'

    if (project.hasProperty('cliBaseImage')) {
        it.baseImageName = cliBaseImage
    } else {
        // cater for local composite build
        it.baseImageName = (cordaCliIncluded) ? "corda-os-docker-dev.software.r3.com/corda-os-cli" : "corda-os-docker.software.r3.com/corda-os-cli"
    }

    if (project.hasProperty('baseTag')) {
        it.baseImageTag = baseTag
    } else {
        it.baseImageTag = (cordaCliIncluded) ? "latest-local" : "unstable"
    }

    logger.quiet("${it.baseImageName.get()} : ${it.baseImageTag.get()}     ${it.subDir.get()}")

    List<String> javaArgs = new ArrayList<String>(it.arguments.get())
    javaArgs.add("-Dlog4j2.debug=\${ENABLE_LOG4J2_DEBUG:-false}")
    javaArgs.add("-Dlog4j.configurationFile=\${LOG4J_CONFIG_FILE}")

    String containerName = project.name
    def imageName = "${it.baseImageTag.get().empty ? it.baseImageName.get() : "${it.baseImageName.get()}:${it.baseImageTag.get()}"}"

    if (cordaCliIncluded) {
        logger.lifecycle("corda-cli-plugin-host project detected in composite build logic, building base image from include project")
        dependsOn gradle.includedBuild("corda-cli-plugin-host").task(':app:publishBuildkitImage')
    }
    it.sourceFiles.setFrom(sourceTasks)
    sourceFiles.forEach{
        logger.quiet("${it.name.toString()}")
    }

    def subDir = "plugins/"

    // Task executes the buildctl build command below

    // see

    // buildctl \
    //         --addr {address of the buildkit pod} \
    // build --frontend=dockerfile.v0 \
    //         --local context= {working directory} \
    //         --local dockerfile= {location of the dockerfile} \
    //         --opt build-arg:BASE_IMAGE= {base image of the worker, should be worker-cli for os-plugins and azul zulu jdk for everythign else} \
    //         --opt build-arg:BUILD_PATH={location of a folder with fat jars} \
    //         --opt build-arg:JAR_LOCATION={where to save said fat jars on an image}}\
    //         --opt build-arg:IMAGE_ENTRYPOINT={entrypoint: exec of the fat jar with some argument} \
    //         --output type=image,name=docker-js-temp.software.r3.com/IMAGE_NAME:IMAGE_TAG,push=true \
    //         --export-cache type=registry,ref=docker-js-temp.software.r3.com/IMAGE_NAME:IMAGE_TAG-cache \
    //         --import-cache type=registry,ref=docker-js-temp.software.r3.com/IMAGE_NAME:IMAGE_TAG-cache


    doLast {
        exec{
            workingDir("${project.rootDir}")
            commandLine 'bash', '-c', "buildctl --addr tcp://localhost:3476 build --frontend=dockerfile.v0 --local context=/ --local dockerfile=${project.rootDir.toString() + "/docker"} --opt build-arg:BASE_IMAGE=${imageName} --opt build-arg:BUILD_PATH=${containerizationDir} --opt build-arg:JAR_LOCATION=${containerLocation + subDir} --opt build-arg:IMAGE_ENTRYPOINT=\"exec java ${javaArgs.join(" ")} -jar  ${containerLocation}${containerName}.jar\" --output type=image,name=docker-js-temp.software.r3.com/corda-os-${containerName},push=true --export-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache --import-cache type=registry,ref=docker-js-temp.software.r3.com/corda-os-${containerName}-cache"
        }
    }

}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    def sourceTasks = subprojects.collect { it.tasks.named("cliPluginTask").get() }
    def cordaCliIncluded = gradle.includedBuilds.collect { it.name == "corda-cli-plugin-host" }.contains(true)

    if (cordaCliIncluded) {
        logger.lifecycle("corda-cli-plugin-host project detected in composite build logic, building base image from include project")
        dependsOn gradle.includedBuild("corda-cli-plugin-host").task(':app:publishOSGiImage')
    }
    it.sourceFiles.setFrom(sourceTasks)
    it.subDir = "plugins/"
    it.setEntry = false
    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }

    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    // Has to be different as jenkins will always try use zulu
    if (project.hasProperty('cliBaseImage')) {
        baseImageName = cliBaseImage
    } else {
        // cater for local composite build
        baseImageName = (cordaCliIncluded) ? "corda-os-docker-dev.software.r3.com/corda-os-cli" : "corda-os-docker.software.r3.com/corda-os-cli"
    }

    if (project.hasProperty('cliBasebaseTag')) {
        baseImageTag = cliBasebaseTag
    } else {
        it.baseImageTag = (cordaCliIncluded) ? "latest-local" : "unstable"
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId "corda-cli-installer"
            groupId project.group
            artifact cliInstallArchive
        }
    }
}
