/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.corda.p2p;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LinkOutHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7809630617040363926L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LinkOutHeader\",\"namespace\":\"net.corda.p2p\",\"fields\":[{\"name\":\"destinationX500Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"destinationNetworkType\",\"type\":{\"type\":\"enum\",\"name\":\"NetworkType\",\"symbols\":[\"CORDA_4\",\"CORDA_5\"]}},{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LinkOutHeader> ENCODER =
      new BinaryMessageEncoder<LinkOutHeader>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LinkOutHeader> DECODER =
      new BinaryMessageDecoder<LinkOutHeader>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LinkOutHeader> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LinkOutHeader> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LinkOutHeader> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LinkOutHeader>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LinkOutHeader to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LinkOutHeader from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LinkOutHeader instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LinkOutHeader fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String destinationX500Name;
   private net.corda.p2p.NetworkType destinationNetworkType;
   private java.lang.String address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LinkOutHeader() {}

  /**
   * All-args constructor.
   * @param destinationX500Name The new value for destinationX500Name
   * @param destinationNetworkType The new value for destinationNetworkType
   * @param address The new value for address
   */
  public LinkOutHeader(java.lang.String destinationX500Name, net.corda.p2p.NetworkType destinationNetworkType, java.lang.String address) {
    this.destinationX500Name = destinationX500Name;
    this.destinationNetworkType = destinationNetworkType;
    this.address = address;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return destinationX500Name;
    case 1: return destinationNetworkType;
    case 2: return address;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: destinationX500Name = value$ != null ? value$.toString() : null; break;
    case 1: destinationNetworkType = (net.corda.p2p.NetworkType)value$; break;
    case 2: address = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'destinationX500Name' field.
   * @return The value of the 'destinationX500Name' field.
   */
  public java.lang.String getDestinationX500Name() {
    return destinationX500Name;
  }


  /**
   * Sets the value of the 'destinationX500Name' field.
   * @param value the value to set.
   */
  public void setDestinationX500Name(java.lang.String value) {
    this.destinationX500Name = value;
  }

  /**
   * Gets the value of the 'destinationNetworkType' field.
   * @return The value of the 'destinationNetworkType' field.
   */
  public net.corda.p2p.NetworkType getDestinationNetworkType() {
    return destinationNetworkType;
  }


  /**
   * Sets the value of the 'destinationNetworkType' field.
   * @param value the value to set.
   */
  public void setDestinationNetworkType(net.corda.p2p.NetworkType value) {
    this.destinationNetworkType = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Creates a new LinkOutHeader RecordBuilder.
   * @return A new LinkOutHeader RecordBuilder
   */
  public static net.corda.p2p.LinkOutHeader.Builder newBuilder() {
    return new net.corda.p2p.LinkOutHeader.Builder();
  }

  /**
   * Creates a new LinkOutHeader RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LinkOutHeader RecordBuilder
   */
  public static net.corda.p2p.LinkOutHeader.Builder newBuilder(net.corda.p2p.LinkOutHeader.Builder other) {
    if (other == null) {
      return new net.corda.p2p.LinkOutHeader.Builder();
    } else {
      return new net.corda.p2p.LinkOutHeader.Builder(other);
    }
  }

  /**
   * Creates a new LinkOutHeader RecordBuilder by copying an existing LinkOutHeader instance.
   * @param other The existing instance to copy.
   * @return A new LinkOutHeader RecordBuilder
   */
  public static net.corda.p2p.LinkOutHeader.Builder newBuilder(net.corda.p2p.LinkOutHeader other) {
    if (other == null) {
      return new net.corda.p2p.LinkOutHeader.Builder();
    } else {
      return new net.corda.p2p.LinkOutHeader.Builder(other);
    }
  }

  /**
   * RecordBuilder for LinkOutHeader instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LinkOutHeader>
    implements org.apache.avro.data.RecordBuilder<LinkOutHeader> {

    private java.lang.String destinationX500Name;
    private net.corda.p2p.NetworkType destinationNetworkType;
    private java.lang.String address;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.corda.p2p.LinkOutHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.destinationX500Name)) {
        this.destinationX500Name = data().deepCopy(fields()[0].schema(), other.destinationX500Name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.destinationNetworkType)) {
        this.destinationNetworkType = data().deepCopy(fields()[1].schema(), other.destinationNetworkType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing LinkOutHeader instance
     * @param other The existing instance to copy.
     */
    private Builder(net.corda.p2p.LinkOutHeader other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.destinationX500Name)) {
        this.destinationX500Name = data().deepCopy(fields()[0].schema(), other.destinationX500Name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.destinationNetworkType)) {
        this.destinationNetworkType = data().deepCopy(fields()[1].schema(), other.destinationNetworkType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'destinationX500Name' field.
      * @return The value.
      */
    public java.lang.String getDestinationX500Name() {
      return destinationX500Name;
    }


    /**
      * Sets the value of the 'destinationX500Name' field.
      * @param value The value of 'destinationX500Name'.
      * @return This builder.
      */
    public net.corda.p2p.LinkOutHeader.Builder setDestinationX500Name(java.lang.String value) {
      validate(fields()[0], value);
      this.destinationX500Name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationX500Name' field has been set.
      * @return True if the 'destinationX500Name' field has been set, false otherwise.
      */
    public boolean hasDestinationX500Name() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'destinationX500Name' field.
      * @return This builder.
      */
    public net.corda.p2p.LinkOutHeader.Builder clearDestinationX500Name() {
      destinationX500Name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationNetworkType' field.
      * @return The value.
      */
    public net.corda.p2p.NetworkType getDestinationNetworkType() {
      return destinationNetworkType;
    }


    /**
      * Sets the value of the 'destinationNetworkType' field.
      * @param value The value of 'destinationNetworkType'.
      * @return This builder.
      */
    public net.corda.p2p.LinkOutHeader.Builder setDestinationNetworkType(net.corda.p2p.NetworkType value) {
      validate(fields()[1], value);
      this.destinationNetworkType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationNetworkType' field has been set.
      * @return True if the 'destinationNetworkType' field has been set, false otherwise.
      */
    public boolean hasDestinationNetworkType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'destinationNetworkType' field.
      * @return This builder.
      */
    public net.corda.p2p.LinkOutHeader.Builder clearDestinationNetworkType() {
      destinationNetworkType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public net.corda.p2p.LinkOutHeader.Builder setAddress(java.lang.String value) {
      validate(fields()[2], value);
      this.address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public net.corda.p2p.LinkOutHeader.Builder clearAddress() {
      address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LinkOutHeader build() {
      try {
        LinkOutHeader record = new LinkOutHeader();
        record.destinationX500Name = fieldSetFlags()[0] ? this.destinationX500Name : (java.lang.String) defaultValue(fields()[0]);
        record.destinationNetworkType = fieldSetFlags()[1] ? this.destinationNetworkType : (net.corda.p2p.NetworkType) defaultValue(fields()[1]);
        record.address = fieldSetFlags()[2] ? this.address : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LinkOutHeader>
    WRITER$ = (org.apache.avro.io.DatumWriter<LinkOutHeader>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LinkOutHeader>
    READER$ = (org.apache.avro.io.DatumReader<LinkOutHeader>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.destinationX500Name);

    out.writeEnum(this.destinationNetworkType.ordinal());

    out.writeString(this.address);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.destinationX500Name = in.readString();

      this.destinationNetworkType = net.corda.p2p.NetworkType.values()[in.readEnum()];

      this.address = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.destinationX500Name = in.readString();
          break;

        case 1:
          this.destinationNetworkType = net.corda.p2p.NetworkType.values()[in.readEnum()];
          break;

        case 2:
          this.address = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










