
CliPluginPackagerExtension cliPlugin = extensions.create("cliPlugin", CliPluginPackagerExtension)

def cliPluginPackager = tasks.register("cliPluginTask", Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveBaseName = cliPlugin.cliPluginId
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "module-info.class"
        exclude "META-INF/versions/*/module-info.class"
        exclude "org/slf4j/**"
    }
    manifest {
        attributes['Plugin-Class'] = cliPlugin.cliPluginClass
        attributes['Plugin-Id'] = cliPlugin.cliPluginId
        attributes['Plugin-Version'] = version
        attributes['Plugin-Provider'] = cliPlugin.cliPluginProvider
        attributes['Plugin-Description'] = cliPlugin.cliPluginDescription
    }
}

artifacts {
    archives cliPluginPackager
}

interface CliPluginPackagerExtension {
    Property<String> getCliPluginId()
    Property<String> getCliPluginClass()
    Property<String> getCliPluginProvider()
    Property<String> getCliPluginDescription()
}
