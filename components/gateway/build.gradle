plugins {
    id 'corda.common-library'
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'corda.osgi-test-conventions'
}

description 'P2P gateway component'

sourceSets {
    nonOsgiIntegrationTest {
        java {
            srcDirs += [ 'src/non-osgi-integration-test/java' ]
        }
        kotlin {
            srcDirs += [ 'src/non-osgi-integration-test/kotlin' ]
        }
        resources {
            srcDirs = [ 'src/non-osgi-integration-test/resources' ]
            srcDirs += [ 'src/integration-test/resources' ]
        }
    }
}

dependencies {
    compileOnly 'org.osgi:osgi.annotation'
    compileOnly 'org.osgi:org.osgi.service.component.annotations'

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation 'net.corda.kotlin:kotlin-stdlib-jdk8-osgi'
    implementation "net.corda:corda-base"
    implementation "net.corda:corda-avro-schema"
    implementation "net.corda:corda-topic-schema"
    implementation project(":libs:p2p-crypto")
    implementation project(":libs:messaging:messaging")
    implementation project(":libs:lifecycle:lifecycle")
    implementation project(":components:configuration:configuration-read-service")
    implementation project(':components:domino-logic')

    implementation "com.typesafe:config:$typeSafeConfigVersion"
    implementation "io.netty:netty-codec-http:$nettyVersion"
    implementation "org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion"
    implementation "commons-validator:commons-validator:$commonsVersion"


    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation("org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion") {
        exclude group: 'mockito-core'
    }

    integrationTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    integrationTestImplementation "org.apache.logging.log4j:log4j-core:$log4jVersion"

    // For async logging
    integrationTestRuntimeOnly "com.lmax:disruptor:$disruptorVersion"

    integrationTestImplementation project(":testing:test-utilities")

    integrationTestImplementation project(":libs:messaging:inmemory-messaging-impl")
    integrationTestImplementation project(":libs:lifecycle:lifecycle-impl")
    integrationTestImplementation project(":components:configuration:configuration-read-service-impl")
    integrationTestImplementation project(":libs:configuration:configuration-read-impl")
    integrationTestImplementation project(":libs:configuration:configuration-read")
    integrationTestImplementation project(":libs:configuration:configuration-write")
    integrationTestImplementation project(":libs:configuration:configuration-write-impl")
}

kotlin {
    target {
        java
        compilations.nonOsgiIntegrationTest {
            associateWith compilations.main

            configurations {
                nonOsgiIntegrationTestApi.extendsFrom integrationTestApi
                nonOsgiIntegrationTestImplementation.extendsFrom integrationTestImplementation
                nonOsgiIntegrationTestRuntimeOnly.extendsFrom integrationTestRuntimeOnly

                [ nonOsgiIntegrationTestCompileClasspath, nonOsgiIntegrationTestRuntimeClasspath ].forEach { cfg ->
                    configureKotlinForOSGi(cfg)
                }
            }
        }
    }
}

tasks.register('nonOsgiIntegrationTest', Test) {
    description = 'Runs non-OSGI integration tests.'
    group = 'verification'
    def hostsFilePath = new File(project.sourceSets['nonOsgiIntegrationTest'].output.resourcesDir.absolutePath, 'hosts').absolutePath
    jvmArgs "-Djdk.net.hosts.file=$hostsFilePath"
    testClassesDirs = project.sourceSets['nonOsgiIntegrationTest'].output.classesDirs
    classpath = project.sourceSets['nonOsgiIntegrationTest'].runtimeClasspath
}

tasks.named('check') {
    dependsOn nonOsgiIntegrationTest
}
tasks.named('integrationTest') {
    dependsOn nonOsgiIntegrationTest
}
