plugins {
    id 'corda.common-publishing'
    id 'corda.common-app'
    id 'corda.docker-app'
}

description 'REST Worker'

ext.cordaEnableFormatting = true

dependencies {
    compileOnly 'org.osgi:org.osgi.service.component.annotations'

    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation project(':applications:workers:worker-common')
    implementation project(':libs:configuration:configuration-core')
    implementation project(':libs:lifecycle:registry')
    implementation project(':libs:platform-info')
    implementation project(':libs:tracing')
    implementation project(':libs:configuration:configuration-validation')
    implementation project(':libs:web:web')
    implementation project(':processors:rest-processor')
    implementation 'org.jetbrains.kotlin:kotlin-osgi-bundle'
    implementation "info.picocli:picocli:$picocliVersion"
    implementation 'net.corda:corda-base'
    implementation 'net.corda:corda-config-schema'

    runtimeOnly libs.typesafe.config
    runtimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.framework.extension:$ariesDynamicFrameworkExtensionVersion"
    runtimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    runtimeOnly "org.osgi:org.osgi.service.component:$osgiServiceComponentVersion"
    runtimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    runtimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"

    runtimeOnly project(':libs:messaging:kafka-message-bus-impl')
    runtimeOnly project(':libs:messaging:messaging-impl')
    runtimeOnly project(':libs:tracing-impl')

    // This puts the jdbc driver into the docker image in the /opt/jdbc-driver folder
    // this folder can contain many jdbc drivers (and DataSourceFactory provider bundles).
    // Postgres doesn't need a DataSourceFactory provider bundle (e.g. pax-jdbc), because
    // the postgres devs have written their own and it's in this jar (PGDataSourceFactory).
    dockerImageJdbc libs.postgresql.jdbc
}