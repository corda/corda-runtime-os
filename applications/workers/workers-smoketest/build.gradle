plugins {
    id 'org.jetbrains.kotlin.jvm'
}

description 'Worker Smoketests'

configurations {
    cpis {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV1 {
        canBeConsumed = false
        transitive = false
    }
    upgradeTestingCpiV2 {
        canBeConsumed = false
        transitive = false
    }
}

sourceSets {
    smokeTest {
        java {
            srcDirs += [ 'src/smokeTest/java' ]
        }
        kotlin {
            srcDirs += [ 'src/smokeTest/kotlin' ]
        }
        resources {
            srcDirs = [ 'src/smokeTest/resources' ]
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

kotlin {
    target {
        java
        compilations.smokeTest {
            associateWith compilations.main
            associateWith compilations.test

            configurations {
                smokeTestApi.extendsFrom testApi
                smokeTestImplementation.extendsFrom testImplementation
                smokeTestRuntimeOnly.extendsFrom testRuntimeOnly
            }
        }
    }
}

dependencies {
    // NO CORDA DEPENDENCIES!!
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:$kotlinCoroutinesVersion"

    smokeTestImplementation "net.corda:corda-avro-schema:$cordaApiVersion"
    // Avoid having the schema names and keys scattered across projects
    smokeTestImplementation "net.corda:corda-config-schema:$cordaApiVersion"

    // But building a cpb for use in a test is ok.
    cpis project(path: ':notary-plugins:notary-plugin-non-validating:notary-plugin-non-validating-server', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:test-cordapp', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-consensual-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':testing:cpbs:ledger-utxo-demo-app', configuration: 'cordaCPB')
    upgradeTestingCpiV1 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v1', configuration: 'cordaCPB')
    upgradeTestingCpiV2 project(path: ':testing:cpbs:test-cordapp-for-vnode-upgrade-testing-v2', configuration: 'cordaCPB')

    smokeTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    smokeTestImplementation "org.eclipse.jetty.websocket:websocket-client:$jettyVersion"
    smokeTestImplementation "org.slf4j:slf4j-api:$slf4jVersion"

    smokeTestImplementation project(':components:flow:flow-rest-resource-service')
    smokeTestImplementation project(':libs:crypto:crypto-core')
    // TODO: this reference is only to get the serialialiser. I don't think this should be in the
    //  messagebus project.
    smokeTestImplementation project(":libs:messaging:kafka-message-bus-impl")
    smokeTestImplementation project(":libs:schema-registry:schema-registry")
    smokeTestImplementation project(":libs:schema-registry:schema-registry-impl")
    smokeTestImplementation project(":libs:serialization:serialization-avro")
    smokeTestImplementation project(':testing:e2e-test-utilities')
    smokeTestImplementation project(":testing:packaging-test-utilities")
    smokeTestImplementation project(':testing:test-utilities')
    smokeTestImplementation project(":testing:uniqueness:uniqueness-utilities")

    smokeTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    smokeTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
}

def smokeTestResources = tasks.named('processSmokeTestResources', ProcessResources) {
    from(configurations.cpis) {
        into 'META-INF'
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "\$1\$3"
    }

    // These CPBs need to have the same name as the main test-cordapp because they test force-upload to overwrite existing CPIs.

    // Put the test cordapp for upgrade testing (v1) into a folder
    def upgradeTestingCpiV1 = configurations.upgradeTestingCpiV1
    def upgradeTestingCpiV1Dir = "META-INF" + File.separator + "upgrade-testing-v1"
    from(upgradeTestingCpiV1) {
        into upgradeTestingCpiV1Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
    // Put the test cordapp for upgrade testing (v2) into a folder
    def upgradeTestingCpiV2 = configurations.upgradeTestingCpiV2
    def upgradeTestingCpiV2Dir = "META-INF" + File.separator + "upgrade-testing-v2"
    from(upgradeTestingCpiV2) {
        into upgradeTestingCpiV2Dir
        rename "(.+)(-(?:\\d+\\.*)+.-.+-package)(\\.cpb)\$", "upgrade-testing-cordapp.cpb"
    }
}

tasks.register('smokeTest', Test) {
    description = "Runs smoke tests."
    group = "verification"

    dependsOn smokeTestResources

    testClassesDirs = project.sourceSets["smokeTest"].output.classesDirs
    classpath = project.sourceSets["smokeTest"].runtimeClasspath

    // TODO - switch default around so this can be run locally.
    //  Also refactor property names to remove "health" now that they are more general purpose.
    def combinedWorker = project.getProperties().getOrDefault("isCombinedWorker", false)

    // Note these port values have to match what is setup as part of port forwarding at cluster bootstrap time.
    // E.g. during Jenkins pipeline setup.
    def combinedWorkerAddress = "http://localhost:7004/"
    systemProperty "cryptoWorkerHealthHttp",
            project.getProperties().getOrDefault("cryptoWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7001/")
    systemProperty "restWorkerHealthHttp",
            project.getProperties().getOrDefault("restWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7002/")
    systemProperty "flowWorkerHealthHttp",
            project.getProperties().getOrDefault("flowWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7003/")
    systemProperty "flowMapperWorkerHealthHttp",
            project.getProperties().getOrDefault("flowMapperWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7004/")
    systemProperty "verificationWorkerHealthHttp",
            project.getProperties().getOrDefault("verificationWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7005/")
    systemProperty "dbWorkerHealthHttp",
            project.getProperties().getOrDefault("dbWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7006/")
    systemProperty "persistenceWorkerHealthHttp",
            project.getProperties().getOrDefault("persistenceWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7007/")
    systemProperty "uniquenessWorkerHealthHttp",
            project.getProperties().getOrDefault("uniquenessWorkerHealthHttp", combinedWorker ? combinedWorkerAddress : "http://localhost:7008/")

    jvmArgs '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'
}
